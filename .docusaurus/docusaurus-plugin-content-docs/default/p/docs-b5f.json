{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorial":[{"type":"category","label":"Getting Started","className":"category-getting-started","collapsible":false,"items":[{"type":"link","label":"How CKB Works","href":"/docs/getting-started/how-ckb-works","docId":"getting-started/how-ckb-works","unlisted":false},{"type":"link","label":"Quick Start (5min)","href":"/docs/getting-started/quick-start","docId":"getting-started/quick-start","unlisted":false},{"type":"link","label":"Installation Guide","href":"/docs/getting-started/installation-guide","docId":"getting-started/installation-guide","unlisted":false},{"type":"link","label":"Blockchain Networks","href":"/docs/getting-started/blockchain-networks","docId":"getting-started/blockchain-networks","unlisted":false},{"type":"link","label":"CKB vs. BTC","href":"/docs/getting-started/ckb-vs-btc","docId":"getting-started/ckb-vs-btc","unlisted":false}],"collapsed":false},{"type":"category","label":"SDK & Devtools","className":"category-tool","collapsible":false,"items":[{"type":"link","label":"Rust","href":"/docs/sdk-and-devtool/rust","docId":"sdk-and-devtool/rust","unlisted":false},{"type":"link","label":"Go","href":"/docs/sdk-and-devtool/go","docId":"sdk-and-devtool/go","unlisted":false},{"type":"link","label":"Java","href":"/docs/sdk-and-devtool/java","docId":"sdk-and-devtool/java","unlisted":false},{"type":"link","label":"JavaScript/TypeScript (CCC)","href":"/docs/sdk-and-devtool/ccc","docId":"sdk-and-devtool/ccc","unlisted":false},{"type":"link","label":"JavaScript/TypeScript (Lumos)","href":"/docs/sdk-and-devtool/lumos","docId":"sdk-and-devtool/lumos","unlisted":false},{"type":"link","label":"CKB-CLI","href":"/docs/sdk-and-devtool/ckb-cli","docId":"sdk-and-devtool/ckb-cli","unlisted":false},{"type":"link","label":"OffCKB","href":"/docs/sdk-and-devtool/offckb","docId":"sdk-and-devtool/offckb","unlisted":false},{"type":"link","label":"Other Dev Tools","href":"/docs/sdk-and-devtool/devtool","docId":"sdk-and-devtool/devtool","unlisted":false}],"collapsed":false},{"type":"category","label":"DApp Tutorials","className":"category-dapp","collapsible":false,"items":[{"type":"link","label":"Transfer CKB","href":"/docs/dapp/transfer-ckb","docId":"dapp/transfer-ckb","unlisted":false},{"type":"link","label":"Store Data on Cell","href":"/docs/dapp/store-data-on-cell","docId":"dapp/store-data-on-cell","unlisted":false},{"type":"link","label":"Create a Fungible Token","href":"/docs/dapp/create-token","docId":"dapp/create-token","unlisted":false},{"type":"link","label":"Create a DOB","href":"/docs/dapp/create-dob","docId":"dapp/create-dob","unlisted":false},{"type":"link","label":"Build a Simple Lock","href":"/docs/dapp/simple-lock","docId":"dapp/simple-lock","unlisted":false}],"collapsed":false},{"type":"category","label":"Scripts (Smart Contracts)","className":"category-script","collapsible":false,"items":[{"type":"link","label":"Intro to Script","href":"/docs/script/intro-to-script","docId":"script/intro-to-script","unlisted":false},{"type":"link","label":"Program Languages for Script","href":"/docs/script/program-language-for-script","docId":"script/program-language-for-script","unlisted":false},{"type":"link","label":"CKB Syscalls for Script","href":"/docs/script/syscalls-for-script","docId":"script/syscalls-for-script","unlisted":false},{"type":"link","label":"VM Cycle Limits","href":"/docs/script/vm-cycle-limits","docId":"script/vm-cycle-limits","unlisted":false},{"type":"link","label":"Tutorial: A Minimal Script","href":"/docs/script/minimal-script","docId":"script/minimal-script","unlisted":false},{"type":"link","label":"Tutorial: Simple UDT","href":"/docs/script/sudt-script","docId":"script/sudt-script","unlisted":false},{"type":"link","label":"Tutorial: Spawn Script","href":"/docs/script/spawn-script","docId":"script/spawn-script","unlisted":false},{"type":"link","label":"Tutorial: Upgradable Scripts with Type ID","href":"/docs/script/type-id","docId":"script/type-id","unlisted":false},{"type":"link","label":"Tutorial: Run JS on CKB","href":"/docs/script/js-script","docId":"script/js-script","unlisted":false},{"type":"link","label":"Debug Script","href":"/docs/script/debug-script","docId":"script/debug-script","unlisted":false},{"type":"link","label":"Common Script Error Code","href":"/docs/script/common-script-error-code","docId":"script/common-script-error-code","unlisted":false}],"collapsed":false},{"type":"category","label":"Integrate Wallets","className":"category-integrate-wallets","collapsible":false,"items":[{"type":"link","label":"Intro to Wallets","href":"/docs/integrate-wallets/intro-to-wallets","docId":"integrate-wallets/intro-to-wallets","unlisted":false},{"type":"link","label":"Wallet Connector(CCC)","href":"/docs/integrate-wallets/ccc-wallet","docId":"integrate-wallets/ccc-wallet","unlisted":false},{"type":"link","label":"JoyID","href":"/docs/integrate-wallets/joyid","docId":"integrate-wallets/joyid","unlisted":false}],"collapsed":false},{"type":"category","label":"Common Scripts","className":"category-common-scripts","collapsible":false,"items":[{"type":"link","label":"Omnilock Script","href":"/docs/common-scripts/omnilock","docId":"common-scripts/omnilock","unlisted":false},{"type":"link","label":"xUDT Script","href":"/docs/common-scripts/xudt","docId":"common-scripts/xudt","unlisted":false},{"type":"link","label":"Spore Protocol","href":"/docs/common-scripts/spore-protocol","docId":"common-scripts/spore-protocol","unlisted":false},{"type":"link","label":"Spore-DOB-0","href":"/docs/common-scripts/spore-dob-0","docId":"common-scripts/spore-dob-0","unlisted":false}],"collapsed":false},{"type":"category","label":"Network & Nodes","className":"category-node","collapsible":false,"items":[{"type":"link","label":"RPCs","href":"/docs/node/rpcs","docId":"node/rpcs","unlisted":false},{"type":"link","label":"Run a Mainnet Node","href":"/docs/node/run-mainnet-node","docId":"node/run-mainnet-node","unlisted":false},{"type":"link","label":"Run a Testnet Node","href":"/docs/node/run-testnet-node","docId":"node/run-testnet-node","unlisted":false},{"type":"link","label":"Run a Devnet Node","href":"/docs/node/run-devnet-node","docId":"node/run-devnet-node","unlisted":false},{"type":"link","label":"Run a Public RPC Node","href":"/docs/node/run-public-rpc-node","docId":"node/run-public-rpc-node","unlisted":false}],"collapsed":false},{"type":"category","label":"Serialization (Molecule)","className":"category-molecule","collapsible":false,"items":[{"type":"link","label":"Serilization and Molecule in CKB","href":"/docs/serialization/serialization-molecule-in-ckb","docId":"serialization/serialization-molecule-in-ckb","unlisted":false},{"type":"link","label":"Rust Library Features","href":"/docs/serialization/features-molecule","docId":"serialization/features-molecule","unlisted":false},{"type":"link","label":"Use in CKB Scripts","href":"/docs/serialization/use-in-ckb-scripts","docId":"serialization/use-in-ckb-scripts","unlisted":false},{"type":"link","label":"Molecule Tools","href":"/docs/serialization/tools-molecule","docId":"serialization/tools-molecule","unlisted":false},{"type":"link","label":"Molecule Schema Language","href":"/docs/serialization/schema-language","docId":"serialization/schema-language","unlisted":false},{"type":"link","label":"Encoding Spec With Examples","href":"/docs/serialization/encoding-specs","docId":"serialization/encoding-specs","unlisted":false},{"type":"link","label":"Example: A Role-Playing Game","href":"/docs/serialization/example-role-playing-game","docId":"serialization/example-role-playing-game","unlisted":false}],"collapsed":false},{"type":"category","label":"How-Tos","className":"category-howto","collapsible":false,"items":[{"type":"link","label":"How to Sign a Transaction","href":"/docs/how-tos/how-to-sign-a-tx","docId":"how-tos/how-to-sign-a-tx","unlisted":false},{"type":"link","label":"How to Query Transaction State","href":"/docs/how-tos/how-to-query-tx-state","docId":"how-tos/how-to-query-tx-state","unlisted":false},{"type":"link","label":"How to Calculate Transaction Hash","href":"/docs/how-tos/how-to-calculate-tx-hash","docId":"how-tos/how-to-calculate-tx-hash","unlisted":false},{"type":"link","label":"How to Calculate Script Hash","href":"/docs/how-tos/how-to-calculate-script-hash","docId":"how-tos/how-to-calculate-script-hash","unlisted":false},{"type":"link","label":"How to Calculate Code Hash","href":"/docs/how-tos/how-to-calculate-code-hash","docId":"how-tos/how-to-calculate-code-hash","unlisted":false}],"collapsed":false},{"type":"category","label":"History & Hard Forks","className":"category-history","collapsible":false,"items":[{"type":"link","label":"Intro to Hard Fork","href":"/docs/history-and-hard-forks/intro-to-hard-fork","docId":"history-and-hard-forks/intro-to-hard-fork","unlisted":false}],"collapsed":false},{"type":"category","label":"Tech Explanation","className":"category-tech-explanation","collapsible":false,"items":[{"type":"link","label":"Nervos Blockchain","href":"/docs/tech-explanation/nervos-blockchain","docId":"tech-explanation/nervos-blockchain","unlisted":false},{"type":"link","label":"Cell","href":"/docs/tech-explanation/cell","docId":"tech-explanation/cell","unlisted":false},{"type":"link","label":"Cell Model","href":"/docs/tech-explanation/cell-model","docId":"tech-explanation/cell-model","unlisted":false},{"type":"link","label":"Capacity","href":"/docs/tech-explanation/capacity","docId":"tech-explanation/capacity","unlisted":false},{"type":"link","label":"Script","href":"/docs/tech-explanation/script","docId":"tech-explanation/script","unlisted":false},{"type":"link","label":"code_hash","href":"/docs/tech-explanation/code-hash","docId":"tech-explanation/code-hash","unlisted":false},{"type":"link","label":"hash_type","href":"/docs/tech-explanation/hash-type","docId":"tech-explanation/hash-type","unlisted":false},{"type":"link","label":"script_args","href":"/docs/tech-explanation/script-args","docId":"tech-explanation/script-args","unlisted":false},{"type":"link","label":"Lock Script","href":"/docs/tech-explanation/lock-script","docId":"tech-explanation/lock-script","unlisted":false},{"type":"link","label":"Type Script","href":"/docs/tech-explanation/type-script","docId":"tech-explanation/type-script","unlisted":false},{"type":"link","label":"Lock Script vs. Type Script: The Difference","href":"/docs/tech-explanation/lock-type-diff","docId":"tech-explanation/lock-type-diff","unlisted":false},{"type":"link","label":"Script Group Execution","href":"/docs/tech-explanation/script-group-exe","docId":"tech-explanation/script-group-exe","unlisted":false},{"type":"link","label":"witnesses","href":"/docs/tech-explanation/witness","docId":"tech-explanation/witness","unlisted":false},{"type":"link","label":"ckbhash","href":"/docs/tech-explanation/ckbhash","docId":"tech-explanation/ckbhash","unlisted":false},{"type":"link","label":"Transaction","href":"/docs/tech-explanation/transaction","docId":"tech-explanation/transaction","unlisted":false},{"type":"link","label":"Cell_deps","href":"/docs/tech-explanation/cell-deps","docId":"tech-explanation/cell-deps","unlisted":false},{"type":"link","label":"out_point","href":"/docs/tech-explanation/out-point","docId":"tech-explanation/out-point","unlisted":false},{"type":"link","label":"dep_type","href":"/docs/tech-explanation/dep-type","docId":"tech-explanation/dep-type","unlisted":false},{"type":"link","label":"dep_group","href":"/docs/tech-explanation/dep-group","docId":"tech-explanation/dep-group","unlisted":false},{"type":"link","label":"header_dep","href":"/docs/tech-explanation/header-dep","docId":"tech-explanation/header-dep","unlisted":false},{"type":"link","label":"CellInput","href":"/docs/tech-explanation/cellinput","docId":"tech-explanation/cellinput","unlisted":false},{"type":"link","label":"previous_output","href":"/docs/tech-explanation/previous-output","docId":"tech-explanation/previous-output","unlisted":false},{"type":"link","label":"OutPoint","href":"/docs/tech-explanation/outpoint","docId":"tech-explanation/outpoint","unlisted":false},{"type":"link","label":"since","href":"/docs/tech-explanation/since","docId":"tech-explanation/since","unlisted":false},{"type":"link","label":"outputs","href":"/docs/tech-explanation/outputs","docId":"tech-explanation/outputs","unlisted":false},{"type":"link","label":"outputs_data","href":"/docs/tech-explanation/outputs-data","docId":"tech-explanation/outputs-data","unlisted":false},{"type":"link","label":"Block","href":"/docs/tech-explanation/block","docId":"tech-explanation/block","unlisted":false},{"type":"link","label":"header","href":"/docs/tech-explanation/header","docId":"tech-explanation/header","unlisted":false},{"type":"link","label":"RawHeader","href":"/docs/tech-explanation/rawheader","docId":"tech-explanation/rawheader","unlisted":false},{"type":"link","label":"transactions","href":"/docs/tech-explanation/transactions","docId":"tech-explanation/transactions","unlisted":false},{"type":"link","label":"uncles","href":"/docs/tech-explanation/uncles","docId":"tech-explanation/uncles","unlisted":false},{"type":"link","label":"proposals","href":"/docs/tech-explanation/proposals","docId":"tech-explanation/proposals","unlisted":false},{"type":"link","label":"CKB Address","href":"/docs/tech-explanation/ckb-address","docId":"tech-explanation/ckb-address","unlisted":false},{"type":"link","label":"CKB-VM","href":"/docs/tech-explanation/ckb-vm","docId":"tech-explanation/ckb-vm","unlisted":false},{"type":"link","label":"Consensus","href":"/docs/tech-explanation/consensus","docId":"tech-explanation/consensus","unlisted":false},{"type":"link","label":"Tokenomics","href":"/docs/tech-explanation/economics","docId":"tech-explanation/economics","unlisted":false},{"type":"link","label":"Glossary","href":"/docs/tech-explanation/glossary","docId":"tech-explanation/glossary","unlisted":false}],"collapsed":false},{"type":"category","label":"Mining","className":"category-mining","collapsible":false,"items":[{"type":"link","label":"Algorithm and Difficulty Adjustment","href":"/docs/mining/algorithm-difficulty","docId":"mining/algorithm-difficulty","unlisted":false},{"type":"link","label":"Rewards","href":"/docs/mining/rewards","docId":"mining/rewards","unlisted":false},{"type":"link","label":"Halving","href":"/docs/mining/halving","docId":"mining/halving","unlisted":false},{"type":"link","label":"Cost & Profit","href":"/docs/mining/cost-and-profit","docId":"mining/cost-and-profit","unlisted":false},{"type":"link","label":"Potential Risks","href":"/docs/mining/risks","docId":"mining/risks","unlisted":false},{"type":"link","label":"Hardware","href":"/docs/mining/hardware","docId":"mining/hardware","unlisted":false},{"type":"link","label":"Guide","href":"/docs/mining/guide","docId":"mining/guide","unlisted":false},{"type":"link","label":"Info and Stats","href":"/docs/mining/info-stats","docId":"mining/info-stats","unlisted":false}],"collapsed":false},{"type":"category","label":"Ecosystem","className":"category-ecosystem","collapsible":false,"items":[{"type":"link","label":"Projects","href":"/docs/ecosystem/projects","docId":"ecosystem/projects","unlisted":false},{"type":"link","label":"Organizations","href":"/docs/ecosystem/organizations","docId":"ecosystem/organizations","unlisted":false}],"collapsed":false},{"type":"category","label":"Resources","className":"category-resources","collapsible":false,"items":[{"type":"link","label":"Positioning Paper","href":"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0001-positioning/0001-positioning.md"},{"type":"link","label":"CKB RFCs","href":"https://github.com/nervosnetwork/rfcs"},{"type":"link","label":"CKB Dev Log","href":"https://github.com/nervosnetwork/ckb/discussions/categories/dev-log"},{"type":"link","label":"CKB Academy","href":"https://academy.ckb.dev/"},{"type":"link","label":"CKB Cookbook","href":"https://cookbook.ckbdapps.com/"}],"collapsed":false}]},"docs":{"common-scripts/omnilock":{"id":"common-scripts/omnilock","title":"Omnilock Script","description":"Omnilock is a Lock Script designed for interoperability. It comes with built-in support for verification of transaction signing methods used in Bitcoin, Ethereum, EOS, Dogecoin and more. It also includes a regulation compliance module, which allows an administrator to revoke tokens held by users under certain circumstances.","sidebar":"tutorial"},"common-scripts/spore-dob-0":{"id":"common-scripts/spore-dob-0","title":"Spore-DOB-0","description":"The Spore Protocol stores value in Cells, while the Spore DOB Protocol Family built on this by interpreting and combining these Cells. The family includes protocols like DOB/0, DOB/1 or DOB/2. Spore DOB-0 is the first implementation, specifing the configuration method and interface format for decoders and providing a universal decoder to simplify development.","sidebar":"tutorial"},"common-scripts/spore-protocol":{"id":"common-scripts/spore-protocol","title":"Spore Protocol","description":"The Spore Protocol is an on-chain protocol designed to empower the ownership, distribution, and value capture of unique digital objects (DOBs) known as Spores.","sidebar":"tutorial"},"common-scripts/xudt":{"id":"common-scripts/xudt","title":"xUDT Script","description":"Extensible UDT(xUDT) is the User-Defined-Token(fungible token) Script implementation on CKB. When issuing tokens, most developers use xUDT as the Script. You can think of it as the ERC-20 smart contract on Ethereum. There is also a dApp tutorial on creating a fungible token using the xUDT Script.","sidebar":"tutorial"},"dapp/create-dob":{"id":"dapp/create-dob","title":"Create a DOB","description":"Tutorial Overview","sidebar":"tutorial"},"dapp/create-token":{"id":"dapp/create-token","title":"Create a Fungible Token","description":"Tutorial Overview","sidebar":"tutorial"},"dapp/simple-lock":{"id":"dapp/simple-lock","title":"Build a Simple Lock","description":"Tutorial Overview","sidebar":"tutorial"},"dapp/store-data-on-cell":{"id":"dapp/store-data-on-cell","title":"Store Data on Cell","description":"Tutorial Overview","sidebar":"tutorial"},"dapp/transfer-ckb":{"id":"dapp/transfer-ckb","title":"Transfer CKB","description":"Tutorial Overview","sidebar":"tutorial"},"ecosystem/organizations":{"id":"ecosystem/organizations","title":"Organizations","description":"Explore all the organizations and their relevant GitHub repositories within the decentralized Nervos ecosystem.","sidebar":"tutorial"},"ecosystem/projects":{"id":"ecosystem/projects","title":"Projects","description":"Discover our ecosystem of tools, resources, and projects that are essential for building your application","sidebar":"tutorial"},"getting-started/blockchain-networks":{"id":"getting-started/blockchain-networks","title":"Blockchain Networks","description":"CKB has different blockchain networks for different environments.","sidebar":"tutorial"},"getting-started/ckb-vs-btc":{"id":"getting-started/ckb-vs-btc","title":"CKB vs. BTC","description":"CKB draws inspiration from Bitcoin, the pioneer of blockchain, and builds on Bitcoin’s foundational innovations such as UTXO and Proof of Work, while uniquely focusing on enhancing contract flexibility and layer 2 solutions tailored for Bitcoin. This guide will walk you through key concepts and comparisons to get you started on your journey with Nervos CKB, focusing on the basic unit, virtual machine (VM), Scripts, transaction structure, and verification process.","sidebar":"tutorial"},"getting-started/how-ckb-works":{"id":"getting-started/how-ckb-works","title":"How CKB Works","description":"Whether you’re new to blockchain or have a technical background, this guide will help you understand how CKB works. We’ll explore the fundamental components—Cell Model, Scripts, Transaction, and CKB-VM—in a way that’s easy to grasp.","sidebar":"tutorial"},"getting-started/installation-guide":{"id":"getting-started/installation-guide","title":"Installation Guide","description":"This installation guide provides a step-by-step setup of all essential tools needed for completing every tutorial across the documentation.","sidebar":"tutorial"},"getting-started/quick-start":{"id":"getting-started/quick-start","title":"Quick Start (5min)","description":"We recommend using offCKB to quickly set up a local development environment using our pre-built boilerplates. This streamlined approach allows you to jumpstart your project efficiently without the hassle of manual configuration.","sidebar":"tutorial"},"history-and-hard-forks/intro-to-hard-fork":{"id":"history-and-hard-forks/intro-to-hard-fork","title":"Intro to Hard Fork","description":"What is a Hard Fork?","sidebar":"tutorial"},"how-tos/how-to-calculate-code-hash":{"id":"how-tos/how-to-calculate-code-hash","title":"How to Calculate Code Hash","description":"Code hash is the hash of the code binary stored as the data in the code Cell. It is calculated as follows:","sidebar":"tutorial"},"how-tos/how-to-calculate-script-hash":{"id":"how-tos/how-to-calculate-script-hash","title":"How to Calculate Script Hash","description":"Script hash is calculated as follows:","sidebar":"tutorial"},"how-tos/how-to-calculate-tx-hash":{"id":"how-tos/how-to-calculate-tx-hash","title":"How to Calculate Transaction Hash","description":"Transaction hash is calculated as follows:","sidebar":"tutorial"},"how-tos/how-to-query-tx-state":{"id":"how-tos/how-to-query-tx-state","title":"How to Query Transaction State","description":"Upon broadcasting a transaction using the send_transaction RPC, you will receive a transaction hash (txhash), which only indicates that the transaction has been sent to the network, NOT necessarily that it has been verified on-chain.","sidebar":"tutorial"},"how-tos/how-to-sign-a-tx":{"id":"how-tos/how-to-sign-a-tx","title":"How to Sign a Transaction","description":"In CKB, there are two primary Lock Scripts with distinct address code hash indexes:","sidebar":"tutorial"},"integrate-wallets/ccc-wallet":{"id":"integrate-wallets/ccc-wallet","title":"Wallet Connector(CCC)","description":"Common Chains Connector (CCC) is a new wallet connectivity library developed in Typescript Lang, designed to make it easier for developers to help users connect with multiple ecosystem wallets and manage their assets directly on CKB.","sidebar":"tutorial"},"integrate-wallets/intro-to-wallets":{"id":"integrate-wallets/intro-to-wallets","title":"Intro to Wallets","description":"Essential insights for CKB dApp developers, covering wallet choices, address specifics, and CKB transfer guidelines","sidebar":"tutorial"},"integrate-wallets/joyid":{"id":"integrate-wallets/joyid","title":"JoyID","description":"Integrate Wallet (JoyID)","sidebar":"tutorial"},"mining/algorithm-difficulty":{"id":"mining/algorithm-difficulty","title":"Algorithm and Difficulty Adjustment","description":"CKB uses the NC-MAX consensus, an advancement of the Nakamoto consensus, with the independently developed mining algorithm, Eaglesong.","sidebar":"tutorial"},"mining/cost-and-profit":{"id":"mining/cost-and-profit","title":"Cost & Profit","description":"Mining CKBytes allows you to essentially purchase CKBytes at the cost of energy rather than market prices. Mining involves costs such as electricity, hardware, cooling, maintenance, and pool fees.","sidebar":"tutorial"},"mining/guide":{"id":"mining/guide","title":"Guide","description":"This guide will help those who are interested in mining get started on Nervos. We will discuss the essential basics, such as how to find compatible equipment, the importance of choosing a mining pool, and most importantly, we will point out a few other informational resources that will help you to make your mining operation successful.","sidebar":"tutorial"},"mining/halving":{"id":"mining/halving","title":"Halving","description":"Nervos CKB will have a halving event every 4 years according to its mechanism, at which time the base issuance rewards will be halved. View countdown","sidebar":"tutorial"},"mining/hardware":{"id":"mining/hardware","title":"Hardware","description":"Since March 2020, CKB mining has gradually shifted towards ASIC mining. Mining CKB requires purchasing professional mining machines developed by third-party manufacturers.","sidebar":"tutorial"},"mining/info-stats":{"id":"mining/info-stats","title":"Info and Stats","description":"CKB Hash Rates Overview in Major Pools","sidebar":"tutorial"},"mining/rewards":{"id":"mining/rewards","title":"Rewards","description":"CKB block rewards comprise base reward, secondary reward, proposal reward, and commitment reward, jointly determined by Nervos’ tokenomics and the NC Max consensus.","sidebar":"tutorial"},"mining/risks":{"id":"mining/risks","title":"Potential Risks","description":"Legal and Policy Concerns","sidebar":"tutorial"},"node/rpcs":{"id":"node/rpcs","title":"RPCs","description":"CKB RPCs are a set of programming interfaces provided by the Nervos CKB blockchain, enabling developers to interact with the network for querying data, managing transactions, and deploying Scripts directly.","sidebar":"tutorial"},"node/run-devnet-node":{"id":"node/run-devnet-node","title":"Run a Devnet Node","description":"Ideal for local dev environment to start building your CKB dApp. No special local storage required.","sidebar":"tutorial"},"node/run-mainnet-node":{"id":"node/run-mainnet-node","title":"Run a Mainnet Node","description":"Running a Mainnet node allows you to participate directly in the live blockchain, supporting the network's operation and integrity. This guide will cover the steps needed to set up and run a mainnet node on CKB, which is ideal for those looking to be actively involved in the network's governance and day-to-day activities. We suggest a minimum of 100GB of local storage for this purpose.","sidebar":"tutorial"},"node/run-public-rpc-node":{"id":"node/run-public-rpc-node","title":"Run a Public RPC Node","description":"A public RPC node allows external parties to interact with the blockchain, enabling actions such as querying blockchain data or submitting transactions. This setup is crucial for applications that rely on real-time data from the blockchain.","sidebar":"tutorial"},"node/run-testnet-node":{"id":"node/run-testnet-node","title":"Run a Testnet Node","description":"Nervos has introduced the Pudge Testnet for developers to experiment with integrations and Scripts. This is ideal for exploring functionalities in a risk-free environment. Due to hash rate fluctuations, expect periodic resets. We suggest allocating 200GB for experimentation.","sidebar":"tutorial"},"script/common-script-error-code":{"id":"script/common-script-error-code","title":"Common Script Error Code","description":"CKB defines some basic error codes:","sidebar":"tutorial"},"script/debug-script":{"id":"script/debug-script","title":"Debug Script","description":"<TutorialHeader","sidebar":"tutorial"},"script/intro-to-script":{"id":"script/intro-to-script","title":"Intro to Script","description":"A Script in Nervos CKB is a binary executable that can be executed on-chain. It is Turing-complete and can perform arbitrary logic to guard and protect your on-chain assets. You can think of it as smart contract.","sidebar":"tutorial"},"script/js-script":{"id":"script/js-script","title":"Tutorial: Run JS on CKB","description":"<TutorialHeader","sidebar":"tutorial"},"script/minimal-script":{"id":"script/minimal-script","title":"Tutorial: A Minimal Script","description":"A Minimal Script","sidebar":"tutorial"},"script/program-language-for-script":{"id":"script/program-language-for-script","title":"Program Languages for Script","description":"We have learned what a Script is and how a Script works. So, how do we write a Script then? What kind of programming language do I need to use?","sidebar":"tutorial"},"script/spawn-script":{"id":"script/spawn-script","title":"Tutorial: Spawn Script","description":"The design of the syscall spawn function draws inspiration from Unix and Linux, hence they share the same terminologies: process, pipe, and file descriptor.","sidebar":"tutorial"},"script/sudt-script":{"id":"script/sudt-script","title":"Tutorial: Simple UDT","description":"User-Defined Token (UDT) is a fungible token standard on CKB blockchain.","sidebar":"tutorial"},"script/syscalls-for-script":{"id":"script/syscalls-for-script","title":"CKB Syscalls for Script","description":"A collection of CKB-VM syscalls. Also include relevant constant, such as return codes, sources, Cell fields, header fields, and input fields.","sidebar":"tutorial"},"script/type-id":{"id":"script/type-id","title":"Tutorial: Upgradable Scripts with Type ID","description":"Scripts are codes that execute on-chain and cannot be stopped. However, sometimes you might want to ensure your Script is upgradable in case there are bugs in the source code.","sidebar":"tutorial"},"script/vm-cycle-limits":{"id":"script/vm-cycle-limits","title":"VM Cycle Limits","description":"Cycle limits are used to regulate VM Scripts. CKB-VM is a flexible VM that can implement many control flow constructs, such as loops or branches. As a result, we need to enforce certain rules in CKB-VM to prevent malicious Scripts, such as those with infinite loops.","sidebar":"tutorial"},"sdk-and-devtool/ccc":{"id":"sdk-and-devtool/ccc","title":"JavaScript/TypeScript (CCC)","description":"Introduction","sidebar":"tutorial"},"sdk-and-devtool/ckb-cli":{"id":"sdk-and-devtool/ckb-cli","title":"CKB-CLI","description":"ckb-cli is a CKB command-line tool developed in Rust.","sidebar":"tutorial"},"sdk-and-devtool/devtool":{"id":"sdk-and-devtool/devtool","title":"Other Dev Tools","description":"Besides CKB-SDK-Rust, CKB-SDK-Go, CKB-SDK-Java, and Lumos, you can also explore other essential tools tailored for development on Nervos CKB here:","sidebar":"tutorial"},"sdk-and-devtool/go":{"id":"sdk-and-devtool/go","title":"Go","description":"Introduction","sidebar":"tutorial"},"sdk-and-devtool/java":{"id":"sdk-and-devtool/java","title":"Java","description":"Introduction","sidebar":"tutorial"},"sdk-and-devtool/lumos":{"id":"sdk-and-devtool/lumos","title":"JavaScript/TypeScript (Lumos)","description":"Introduction","sidebar":"tutorial"},"sdk-and-devtool/offckb":{"id":"sdk-and-devtool/offckb","title":"OffCKB","description":"offckb is a an all-in-one CLI tool that provides a local CKB development environment.","sidebar":"tutorial"},"sdk-and-devtool/rust":{"id":"sdk-and-devtool/rust","title":"Rust","description":"Introduction","sidebar":"tutorial"},"serialization/encoding-specs":{"id":"serialization/encoding-specs","title":"Encoding Spec With Examples","description":"Summary of Data Types","sidebar":"tutorial"},"serialization/example-role-playing-game":{"id":"serialization/example-role-playing-game","title":"Example: A Role-Playing Game","description":"As an example, we’ve developed a role-playing game consisting of 4 schema files:","sidebar":"tutorial"},"serialization/features-molecule":{"id":"serialization/features-molecule","title":"Rust Library Features","description":"Molecule is developed in Rust language. The default feature in the Rust library is enabled by default, including std feature and more:","sidebar":"tutorial"},"serialization/schema-language":{"id":"serialization/schema-language","title":"Molecule Schema Language","description":"Grammar","sidebar":"tutorial"},"serialization/serialization-molecule-in-ckb":{"id":"serialization/serialization-molecule-in-ckb","title":"Serilization and Molecule in CKB","description":"Serialization refers to the conversion of data structures into a format that facilitates easy storage, transmission, and reconstruction. In Nervos CKB, serialization must ensure stability, consistency, and efficiency. These requirements are essential for maintaining data integrity and ensuring smooth data operations.","sidebar":"tutorial"},"serialization/tools-molecule":{"id":"serialization/tools-molecule","title":"Molecule Tools","description":"Schema Compiler and Code Generator","sidebar":"tutorial"},"serialization/use-in-ckb-scripts":{"id":"serialization/use-in-ckb-scripts","title":"Use in CKB Scripts","description":"When Molecule Rust library is used in CKB Scripts, no-std needs to be specified.","sidebar":"tutorial"},"tech-explanation/block":{"id":"tech-explanation/block","title":"Block","description":"A block is a container of transactions, carrying the information required by consensus so the participants can verify and recognize the canonical chain.","sidebar":"tutorial"},"tech-explanation/capacity":{"id":"tech-explanation/capacity","title":"Capacity","description":"Capacity is the storage limit of a Cell in a transaction. Capacity refers to both the quantity of stored tokens and the maximum amount of data the Cell can hold. The capacity of a Cell determines its ability to store various fields, including data, lock, type, and its own capacity.","sidebar":"tutorial"},"tech-explanation/cell":{"id":"tech-explanation/cell","title":"Cell","description":"Structure","sidebar":"tutorial"},"tech-explanation/cell-deps":{"id":"tech-explanation/cell-deps","title":"Cell_deps","description":"Cell_deps allows Scripts in the transaction to access referenced Live Cells. Cells listed here are all live and read-only.","sidebar":"tutorial"},"tech-explanation/cell-model":{"id":"tech-explanation/cell-model","title":"Cell Model","description":"Nervos CKB inherits Bitcoin’s architecture and creates the Cell Model, a generalized UTXO model as state storage.","sidebar":"tutorial"},"tech-explanation/cellinput":{"id":"tech-explanation/cellinput","title":"CellInput","description":"Input Cells are the output Cells of previous transactions, hence they are noted as previous_output.","sidebar":"tutorial"},"tech-explanation/ckb-address":{"id":"tech-explanation/ckb-address","title":"CKB Address","description":"CKB address packages the Lock Script into a single line of verifiable and human-readable format, adhering to Bitcoin's Bech32m address format (BIP-350). In this format, the Lock Script consists of three key parameters: codehash, hashtype, and args.","sidebar":"tutorial"},"tech-explanation/ckb-vm":{"id":"tech-explanation/ckb-vm","title":"CKB-VM","description":"Nervos introduces CKB-VM, a virtual machine powered by the RISC-V instruction set, further leveraging Turing-complete programmability, transforming smart contract execution on the Nervos blockchain. It provides considerable amount of power and flexibility while maintaining a secure and high-performance environment.","sidebar":"tutorial"},"tech-explanation/ckbhash":{"id":"tech-explanation/ckbhash","title":"ckbhash","description":"CKB uses BLAKE2b as the default hash algorithm. The specific configuration of BLAKE2b used in CKB is referred as ckbhash, characterized by:","sidebar":"tutorial"},"tech-explanation/code-hash":{"id":"tech-explanation/code-hash","title":"code_hash","description":"codehash represents the hash of the ELF-formatted RISC-V binary that contains a CKB Script. For efficiency, the Script itself is stored in a dep Cell attached to the current transaction. Depending on the hashtype value, the code_hash should either match the hash of the Cell data, or that of the Type Script in the dep Cell. During transaction verification, the actual binary is loaded into a CKB-VM instance when specified.","sidebar":"tutorial"},"tech-explanation/consensus":{"id":"tech-explanation/consensus","title":"Consensus","description":"Consensus in Nervos refers to a state of agreement among participants on the blockchain’s history and current state. The state encompasses data such as each user's CKBytes holdings and their respective digital assets.","sidebar":"tutorial"},"tech-explanation/dep-group":{"id":"tech-explanation/dep-group","title":"dep_group","description":"dep-group}","sidebar":"tutorial"},"tech-explanation/dep-type":{"id":"tech-explanation/dep-type","title":"dep_type","description":"This field interprets the referenced Cell deps.","sidebar":"tutorial"},"tech-explanation/economics":{"id":"tech-explanation/economics","title":"Tokenomics","description":"CKByte Tokenomics","sidebar":"tutorial"},"tech-explanation/glossary":{"id":"tech-explanation/glossary","title":"Glossary","description":"Glossary Sections","sidebar":"tutorial"},"tech-explanation/hash-type":{"id":"tech-explanation/hash-type","title":"hash_type","description":"hashtype defines the interpretation of the codehash when looking for matching dep Cells.","sidebar":"tutorial"},"tech-explanation/header":{"id":"tech-explanation/header","title":"header","description":"header is a sub-structure of Block and UncleBlock, including raw and nonce.","sidebar":"tutorial"},"tech-explanation/header-dep":{"id":"tech-explanation/header-dep","title":"header_dep","description":"Header Deps allows Scripts to read block headers whose hashes are listed in header_deps, with certain limitations to ensure transaction determinacy.","sidebar":"tutorial"},"tech-explanation/lock-script":{"id":"tech-explanation/lock-script","title":"Lock Script","description":"This defines the Script that determines the ownership of a Cell, used to govern the logic associated with Cell ownership.","sidebar":"tutorial"},"tech-explanation/lock-type-diff":{"id":"tech-explanation/lock-type-diff","title":"Lock Script vs. Type Script: The Difference","description":"Type Script is similar to Lock Script, with two differences:","sidebar":"tutorial"},"tech-explanation/nervos-blockchain":{"id":"tech-explanation/nervos-blockchain","title":"Nervos Blockchain","description":"What is the Nervos Blockchain?","sidebar":"tutorial"},"tech-explanation/out-point":{"id":"tech-explanation/out-point","title":"out_point","description":"A Cell outpoint pointing to the Cells used as dependencies of a transaction. Dep Cells can include code loaded into CKB-VM, or data for Script execution.","sidebar":"tutorial"},"tech-explanation/outpoint":{"id":"tech-explanation/outpoint","title":"OutPoint","description":"The transaction uses OutPoint in inputs to reference the previously created Cells instead of embedding them.","sidebar":"tutorial"},"tech-explanation/outputs":{"id":"tech-explanation/outputs","title":"outputs","description":"The transaction destroys the Cells in inputs and creates the Cells in outputs. These output Cells, identical in structure as the aforementioned Cell structure can be used as inputs for future transactions.","sidebar":"tutorial"},"tech-explanation/outputs-data":{"id":"tech-explanation/outputs-data","title":"outputs_data","description":"An array of Cell data of each output Cell. The data of the i-th Cell in outputs is the i-th item in outputs_data. The actual data is kept separate from outputs to simplify CKB Script handling and to allow for future optimization.","sidebar":"tutorial"},"tech-explanation/previous-output":{"id":"tech-explanation/previous-output","title":"previous_output","description":"A Cell outpoint that points to the Cells used as inputs. These Cells are referred through outpoint, which contains the transaction hash of the previous transaction, as well as this Cell's index in its transaction's output list.","sidebar":"tutorial"},"tech-explanation/proposals":{"id":"tech-explanation/proposals","title":"proposals","description":"proposals refer to an array of hex-encoded short transaction IDs that represent proposed transactions within a block or its uncle blocks. A transaction proposal ID is the first 10 bytes of the transaction hash. In CKB, the transaction proposal ID must be proposed before a transaction can be committed to the blockchain.","sidebar":"tutorial"},"tech-explanation/rawheader":{"id":"tech-explanation/rawheader","title":"RawHeader","description":"RawHeader is the payload of the block header.","sidebar":"tutorial"},"tech-explanation/script":{"id":"tech-explanation/script","title":"Script","description":"Structure","sidebar":"tutorial"},"tech-explanation/script-args":{"id":"tech-explanation/script-args","title":"script_args","description":"scriptargs refers to the arguments imported into the CKB-VM instance as input for the Scripts. In CKB, public key information is conventionally stored in scriptargs, while signature information is in witnesses, though it's not mandatory.","sidebar":"tutorial"},"tech-explanation/script-group-exe":{"id":"tech-explanation/script-group-exe","title":"Script Group Execution","description":"script-group-exe}","sidebar":"tutorial"},"tech-explanation/since":{"id":"tech-explanation/since","title":"since","description":"Since value guarding current referenced inputs. since can be added to any input in a transaction, specifying a future time when it can be committed. Please refer to the RFC0017: Transaction Since Precondition for details.","sidebar":"tutorial"},"tech-explanation/transaction":{"id":"tech-explanation/transaction","title":"Transaction","description":"A transaction in CKB destroys some Cells (outputs from previous transactions) and generates new ones.","sidebar":"tutorial"},"tech-explanation/transactions":{"id":"tech-explanation/transactions","title":"transactions","description":"An array of committed transactions contained in the block. Each element of this array has the same structure as the transaction structure. The first transaction must be the cellbase.","sidebar":"tutorial"},"tech-explanation/type-script":{"id":"tech-explanation/type-script","title":"Type Script","description":"type-script}","sidebar":"tutorial"},"tech-explanation/uncles":{"id":"tech-explanation/uncles","title":"uncles","description":"UncleBlock is a sub-structure of Block. It is the ordered list of uncle blocks.","sidebar":"tutorial"},"tech-explanation/witness":{"id":"tech-explanation/witness","title":"witnesses","description":"witnesses is provided by transaction creator to enable the successful execution of the corresponding Script. For example, signatures might be included to ensure a signature verification Lock Script passes.","sidebar":"tutorial"}}}}