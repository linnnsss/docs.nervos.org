{"allContent":{"docusaurus-plugin-content-docs":{"default":{"loadedVersions":[{"versionName":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","path":"/docs","tagsPath":"/docs/tags","editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs","editUrlLocalized":"https://github.com/nervosnetwork/docs-new/tree/develop/website/i18n/en/docusaurus-plugin-content-docs/current","isLast":true,"routePriority":-1,"sidebarFilePath":"/Users/sss/Desktop/docs.nervos/website/sidebars.js","contentPath":"/Users/sss/Desktop/docs.nervos/website/docs","contentPathLocalized":"/Users/sss/Desktop/docs.nervos/website/i18n/en/docusaurus-plugin-content-docs/current","docs":[{"id":"common-scripts/omnilock","title":"Omnilock Script","description":"Omnilock is a Lock Script designed for interoperability. It comes with built-in support for verification of transaction signing methods used in Bitcoin, Ethereum, EOS, Dogecoin and more. It also includes a regulation compliance module, which allows an administrator to revoke tokens held by users under certain circumstances.","source":"@site/docs/common-scripts/omnilock.mdx","sourceDirName":"common-scripts","slug":"/common-scripts/omnilock","permalink":"/docs/common-scripts/omnilock","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/common-scripts/omnilock.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"omnilock","title":"Omnilock Script"},"sidebar":"tutorial","previous":{"title":"JoyID","permalink":"/docs/integrate-wallets/joyid"},"next":{"title":"xUDT Script","permalink":"/docs/common-scripts/xudt"}},{"id":"common-scripts/spore-dob-0","title":"Spore-DOB-0","description":"The Spore Protocol stores value in Cells, while the Spore DOB Protocol Family built on this by interpreting and combining these Cells. The family includes protocols like DOB/0, DOB/1 or DOB/2. Spore DOB-0 is the first implementation, specifing the configuration method and interface format for decoders and providing a universal decoder to simplify development.","source":"@site/docs/common-scripts/spore-dob-0.mdx","sourceDirName":"common-scripts","slug":"/common-scripts/spore-dob-0","permalink":"/docs/common-scripts/spore-dob-0","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/common-scripts/spore-dob-0.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"spore-dob-0","title":"Spore-DOB-0"},"sidebar":"tutorial","previous":{"title":"Spore Protocol","permalink":"/docs/common-scripts/spore-protocol"},"next":{"title":"RPCs","permalink":"/docs/node/rpcs"}},{"id":"common-scripts/spore-protocol","title":"Spore Protocol","description":"The Spore Protocol is an on-chain protocol designed to empower the ownership, distribution, and value capture of unique digital objects (DOBs) known as Spores.","source":"@site/docs/common-scripts/spore-protocol.mdx","sourceDirName":"common-scripts","slug":"/common-scripts/spore-protocol","permalink":"/docs/common-scripts/spore-protocol","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/common-scripts/spore-protocol.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"spore-protocol","title":"Spore Protocol"},"sidebar":"tutorial","previous":{"title":"xUDT Script","permalink":"/docs/common-scripts/xudt"},"next":{"title":"Spore-DOB-0","permalink":"/docs/common-scripts/spore-dob-0"}},{"id":"common-scripts/xudt","title":"xUDT Script","description":"Extensible UDT(xUDT) is the User-Defined-Token(fungible token) Script implementation on CKB. When issuing tokens, most developers use xUDT as the Script. You can think of it as the ERC-20 smart contract on Ethereum. There is also a dApp tutorial on creating a fungible token using the xUDT Script.","source":"@site/docs/common-scripts/xudt.mdx","sourceDirName":"common-scripts","slug":"/common-scripts/xudt","permalink":"/docs/common-scripts/xudt","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/common-scripts/xudt.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"xudt","title":"xUDT Script"},"sidebar":"tutorial","previous":{"title":"Omnilock Script","permalink":"/docs/common-scripts/omnilock"},"next":{"title":"Spore Protocol","permalink":"/docs/common-scripts/spore-protocol"}},{"id":"dapp/create-dob","title":"Create a DOB","description":"Tutorial Overview","source":"@site/docs/dapp/create-dob.mdx","sourceDirName":"dapp","slug":"/dapp/create-dob","permalink":"/docs/dapp/create-dob","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/dapp/create-dob.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"create-dob","title":"Create a DOB"},"sidebar":"tutorial","previous":{"title":"Create a Fungible Token","permalink":"/docs/dapp/create-token"},"next":{"title":"Build a Simple Lock","permalink":"/docs/dapp/simple-lock"}},{"id":"dapp/create-token","title":"Create a Fungible Token","description":"Tutorial Overview","source":"@site/docs/dapp/create-token.mdx","sourceDirName":"dapp","slug":"/dapp/create-token","permalink":"/docs/dapp/create-token","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/dapp/create-token.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"create-token","title":"Create a Fungible Token"},"sidebar":"tutorial","previous":{"title":"Store Data on Cell","permalink":"/docs/dapp/store-data-on-cell"},"next":{"title":"Create a DOB","permalink":"/docs/dapp/create-dob"}},{"id":"dapp/simple-lock","title":"Build a Simple Lock","description":"Tutorial Overview","source":"@site/docs/dapp/simple-lock.mdx","sourceDirName":"dapp","slug":"/dapp/simple-lock","permalink":"/docs/dapp/simple-lock","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/dapp/simple-lock.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"simple-lock","title":"Build a Simple Lock"},"sidebar":"tutorial","previous":{"title":"Create a DOB","permalink":"/docs/dapp/create-dob"},"next":{"title":"Intro to Script","permalink":"/docs/script/intro-to-script"}},{"id":"dapp/store-data-on-cell","title":"Store Data on Cell","description":"Tutorial Overview","source":"@site/docs/dapp/write-message.mdx","sourceDirName":"dapp","slug":"/dapp/store-data-on-cell","permalink":"/docs/dapp/store-data-on-cell","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/dapp/write-message.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"store-data-on-cell","title":"Store Data on Cell"},"sidebar":"tutorial","previous":{"title":"Transfer CKB","permalink":"/docs/dapp/transfer-ckb"},"next":{"title":"Create a Fungible Token","permalink":"/docs/dapp/create-token"}},{"id":"dapp/transfer-ckb","title":"Transfer CKB","description":"Tutorial Overview","source":"@site/docs/dapp/transfer-ckb.mdx","sourceDirName":"dapp","slug":"/dapp/transfer-ckb","permalink":"/docs/dapp/transfer-ckb","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/dapp/transfer-ckb.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"transfer-ckb","title":"Transfer CKB"},"sidebar":"tutorial","previous":{"title":"Other Dev Tools","permalink":"/docs/sdk-and-devtool/devtool"},"next":{"title":"Store Data on Cell","permalink":"/docs/dapp/store-data-on-cell"}},{"id":"ecosystem/organizations","title":"Organizations","description":"Explore all the organizations and their relevant GitHub repositories within the decentralized Nervos ecosystem.","source":"@site/docs/ecosystem/organizations.md","sourceDirName":"ecosystem","slug":"/ecosystem/organizations","permalink":"/docs/ecosystem/organizations","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/ecosystem/organizations.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"organizations","title":"Organizations"},"sidebar":"tutorial","previous":{"title":"Projects","permalink":"/docs/ecosystem/projects"}},{"id":"ecosystem/projects","title":"Projects","description":"Discover our ecosystem of tools, resources, and projects that are essential for building your application","source":"@site/docs/ecosystem/projects.md","sourceDirName":"ecosystem","slug":"/ecosystem/projects","permalink":"/docs/ecosystem/projects","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/ecosystem/projects.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"projects","title":"Projects"},"sidebar":"tutorial","previous":{"title":"Info and Stats","permalink":"/docs/mining/info-stats"},"next":{"title":"Organizations","permalink":"/docs/ecosystem/organizations"}},{"id":"getting-started/blockchain-networks","title":"Blockchain Networks","description":"CKB has different blockchain networks for different environments.","source":"@site/docs/getting-started/blockchain-networks.mdx","sourceDirName":"getting-started","slug":"/getting-started/blockchain-networks","permalink":"/docs/getting-started/blockchain-networks","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/getting-started/blockchain-networks.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"blockchain-networks","title":"Blockchain Networks"},"sidebar":"tutorial","previous":{"title":"Installation Guide","permalink":"/docs/getting-started/installation-guide"},"next":{"title":"CKB vs. BTC","permalink":"/docs/getting-started/ckb-vs-btc"}},{"id":"getting-started/ckb-vs-btc","title":"CKB vs. BTC","description":"CKB draws inspiration from Bitcoin, the pioneer of blockchain, and builds on Bitcoin’s foundational innovations such as UTXO and Proof of Work, while uniquely focusing on enhancing contract flexibility and layer 2 solutions tailored for Bitcoin. This guide will walk you through key concepts and comparisons to get you started on your journey with Nervos CKB, focusing on the basic unit, virtual machine (VM), Scripts, transaction structure, and verification process.","source":"@site/docs/getting-started/ckb-vs-btc.mdx","sourceDirName":"getting-started","slug":"/getting-started/ckb-vs-btc","permalink":"/docs/getting-started/ckb-vs-btc","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/getting-started/ckb-vs-btc.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"ckb-vs-btc","title":"CKB vs. BTC"},"sidebar":"tutorial","previous":{"title":"Blockchain Networks","permalink":"/docs/getting-started/blockchain-networks"},"next":{"title":"Rust","permalink":"/docs/sdk-and-devtool/rust"}},{"id":"getting-started/how-ckb-works","title":"How CKB Works","description":"Whether you’re new to blockchain or have a technical background, this guide will help you understand how CKB works. We’ll explore the fundamental components—Cell Model, Scripts, Transaction, and CKB-VM—in a way that’s easy to grasp.","source":"@site/docs/getting-started/how-ckb-works.mdx","sourceDirName":"getting-started","slug":"/getting-started/how-ckb-works","permalink":"/docs/getting-started/how-ckb-works","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/getting-started/how-ckb-works.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"how-ckb-works","title":"How CKB Works"},"sidebar":"tutorial","next":{"title":"Quick Start (5min)","permalink":"/docs/getting-started/quick-start"}},{"id":"getting-started/installation-guide","title":"Installation Guide","description":"This installation guide provides a step-by-step setup of all essential tools needed for completing every tutorial across the documentation.","source":"@site/docs/getting-started/installation.mdx","sourceDirName":"getting-started","slug":"/getting-started/installation-guide","permalink":"/docs/getting-started/installation-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/getting-started/installation.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"installation-guide","title":"Installation Guide"},"sidebar":"tutorial","previous":{"title":"Quick Start (5min)","permalink":"/docs/getting-started/quick-start"},"next":{"title":"Blockchain Networks","permalink":"/docs/getting-started/blockchain-networks"}},{"id":"getting-started/quick-start","title":"Quick Start (5min)","description":"We recommend using offCKB to quickly set up a local development environment using our pre-built boilerplates. This streamlined approach allows you to jumpstart your project efficiently without the hassle of manual configuration.","source":"@site/docs/getting-started/quick-start.mdx","sourceDirName":"getting-started","slug":"/getting-started/quick-start","permalink":"/docs/getting-started/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/getting-started/quick-start.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"quick-start","title":"Quick Start (5min)"},"sidebar":"tutorial","previous":{"title":"How CKB Works","permalink":"/docs/getting-started/how-ckb-works"},"next":{"title":"Installation Guide","permalink":"/docs/getting-started/installation-guide"}},{"id":"history-and-hard-forks/ckb-hard-fork-history","title":"CKB Hard Fork History","description":"This page contains a timeline of all the hard forks, and updates to the Nervos CKB.","source":"@site/docs/history-and-hard-forks/ckb-hard-fork-history.mdx","sourceDirName":"history-and-hard-forks","slug":"/history-and-hard-forks/ckb-hard-fork-history","permalink":"/docs/history-and-hard-forks/ckb-hard-fork-history","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/history-and-hard-forks/ckb-hard-fork-history.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"ckb-hard-fork-history","title":"CKB Hard Fork History"},"sidebar":"tutorial","previous":{"title":"Intro to Hard Fork","permalink":"/docs/history-and-hard-forks/intro-to-hard-fork"},"next":{"title":"History VM Version","permalink":"/docs/history-and-hard-forks/history-vm-version"}},{"id":"history-and-hard-forks/history-vm-version","title":"History VM Version","description":"The CKB network has introduced various CKB-VM versions over time to enhance security, performance, resolve bugs, and support new RISC-V extensions. This article lists all versions of the CKB-VM from previous hard fork events.","source":"@site/docs/history-and-hard-forks/history-vm-version.mdx","sourceDirName":"history-and-hard-forks","slug":"/history-and-hard-forks/history-vm-version","permalink":"/docs/history-and-hard-forks/history-vm-version","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/history-and-hard-forks/history-vm-version.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"history-vm-version","title":"History VM Version"},"sidebar":"tutorial","previous":{"title":"CKB Hard Fork History","permalink":"/docs/history-and-hard-forks/ckb-hard-fork-history"},"next":{"title":"Rethinking Forks","permalink":"/docs/history-and-hard-forks/rethinking-forks"}},{"id":"history-and-hard-forks/intro-to-hard-fork","title":"Intro to Hard Fork","description":"What is a Hard Fork?","source":"@site/docs/history-and-hard-forks/intro-to-hard-fork.mdx","sourceDirName":"history-and-hard-forks","slug":"/history-and-hard-forks/intro-to-hard-fork","permalink":"/docs/history-and-hard-forks/intro-to-hard-fork","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/history-and-hard-forks/intro-to-hard-fork.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"intro-to-hard-fork","title":"Intro to Hard Fork"},"sidebar":"tutorial","previous":{"title":"How to Calculate Code Hash","permalink":"/docs/how-tos/how-to-calculate-code-hash"},"next":{"title":"CKB Hard Fork History","permalink":"/docs/history-and-hard-forks/ckb-hard-fork-history"}},{"id":"history-and-hard-forks/rethinking-forks","title":"Rethinking Forks","description":"Originally wrote by Jan Xie","source":"@site/docs/history-and-hard-forks/rethinking-fork.mdx","sourceDirName":"history-and-hard-forks","slug":"/history-and-hard-forks/rethinking-forks","permalink":"/docs/history-and-hard-forks/rethinking-forks","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/history-and-hard-forks/rethinking-fork.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"rethinking-forks","title":"Rethinking Forks"},"sidebar":"tutorial","previous":{"title":"History VM Version","permalink":"/docs/history-and-hard-forks/history-vm-version"},"next":{"title":"Nervos Blockchain","permalink":"/docs/tech-explanation/nervos-blockchain"}},{"id":"how-tos/how-to-calculate-code-hash","title":"How to Calculate Code Hash","description":"Code hash is the hash of the code binary stored as the data in the code Cell. It is calculated as follows:","source":"@site/docs/how-tos/how-to-calculate-code-hash.mdx","sourceDirName":"how-tos","slug":"/how-tos/how-to-calculate-code-hash","permalink":"/docs/how-tos/how-to-calculate-code-hash","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/how-tos/how-to-calculate-code-hash.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"how-to-calculate-code-hash","title":"How to Calculate Code Hash"},"sidebar":"tutorial","previous":{"title":"How to Calculate Script Hash","permalink":"/docs/how-tos/how-to-calculate-script-hash"},"next":{"title":"Intro to Hard Fork","permalink":"/docs/history-and-hard-forks/intro-to-hard-fork"}},{"id":"how-tos/how-to-calculate-script-hash","title":"How to Calculate Script Hash","description":"Script hash is calculated as follows:","source":"@site/docs/how-tos/how-to-calculate-script-hash.mdx","sourceDirName":"how-tos","slug":"/how-tos/how-to-calculate-script-hash","permalink":"/docs/how-tos/how-to-calculate-script-hash","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/how-tos/how-to-calculate-script-hash.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"how-to-calculate-script-hash","title":"How to Calculate Script Hash"},"sidebar":"tutorial","previous":{"title":"How to Calculate Transaction Hash","permalink":"/docs/how-tos/how-to-calculate-tx-hash"},"next":{"title":"How to Calculate Code Hash","permalink":"/docs/how-tos/how-to-calculate-code-hash"}},{"id":"how-tos/how-to-calculate-tx-hash","title":"How to Calculate Transaction Hash","description":"Transaction hash is calculated as follows:","source":"@site/docs/how-tos/how-to-calculate-tx-hash.mdx","sourceDirName":"how-tos","slug":"/how-tos/how-to-calculate-tx-hash","permalink":"/docs/how-tos/how-to-calculate-tx-hash","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/how-tos/how-to-calculate-tx-hash.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"how-to-calculate-tx-hash","title":"How to Calculate Transaction Hash"},"sidebar":"tutorial","previous":{"title":"How to Query Transaction State","permalink":"/docs/how-tos/how-to-query-tx-state"},"next":{"title":"How to Calculate Script Hash","permalink":"/docs/how-tos/how-to-calculate-script-hash"}},{"id":"how-tos/how-to-query-tx-state","title":"How to Query Transaction State","description":"Upon broadcasting a transaction using the send_transaction RPC, you will receive a transaction hash (txhash), which only indicates that the transaction has been sent to the network, NOT necessarily that it has been verified on-chain.","source":"@site/docs/how-tos/how-to-query-tx-state.mdx","sourceDirName":"how-tos","slug":"/how-tos/how-to-query-tx-state","permalink":"/docs/how-tos/how-to-query-tx-state","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/how-tos/how-to-query-tx-state.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"how-to-query-tx-state","title":"How to Query Transaction State"},"sidebar":"tutorial","previous":{"title":"How to Sign a Transaction","permalink":"/docs/how-tos/how-to-sign-a-tx"},"next":{"title":"How to Calculate Transaction Hash","permalink":"/docs/how-tos/how-to-calculate-tx-hash"}},{"id":"how-tos/how-to-sign-a-tx","title":"How to Sign a Transaction","description":"In CKB, there are two primary Lock Scripts with distinct address code hash indexes:","source":"@site/docs/how-tos/how-to-sign-a-tx.mdx","sourceDirName":"how-tos","slug":"/how-tos/how-to-sign-a-tx","permalink":"/docs/how-tos/how-to-sign-a-tx","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/how-tos/how-to-sign-a-tx.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"how-to-sign-a-tx","title":"How to Sign a Transaction"},"sidebar":"tutorial","previous":{"title":"Example: A Role-Playing Game","permalink":"/docs/serialization/example-role-playing-game"},"next":{"title":"How to Query Transaction State","permalink":"/docs/how-tos/how-to-query-tx-state"}},{"id":"integrate-wallets/ccc-wallet","title":"Wallet Connector(CCC)","description":"Common Chains Connector (CCC) is a new wallet connectivity library developed in Typescript Lang, designed to make it easier for developers to help users connect with multiple ecosystem wallets and manage their assets directly on CKB.","source":"@site/docs/integrate-wallets/ccc-wallet.mdx","sourceDirName":"integrate-wallets","slug":"/integrate-wallets/ccc-wallet","permalink":"/docs/integrate-wallets/ccc-wallet","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/integrate-wallets/ccc-wallet.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"ccc-wallet","title":"Wallet Connector(CCC)"},"sidebar":"tutorial","previous":{"title":"Intro to Wallets","permalink":"/docs/integrate-wallets/intro-to-wallets"},"next":{"title":"JoyID","permalink":"/docs/integrate-wallets/joyid"}},{"id":"integrate-wallets/intro-to-wallets","title":"Intro to Wallets","description":"Essential insights for CKB dApp developers, covering wallet choices, address specifics, and CKB transfer guidelines","source":"@site/docs/integrate-wallets/intro-to-wallets.mdx","sourceDirName":"integrate-wallets","slug":"/integrate-wallets/intro-to-wallets","permalink":"/docs/integrate-wallets/intro-to-wallets","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/integrate-wallets/intro-to-wallets.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"intro-to-wallets","title":"Intro to Wallets"},"sidebar":"tutorial","previous":{"title":"Tutorial: Run JS on CKB","permalink":"/docs/script/js-script"},"next":{"title":"Wallet Connector(CCC)","permalink":"/docs/integrate-wallets/ccc-wallet"}},{"id":"integrate-wallets/joyid","title":"JoyID","description":"Integrate Wallet (JoyID)","source":"@site/docs/integrate-wallets/integrate-joyid.mdx","sourceDirName":"integrate-wallets","slug":"/integrate-wallets/joyid","permalink":"/docs/integrate-wallets/joyid","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/integrate-wallets/integrate-joyid.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"joyid","title":"JoyID"},"sidebar":"tutorial","previous":{"title":"Wallet Connector(CCC)","permalink":"/docs/integrate-wallets/ccc-wallet"},"next":{"title":"Omnilock Script","permalink":"/docs/common-scripts/omnilock"}},{"id":"mining/algorithm-difficulty","title":"Algorithm and Difficulty Adjustment","description":"CKB uses the NC-MAX consensus, an advancement of the Nakamoto consensus, with the independently developed mining algorithm, Eaglesong.","source":"@site/docs/mining/algorithm-difficulty.mdx","sourceDirName":"mining","slug":"/mining/algorithm-difficulty","permalink":"/docs/mining/algorithm-difficulty","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/mining/algorithm-difficulty.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"algorithm-difficulty","title":"Algorithm and Difficulty Adjustment"},"sidebar":"tutorial","previous":{"title":"Glossary","permalink":"/docs/tech-explanation/glossary"},"next":{"title":"Rewards","permalink":"/docs/mining/rewards"}},{"id":"mining/cost-and-profit","title":"Cost & Profit","description":"Mining CKBytes allows you to essentially purchase CKBytes at the cost of energy rather than market prices. Mining involves costs such as electricity, hardware, cooling, maintenance, and pool fees.","source":"@site/docs/mining/cost-and-profit.mdx","sourceDirName":"mining","slug":"/mining/cost-and-profit","permalink":"/docs/mining/cost-and-profit","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/mining/cost-and-profit.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"cost-and-profit","title":"Cost & Profit"},"sidebar":"tutorial","previous":{"title":"Halving","permalink":"/docs/mining/halving"},"next":{"title":"Potential Risks","permalink":"/docs/mining/risks"}},{"id":"mining/guide","title":"Guide","description":"This guide will help those who are interested in mining get started on Nervos. We will discuss the essential basics, such as how to find compatible equipment, the importance of choosing a mining pool, and most importantly, we will point out a few other informational resources that will help you to make your mining operation successful.","source":"@site/docs/mining/guide.mdx","sourceDirName":"mining","slug":"/mining/guide","permalink":"/docs/mining/guide","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/mining/guide.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"guide","title":"Guide"},"sidebar":"tutorial","previous":{"title":"Hardware","permalink":"/docs/mining/hardware"},"next":{"title":"Info and Stats","permalink":"/docs/mining/info-stats"}},{"id":"mining/halving","title":"Halving","description":"Nervos CKB will have a halving event every 4 years according to its mechanism, at which time the base issuance rewards will be halved. View countdown","source":"@site/docs/mining/halving.mdx","sourceDirName":"mining","slug":"/mining/halving","permalink":"/docs/mining/halving","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/mining/halving.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"halving","title":"Halving"},"sidebar":"tutorial","previous":{"title":"Rewards","permalink":"/docs/mining/rewards"},"next":{"title":"Cost & Profit","permalink":"/docs/mining/cost-and-profit"}},{"id":"mining/hardware","title":"Hardware","description":"Since March 2020, CKB mining has gradually shifted towards ASIC mining. Mining CKB requires purchasing professional mining machines developed by third-party manufacturers.","source":"@site/docs/mining/hardware.mdx","sourceDirName":"mining","slug":"/mining/hardware","permalink":"/docs/mining/hardware","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/mining/hardware.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"hardware","title":"Hardware"},"sidebar":"tutorial","previous":{"title":"Potential Risks","permalink":"/docs/mining/risks"},"next":{"title":"Guide","permalink":"/docs/mining/guide"}},{"id":"mining/info-stats","title":"Info and Stats","description":"CKB Hash Rates Overview in Major Pools","source":"@site/docs/mining/info-stats.mdx","sourceDirName":"mining","slug":"/mining/info-stats","permalink":"/docs/mining/info-stats","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/mining/info-stats.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"info-stats","title":"Info and Stats"},"sidebar":"tutorial","previous":{"title":"Guide","permalink":"/docs/mining/guide"},"next":{"title":"Projects","permalink":"/docs/ecosystem/projects"}},{"id":"mining/rewards","title":"Rewards","description":"CKB block rewards comprise base reward, secondary reward, proposal reward, and commitment reward, jointly determined by Nervos’ tokenomics and the NC Max consensus.","source":"@site/docs/mining/rewards.mdx","sourceDirName":"mining","slug":"/mining/rewards","permalink":"/docs/mining/rewards","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/mining/rewards.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"rewards","title":"Rewards"},"sidebar":"tutorial","previous":{"title":"Algorithm and Difficulty Adjustment","permalink":"/docs/mining/algorithm-difficulty"},"next":{"title":"Halving","permalink":"/docs/mining/halving"}},{"id":"mining/risks","title":"Potential Risks","description":"Legal and Policy Concerns","source":"@site/docs/mining/risks.mdx","sourceDirName":"mining","slug":"/mining/risks","permalink":"/docs/mining/risks","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/mining/risks.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"risks","title":"Potential Risks"},"sidebar":"tutorial","previous":{"title":"Cost & Profit","permalink":"/docs/mining/cost-and-profit"},"next":{"title":"Hardware","permalink":"/docs/mining/hardware"}},{"id":"node/rpcs","title":"RPCs","description":"CKB RPCs are a set of programming interfaces provided by the Nervos CKB blockchain, enabling developers to interact with the network for querying data, managing transactions, and deploying Scripts directly.","source":"@site/docs/node/rpcs.mdx","sourceDirName":"node","slug":"/node/rpcs","permalink":"/docs/node/rpcs","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/node/rpcs.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"rpcs","title":"RPCs"},"sidebar":"tutorial","previous":{"title":"Spore-DOB-0","permalink":"/docs/common-scripts/spore-dob-0"},"next":{"title":"Run a Mainnet Node","permalink":"/docs/node/run-mainnet-node"}},{"id":"node/run-devnet-node","title":"Run a Devnet Node","description":"Ideal for local dev environment to start building your CKB dApp. No special local storage required.","source":"@site/docs/node/run-devnet-node.mdx","sourceDirName":"node","slug":"/node/run-devnet-node","permalink":"/docs/node/run-devnet-node","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/node/run-devnet-node.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"run-devnet-node","title":"Run a Devnet Node"},"sidebar":"tutorial","previous":{"title":"Run a Testnet Node","permalink":"/docs/node/run-testnet-node"},"next":{"title":"Run a Public RPC Node","permalink":"/docs/node/run-public-rpc-node"}},{"id":"node/run-mainnet-node","title":"Run a Mainnet Node","description":"Running a Mainnet node allows you to participate directly in the live blockchain, supporting the network's operation and integrity. This guide will cover the steps needed to set up and run a mainnet node on CKB, which is ideal for those looking to be actively involved in the network's governance and day-to-day activities. We suggest a minimum of 100GB of local storage for this purpose.","source":"@site/docs/node/run-mainnet-node.mdx","sourceDirName":"node","slug":"/node/run-mainnet-node","permalink":"/docs/node/run-mainnet-node","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/node/run-mainnet-node.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"run-mainnet-node","title":"Run a Mainnet Node"},"sidebar":"tutorial","previous":{"title":"RPCs","permalink":"/docs/node/rpcs"},"next":{"title":"Run a Testnet Node","permalink":"/docs/node/run-testnet-node"}},{"id":"node/run-public-rpc-node","title":"Run a Public RPC Node","description":"A public RPC node allows external parties to interact with the blockchain, enabling actions such as querying blockchain data or submitting transactions. This setup is crucial for applications that rely on real-time data from the blockchain.","source":"@site/docs/node/run-public-rpc-node.mdx","sourceDirName":"node","slug":"/node/run-public-rpc-node","permalink":"/docs/node/run-public-rpc-node","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/node/run-public-rpc-node.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"run-public-rpc-node","title":"Run a Public RPC Node"},"sidebar":"tutorial","previous":{"title":"Run a Devnet Node","permalink":"/docs/node/run-devnet-node"},"next":{"title":"Serilization and Molecule in CKB","permalink":"/docs/serialization/serialization-molecule-in-ckb"}},{"id":"node/run-testnet-node","title":"Run a Testnet Node","description":"Nervos has introduced the Pudge Testnet for developers to experiment with integrations and Scripts. This is ideal for exploring functionalities in a risk-free environment. Due to hash rate fluctuations, expect periodic resets. We suggest allocating 200GB for experimentation.","source":"@site/docs/node/run-testnet-node.mdx","sourceDirName":"node","slug":"/node/run-testnet-node","permalink":"/docs/node/run-testnet-node","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/node/run-testnet-node.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"run-testnet-node","title":"Run a Testnet Node"},"sidebar":"tutorial","previous":{"title":"Run a Mainnet Node","permalink":"/docs/node/run-mainnet-node"},"next":{"title":"Run a Devnet Node","permalink":"/docs/node/run-devnet-node"}},{"id":"script/common-script-error-code","title":"Common Script Error Code","description":"CKB defines some basic error codes:","source":"@site/docs/script/common-script-error-code.mdx","sourceDirName":"script","slug":"/script/common-script-error-code","permalink":"/docs/script/common-script-error-code","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/script/common-script-error-code.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"common-script-error-code","title":"Common Script Error Code"},"sidebar":"tutorial","previous":{"title":"Debug Script","permalink":"/docs/script/debug-script"},"next":{"title":"Tutorial: A Minimal Script","permalink":"/docs/script/minimal-script"}},{"id":"script/debug-script","title":"Debug Script","description":"<TutorialHeader","source":"@site/docs/script/debug-script.mdx","sourceDirName":"script","slug":"/script/debug-script","permalink":"/docs/script/debug-script","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/script/debug-script.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"debug-script","title":"Debug Script"},"sidebar":"tutorial","previous":{"title":"Spawn: Direct Cross-Script Calling","permalink":"/docs/script/spawn-cross-script-calling"},"next":{"title":"Common Script Error Code","permalink":"/docs/script/common-script-error-code"}},{"id":"script/intro-to-script","title":"Intro to Script","description":"A Script in Nervos CKB is a binary executable that can be executed on-chain. It is Turing-complete and can perform arbitrary logic to guard and protect your on-chain assets. You can think of it as smart contract.","source":"@site/docs/script/intro-to-script.mdx","sourceDirName":"script","slug":"/script/intro-to-script","permalink":"/docs/script/intro-to-script","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/script/intro-to-script.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"intro-to-script","title":"Intro to Script"},"sidebar":"tutorial","previous":{"title":"Build a Simple Lock","permalink":"/docs/dapp/simple-lock"},"next":{"title":"Program Languages for Script","permalink":"/docs/script/program-language-for-script"}},{"id":"script/js-script","title":"Tutorial: Run JS on CKB","description":"<TutorialHeader","source":"@site/docs/script/js-script.mdx","sourceDirName":"script","slug":"/script/js-script","permalink":"/docs/script/js-script","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/script/js-script.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"js-script","title":"Tutorial: Run JS on CKB"},"sidebar":"tutorial","previous":{"title":"Tutorial: Spawn Script","permalink":"/docs/script/spawn-script"},"next":{"title":"Intro to Wallets","permalink":"/docs/integrate-wallets/intro-to-wallets"}},{"id":"script/minimal-script","title":"Tutorial: A Minimal Script","description":"A Minimal Script","source":"@site/docs/script/a-minimal-script.mdx","sourceDirName":"script","slug":"/script/minimal-script","permalink":"/docs/script/minimal-script","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/script/a-minimal-script.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"minimal-script","title":"Tutorial: A Minimal Script"},"sidebar":"tutorial","previous":{"title":"Common Script Error Code","permalink":"/docs/script/common-script-error-code"},"next":{"title":"Tutorial: Simple UDT","permalink":"/docs/script/sudt-script"}},{"id":"script/program-language-for-script","title":"Program Languages for Script","description":"We have learned what a Script is and how a Script works. So, how do we write a Script then? What kind of programming language do I need to use?","source":"@site/docs/script/program-language-for-script.mdx","sourceDirName":"script","slug":"/script/program-language-for-script","permalink":"/docs/script/program-language-for-script","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/script/program-language-for-script.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"program-language-for-script","title":"Program Languages for Script"},"sidebar":"tutorial","previous":{"title":"Intro to Script","permalink":"/docs/script/intro-to-script"},"next":{"title":"CKB Syscalls for Script","permalink":"/docs/script/syscalls-for-script"}},{"id":"script/spawn-cross-script-calling","title":"Spawn: Direct Cross-Script Calling","description":"The Meepo hard fork in 2024 has introduced a range of enhancements into CKB Script development, with one major innovation being Spawn.","source":"@site/docs/script/spawn-direct-cross-script-calling.mdx","sourceDirName":"script","slug":"/script/spawn-cross-script-calling","permalink":"/docs/script/spawn-cross-script-calling","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/script/spawn-direct-cross-script-calling.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"spawn-cross-script-calling","title":"Spawn: Direct Cross-Script Calling"},"sidebar":"tutorial","previous":{"title":"Type ID: Upgradable Scripts","permalink":"/docs/script/type-id"},"next":{"title":"Debug Script","permalink":"/docs/script/debug-script"}},{"id":"script/spawn-script","title":"Tutorial: Spawn Script","description":"<TutorialHeader","source":"@site/docs/script/spawn-script.mdx","sourceDirName":"script","slug":"/script/spawn-script","permalink":"/docs/script/spawn-script","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/script/spawn-script.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"spawn-script","title":"Tutorial: Spawn Script"},"sidebar":"tutorial","previous":{"title":"Tutorial: Simple UDT","permalink":"/docs/script/sudt-script"},"next":{"title":"Tutorial: Run JS on CKB","permalink":"/docs/script/js-script"}},{"id":"script/sudt-script","title":"Tutorial: Simple UDT","description":"<TutorialHeader","source":"@site/docs/script/sudt-script.mdx","sourceDirName":"script","slug":"/script/sudt-script","permalink":"/docs/script/sudt-script","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/script/sudt-script.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"sudt-script","title":"Tutorial: Simple UDT"},"sidebar":"tutorial","previous":{"title":"Tutorial: A Minimal Script","permalink":"/docs/script/minimal-script"},"next":{"title":"Tutorial: Spawn Script","permalink":"/docs/script/spawn-script"}},{"id":"script/syscalls-for-script","title":"CKB Syscalls for Script","description":"A collection of CKB-VM syscalls. Also include relevant constant, such as return codes, sources, Cell fields, header fields, and input fields.","source":"@site/docs/script/syscalls-for-script.mdx","sourceDirName":"script","slug":"/script/syscalls-for-script","permalink":"/docs/script/syscalls-for-script","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/script/syscalls-for-script.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"syscalls-for-script","title":"CKB Syscalls for Script"},"sidebar":"tutorial","previous":{"title":"Program Languages for Script","permalink":"/docs/script/program-language-for-script"},"next":{"title":"VM Cycle Limits","permalink":"/docs/script/vm-cycle-limits"}},{"id":"script/type-id","title":"Type ID: Upgradable Scripts","description":"Scripts are codes that execute on-chain and cannot be stopped. However, sometimes you might want to ensure your Script is upgradable in case there are bugs in the source code.","source":"@site/docs/script/type-id.mdx","sourceDirName":"script","slug":"/script/type-id","permalink":"/docs/script/type-id","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/script/type-id.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"type-id","title":"Type ID: Upgradable Scripts"},"sidebar":"tutorial","previous":{"title":"VM Version Selection","permalink":"/docs/script/vm-selection"},"next":{"title":"Spawn: Direct Cross-Script Calling","permalink":"/docs/script/spawn-cross-script-calling"}},{"id":"script/vm-cycle-limits","title":"VM Cycle Limits","description":"Cycle limits are used to regulate VM Scripts. CKB-VM is a flexible VM that can implement many control flow constructs, such as loops or branches. As a result, we need to enforce certain rules in CKB-VM to prevent malicious Scripts, such as those with infinite loops.","source":"@site/docs/script/vm-cycle-limits.mdx","sourceDirName":"script","slug":"/script/vm-cycle-limits","permalink":"/docs/script/vm-cycle-limits","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/script/vm-cycle-limits.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"vm-cycle-limits","title":"VM Cycle Limits"},"sidebar":"tutorial","previous":{"title":"CKB Syscalls for Script","permalink":"/docs/script/syscalls-for-script"},"next":{"title":"VM Version Selection","permalink":"/docs/script/vm-selection"}},{"id":"script/vm-selection","title":"VM Version Selection","description":"When writing a Script, it is important to understand how the Script will be executed under a specific CKB-VM version. The CKB network has introduced various CKB-VM versions over time to enhance security, performance, bug fixes and support for new RISC-V extensions. However, the upgrade should not break the old code, and users must have the opt-in option to specify the VM version.","source":"@site/docs/script/vm-selection.mdx","sourceDirName":"script","slug":"/script/vm-selection","permalink":"/docs/script/vm-selection","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/script/vm-selection.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"vm-selection","title":"VM Version Selection"},"sidebar":"tutorial","previous":{"title":"VM Cycle Limits","permalink":"/docs/script/vm-cycle-limits"},"next":{"title":"Type ID: Upgradable Scripts","permalink":"/docs/script/type-id"}},{"id":"sdk-and-devtool/ccc","title":"JavaScript/TypeScript (CCC)","description":"Introduction","source":"@site/docs/sdk-and-devtool/ccc.mdx","sourceDirName":"sdk-and-devtool","slug":"/sdk-and-devtool/ccc","permalink":"/docs/sdk-and-devtool/ccc","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/sdk-and-devtool/ccc.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"ccc","title":"JavaScript/TypeScript (CCC)"},"sidebar":"tutorial","previous":{"title":"Java","permalink":"/docs/sdk-and-devtool/java"},"next":{"title":"JavaScript/TypeScript (Lumos)","permalink":"/docs/sdk-and-devtool/lumos"}},{"id":"sdk-and-devtool/ckb-cli","title":"CKB-CLI","description":"ckb-cli is a CKB command-line tool developed in Rust.","source":"@site/docs/sdk-and-devtool/ckb-cli.mdx","sourceDirName":"sdk-and-devtool","slug":"/sdk-and-devtool/ckb-cli","permalink":"/docs/sdk-and-devtool/ckb-cli","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/sdk-and-devtool/ckb-cli.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"ckb-cli","title":"CKB-CLI"},"sidebar":"tutorial","previous":{"title":"JavaScript/TypeScript (Lumos)","permalink":"/docs/sdk-and-devtool/lumos"},"next":{"title":"OffCKB","permalink":"/docs/sdk-and-devtool/offckb"}},{"id":"sdk-and-devtool/devtool","title":"Other Dev Tools","description":"Besides CKB-SDK-Rust, CKB-SDK-Go, CKB-SDK-Java, and Lumos, you can also explore other essential tools tailored for development on Nervos CKB here:","source":"@site/docs/sdk-and-devtool/devtool.md","sourceDirName":"sdk-and-devtool","slug":"/sdk-and-devtool/devtool","permalink":"/docs/sdk-and-devtool/devtool","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/sdk-and-devtool/devtool.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"devtool","title":"Other Dev Tools"},"sidebar":"tutorial","previous":{"title":"OffCKB","permalink":"/docs/sdk-and-devtool/offckb"},"next":{"title":"Transfer CKB","permalink":"/docs/dapp/transfer-ckb"}},{"id":"sdk-and-devtool/go","title":"Go","description":"Introduction","source":"@site/docs/sdk-and-devtool/go.mdx","sourceDirName":"sdk-and-devtool","slug":"/sdk-and-devtool/go","permalink":"/docs/sdk-and-devtool/go","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/sdk-and-devtool/go.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"go","title":"Go"},"sidebar":"tutorial","previous":{"title":"Rust","permalink":"/docs/sdk-and-devtool/rust"},"next":{"title":"Java","permalink":"/docs/sdk-and-devtool/java"}},{"id":"sdk-and-devtool/java","title":"Java","description":"Introduction","source":"@site/docs/sdk-and-devtool/java.mdx","sourceDirName":"sdk-and-devtool","slug":"/sdk-and-devtool/java","permalink":"/docs/sdk-and-devtool/java","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/sdk-and-devtool/java.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"java","title":"Java"},"sidebar":"tutorial","previous":{"title":"Go","permalink":"/docs/sdk-and-devtool/go"},"next":{"title":"JavaScript/TypeScript (CCC)","permalink":"/docs/sdk-and-devtool/ccc"}},{"id":"sdk-and-devtool/lumos","title":"JavaScript/TypeScript (Lumos)","description":"Introduction","source":"@site/docs/sdk-and-devtool/lumos.mdx","sourceDirName":"sdk-and-devtool","slug":"/sdk-and-devtool/lumos","permalink":"/docs/sdk-and-devtool/lumos","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/sdk-and-devtool/lumos.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"lumos","title":"JavaScript/TypeScript (Lumos)"},"sidebar":"tutorial","previous":{"title":"JavaScript/TypeScript (CCC)","permalink":"/docs/sdk-and-devtool/ccc"},"next":{"title":"CKB-CLI","permalink":"/docs/sdk-and-devtool/ckb-cli"}},{"id":"sdk-and-devtool/offckb","title":"OffCKB","description":"offckb is a an all-in-one CLI tool that provides a local CKB development environment.","source":"@site/docs/sdk-and-devtool/offckb.mdx","sourceDirName":"sdk-and-devtool","slug":"/sdk-and-devtool/offckb","permalink":"/docs/sdk-and-devtool/offckb","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/sdk-and-devtool/offckb.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"offckb","title":"OffCKB"},"sidebar":"tutorial","previous":{"title":"CKB-CLI","permalink":"/docs/sdk-and-devtool/ckb-cli"},"next":{"title":"Other Dev Tools","permalink":"/docs/sdk-and-devtool/devtool"}},{"id":"sdk-and-devtool/rust","title":"Rust","description":"Introduction","source":"@site/docs/sdk-and-devtool/rust.mdx","sourceDirName":"sdk-and-devtool","slug":"/sdk-and-devtool/rust","permalink":"/docs/sdk-and-devtool/rust","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/sdk-and-devtool/rust.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"rust","title":"Rust"},"sidebar":"tutorial","previous":{"title":"CKB vs. BTC","permalink":"/docs/getting-started/ckb-vs-btc"},"next":{"title":"Go","permalink":"/docs/sdk-and-devtool/go"}},{"id":"serialization/encoding-specs","title":"Encoding Spec With Examples","description":"Summary of Data Types","source":"@site/docs/serialization/encoding-specs.mdx","sourceDirName":"serialization","slug":"/serialization/encoding-specs","permalink":"/docs/serialization/encoding-specs","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/serialization/encoding-specs.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"encoding-specs","title":"Encoding Spec With Examples"},"sidebar":"tutorial","previous":{"title":"Molecule Schema Language","permalink":"/docs/serialization/schema-language"},"next":{"title":"Example: A Role-Playing Game","permalink":"/docs/serialization/example-role-playing-game"}},{"id":"serialization/example-role-playing-game","title":"Example: A Role-Playing Game","description":"As an example, we’ve developed a role-playing game consisting of 4 schema files:","source":"@site/docs/serialization/example-role-playing-game.mdx","sourceDirName":"serialization","slug":"/serialization/example-role-playing-game","permalink":"/docs/serialization/example-role-playing-game","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/serialization/example-role-playing-game.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"example-role-playing-game","title":"Example: A Role-Playing Game"},"sidebar":"tutorial","previous":{"title":"Encoding Spec With Examples","permalink":"/docs/serialization/encoding-specs"},"next":{"title":"How to Sign a Transaction","permalink":"/docs/how-tos/how-to-sign-a-tx"}},{"id":"serialization/features-molecule","title":"Rust Library Features","description":"Molecule is developed in Rust language. The default feature in the Rust library is enabled by default, including std feature and more:","source":"@site/docs/serialization/features.mdx","sourceDirName":"serialization","slug":"/serialization/features-molecule","permalink":"/docs/serialization/features-molecule","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/serialization/features.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"features-molecule","title":"Rust Library Features"},"sidebar":"tutorial","previous":{"title":"Serilization and Molecule in CKB","permalink":"/docs/serialization/serialization-molecule-in-ckb"},"next":{"title":"Use in CKB Scripts","permalink":"/docs/serialization/use-in-ckb-scripts"}},{"id":"serialization/schema-language","title":"Molecule Schema Language","description":"Grammar","source":"@site/docs/serialization/schema-language.mdx","sourceDirName":"serialization","slug":"/serialization/schema-language","permalink":"/docs/serialization/schema-language","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/serialization/schema-language.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"schema-language","title":"Molecule Schema Language"},"sidebar":"tutorial","previous":{"title":"Molecule Tools","permalink":"/docs/serialization/tools-molecule"},"next":{"title":"Encoding Spec With Examples","permalink":"/docs/serialization/encoding-specs"}},{"id":"serialization/serialization-molecule-in-ckb","title":"Serilization and Molecule in CKB","description":"Serialization refers to the conversion of data structures into a format that facilitates easy storage, transmission, and reconstruction. In Nervos CKB, serialization must ensure stability, consistency, and efficiency. These requirements are essential for maintaining data integrity and ensuring smooth data operations.","source":"@site/docs/serialization/serialization-molecule-in-ckb.mdx","sourceDirName":"serialization","slug":"/serialization/serialization-molecule-in-ckb","permalink":"/docs/serialization/serialization-molecule-in-ckb","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/serialization/serialization-molecule-in-ckb.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"serialization-molecule-in-ckb","title":"Serilization and Molecule in CKB"},"sidebar":"tutorial","previous":{"title":"Run a Public RPC Node","permalink":"/docs/node/run-public-rpc-node"},"next":{"title":"Rust Library Features","permalink":"/docs/serialization/features-molecule"}},{"id":"serialization/tools-molecule","title":"Molecule Tools","description":"Schema Compiler and Code Generator","source":"@site/docs/serialization/tools.mdx","sourceDirName":"serialization","slug":"/serialization/tools-molecule","permalink":"/docs/serialization/tools-molecule","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/serialization/tools.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"tools-molecule","title":"Molecule Tools"},"sidebar":"tutorial","previous":{"title":"Use in CKB Scripts","permalink":"/docs/serialization/use-in-ckb-scripts"},"next":{"title":"Molecule Schema Language","permalink":"/docs/serialization/schema-language"}},{"id":"serialization/use-in-ckb-scripts","title":"Use in CKB Scripts","description":"When Molecule Rust library is used in CKB Scripts, no-std needs to be specified.","source":"@site/docs/serialization/use-in-ckb-scripts.mdx","sourceDirName":"serialization","slug":"/serialization/use-in-ckb-scripts","permalink":"/docs/serialization/use-in-ckb-scripts","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/serialization/use-in-ckb-scripts.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"use-in-ckb-scripts","title":"Use in CKB Scripts"},"sidebar":"tutorial","previous":{"title":"Rust Library Features","permalink":"/docs/serialization/features-molecule"},"next":{"title":"Molecule Tools","permalink":"/docs/serialization/tools-molecule"}},{"id":"tech-explanation/block","title":"Block","description":"A block is a container of transactions, carrying the information required by consensus so the participants can verify and recognize the canonical chain.","source":"@site/docs/tech-explanation/block.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/block","permalink":"/docs/tech-explanation/block","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/block.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"block","title":"Block"},"sidebar":"tutorial","previous":{"title":"outputs_data","permalink":"/docs/tech-explanation/outputs-data"},"next":{"title":"header","permalink":"/docs/tech-explanation/header"}},{"id":"tech-explanation/capacity","title":"Capacity","description":"Capacity is the storage limit of a Cell in a transaction. Capacity refers to both the quantity of stored tokens and the maximum amount of data the Cell can hold. The capacity of a Cell determines its ability to store various fields, including data, lock, type, and its own capacity.","source":"@site/docs/tech-explanation/capacity.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/capacity","permalink":"/docs/tech-explanation/capacity","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/capacity.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"capacity","title":"Capacity"},"sidebar":"tutorial","previous":{"title":"Cell Model","permalink":"/docs/tech-explanation/cell-model"},"next":{"title":"Script","permalink":"/docs/tech-explanation/script"}},{"id":"tech-explanation/cell","title":"Cell","description":"Structure","source":"@site/docs/tech-explanation/cell.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/cell","permalink":"/docs/tech-explanation/cell","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/cell.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"cell","title":"Cell"},"sidebar":"tutorial","previous":{"title":"Nervos Blockchain","permalink":"/docs/tech-explanation/nervos-blockchain"},"next":{"title":"Cell Model","permalink":"/docs/tech-explanation/cell-model"}},{"id":"tech-explanation/cell-deps","title":"Cell_deps","description":"Cell_deps allows Scripts in the transaction to access referenced Live Cells. Cells listed here are all live and read-only.","source":"@site/docs/tech-explanation/cell-deps.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/cell-deps","permalink":"/docs/tech-explanation/cell-deps","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/cell-deps.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"cell-deps","title":"Cell_deps"},"sidebar":"tutorial","previous":{"title":"Transaction","permalink":"/docs/tech-explanation/transaction"},"next":{"title":"out_point","permalink":"/docs/tech-explanation/out-point"}},{"id":"tech-explanation/cell-model","title":"Cell Model","description":"Nervos CKB inherits Bitcoin’s architecture and creates the Cell Model, a generalized UTXO model as state storage.","source":"@site/docs/tech-explanation/cell-model.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/cell-model","permalink":"/docs/tech-explanation/cell-model","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/cell-model.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"cell-model","title":"Cell Model"},"sidebar":"tutorial","previous":{"title":"Cell","permalink":"/docs/tech-explanation/cell"},"next":{"title":"Capacity","permalink":"/docs/tech-explanation/capacity"}},{"id":"tech-explanation/cellinput","title":"CellInput","description":"Input Cells are the output Cells of previous transactions, hence they are noted as previous_output.","source":"@site/docs/tech-explanation/cellinput.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/cellinput","permalink":"/docs/tech-explanation/cellinput","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/cellinput.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"cellinput","title":"CellInput"},"sidebar":"tutorial","previous":{"title":"header_dep","permalink":"/docs/tech-explanation/header-dep"},"next":{"title":"previous_output","permalink":"/docs/tech-explanation/previous-output"}},{"id":"tech-explanation/ckb-address","title":"CKB Address","description":"CKB address packages the Lock Script into a single line of verifiable and human-readable format, adhering to Bitcoin's Bech32m address format (BIP-350). In this format, the Lock Script consists of three key parameters: codehash, hashtype, and args.","source":"@site/docs/tech-explanation/ckb-address.mdx","sourceDirName":"tech-explanation","slug":"/tech-explanation/ckb-address","permalink":"/docs/tech-explanation/ckb-address","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/ckb-address.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"ckb-address","title":"CKB Address"},"sidebar":"tutorial","previous":{"title":"proposals","permalink":"/docs/tech-explanation/proposals"},"next":{"title":"CKB-VM","permalink":"/docs/tech-explanation/ckb-vm"}},{"id":"tech-explanation/ckb-vm","title":"CKB-VM","description":"Nervos introduces CKB-VM, a virtual machine powered by the RISC-V instruction set, further leveraging Turing-complete programmability, transforming smart contract execution on the Nervos blockchain. It provides considerable amount of power and flexibility while maintaining a secure and high-performance environment.","source":"@site/docs/tech-explanation/ckb-vm.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/ckb-vm","permalink":"/docs/tech-explanation/ckb-vm","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/ckb-vm.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"ckb-vm","title":"CKB-VM"},"sidebar":"tutorial","previous":{"title":"CKB Address","permalink":"/docs/tech-explanation/ckb-address"},"next":{"title":"Consensus","permalink":"/docs/tech-explanation/consensus"}},{"id":"tech-explanation/ckbhash","title":"ckbhash","description":"CKB uses BLAKE2b as the default hash algorithm. The specific configuration of BLAKE2b used in CKB is referred as ckbhash, characterized by:","source":"@site/docs/tech-explanation/ckbhash.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/ckbhash","permalink":"/docs/tech-explanation/ckbhash","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/ckbhash.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"ckbhash","title":"ckbhash"},"sidebar":"tutorial","previous":{"title":"witnesses","permalink":"/docs/tech-explanation/witness"},"next":{"title":"Transaction","permalink":"/docs/tech-explanation/transaction"}},{"id":"tech-explanation/code-hash","title":"code_hash","description":"codehash represents the hash of the ELF-formatted RISC-V binary that contains a CKB Script. For efficiency, the Script itself is stored in a dep Cell attached to the current transaction. Depending on the hashtype value, the code_hash should either match the hash of the Cell data, or that of the Type Script in the dep Cell. During transaction verification, the actual binary is loaded into a CKB-VM instance when specified.","source":"@site/docs/tech-explanation/code-hash.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/code-hash","permalink":"/docs/tech-explanation/code-hash","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/code-hash.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"code-hash","title":"code_hash"},"sidebar":"tutorial","previous":{"title":"Script","permalink":"/docs/tech-explanation/script"},"next":{"title":"hash_type","permalink":"/docs/tech-explanation/hash-type"}},{"id":"tech-explanation/consensus","title":"Consensus","description":"Consensus in Nervos refers to a state of agreement among participants on the blockchain’s history and current state. The state encompasses data such as each user's CKBytes holdings and their respective digital assets.","source":"@site/docs/tech-explanation/consensus.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/consensus","permalink":"/docs/tech-explanation/consensus","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/consensus.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"consensus","title":"Consensus"},"sidebar":"tutorial","previous":{"title":"CKB-VM","permalink":"/docs/tech-explanation/ckb-vm"},"next":{"title":"Tokenomics","permalink":"/docs/tech-explanation/economics"}},{"id":"tech-explanation/dep-group","title":"dep_group","description":"dep-group}","source":"@site/docs/tech-explanation/dep-group.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/dep-group","permalink":"/docs/tech-explanation/dep-group","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/dep-group.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"dep-group","title":"dep_group"},"sidebar":"tutorial","previous":{"title":"dep_type","permalink":"/docs/tech-explanation/dep-type"},"next":{"title":"header_dep","permalink":"/docs/tech-explanation/header-dep"}},{"id":"tech-explanation/dep-type","title":"dep_type","description":"This field interprets the referenced Cell deps.","source":"@site/docs/tech-explanation/dep-type.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/dep-type","permalink":"/docs/tech-explanation/dep-type","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/dep-type.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"dep-type","title":"dep_type"},"sidebar":"tutorial","previous":{"title":"out_point","permalink":"/docs/tech-explanation/out-point"},"next":{"title":"dep_group","permalink":"/docs/tech-explanation/dep-group"}},{"id":"tech-explanation/economics","title":"Tokenomics","description":"CKByte Tokenomics","source":"@site/docs/tech-explanation/economics.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/economics","permalink":"/docs/tech-explanation/economics","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/economics.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"economics","title":"Tokenomics"},"sidebar":"tutorial","previous":{"title":"Consensus","permalink":"/docs/tech-explanation/consensus"},"next":{"title":"Glossary","permalink":"/docs/tech-explanation/glossary"}},{"id":"tech-explanation/glossary","title":"Glossary","description":"Glossary Sections","source":"@site/docs/tech-explanation/glossary.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/glossary","permalink":"/docs/tech-explanation/glossary","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/glossary.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"glossary","title":"Glossary"},"sidebar":"tutorial","previous":{"title":"Tokenomics","permalink":"/docs/tech-explanation/economics"},"next":{"title":"Algorithm and Difficulty Adjustment","permalink":"/docs/mining/algorithm-difficulty"}},{"id":"tech-explanation/hash-type","title":"hash_type","description":"hashtype defines the interpretation of the codehash when looking for matching dep Cells. Each hash_type value in this fields corresponds to a specific JSON representation, hash matching method, and the compatible VM version, specified as follows:","source":"@site/docs/tech-explanation/hash-type.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/hash-type","permalink":"/docs/tech-explanation/hash-type","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/hash-type.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"hash-type","title":"hash_type"},"sidebar":"tutorial","previous":{"title":"code_hash","permalink":"/docs/tech-explanation/code-hash"},"next":{"title":"script_args","permalink":"/docs/tech-explanation/script-args"}},{"id":"tech-explanation/header","title":"header","description":"header is a sub-structure of Block and UncleBlock, including raw and nonce.","source":"@site/docs/tech-explanation/header.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/header","permalink":"/docs/tech-explanation/header","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/header.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"header","title":"header"},"sidebar":"tutorial","previous":{"title":"Block","permalink":"/docs/tech-explanation/block"},"next":{"title":"RawHeader","permalink":"/docs/tech-explanation/rawheader"}},{"id":"tech-explanation/header-dep","title":"header_dep","description":"Header Deps allows Scripts to read block headers whose hashes are listed in header_deps, with certain limitations to ensure transaction determinacy.","source":"@site/docs/tech-explanation/header-dep.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/header-dep","permalink":"/docs/tech-explanation/header-dep","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/header-dep.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"header-dep","title":"header_dep"},"sidebar":"tutorial","previous":{"title":"dep_group","permalink":"/docs/tech-explanation/dep-group"},"next":{"title":"CellInput","permalink":"/docs/tech-explanation/cellinput"}},{"id":"tech-explanation/lock-script","title":"Lock Script","description":"This defines the Script that determines the ownership of a Cell, used to govern the logic associated with Cell ownership.","source":"@site/docs/tech-explanation/lock-script.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/lock-script","permalink":"/docs/tech-explanation/lock-script","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/lock-script.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"lock-script","title":"Lock Script"},"sidebar":"tutorial","previous":{"title":"script_args","permalink":"/docs/tech-explanation/script-args"},"next":{"title":"Type Script","permalink":"/docs/tech-explanation/type-script"}},{"id":"tech-explanation/lock-type-diff","title":"Lock Script vs. Type Script: The Difference","description":"Type Script is similar to Lock Script, with two differences:","source":"@site/docs/tech-explanation/lock-type-diff.mdx","sourceDirName":"tech-explanation","slug":"/tech-explanation/lock-type-diff","permalink":"/docs/tech-explanation/lock-type-diff","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/lock-type-diff.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"lock-type-diff","title":"Lock Script vs. Type Script: The Difference"},"sidebar":"tutorial","previous":{"title":"Type Script","permalink":"/docs/tech-explanation/type-script"},"next":{"title":"Script Group Execution","permalink":"/docs/tech-explanation/script-group-exe"}},{"id":"tech-explanation/nervos-blockchain","title":"Nervos Blockchain","description":"What is the Nervos Blockchain?","source":"@site/docs/tech-explanation/nervos-blockchain.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/nervos-blockchain","permalink":"/docs/tech-explanation/nervos-blockchain","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/nervos-blockchain.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"nervos-blockchain","title":"Nervos Blockchain"},"sidebar":"tutorial","previous":{"title":"Rethinking Forks","permalink":"/docs/history-and-hard-forks/rethinking-forks"},"next":{"title":"Cell","permalink":"/docs/tech-explanation/cell"}},{"id":"tech-explanation/out-point","title":"out_point","description":"A Cell outpoint pointing to the Cells used as dependencies of a transaction. Dep Cells can include code loaded into CKB-VM, or data for Script execution.","source":"@site/docs/tech-explanation/out-point.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/out-point","permalink":"/docs/tech-explanation/out-point","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/out-point.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"out-point","title":"out_point"},"sidebar":"tutorial","previous":{"title":"Cell_deps","permalink":"/docs/tech-explanation/cell-deps"},"next":{"title":"dep_type","permalink":"/docs/tech-explanation/dep-type"}},{"id":"tech-explanation/outpoint","title":"OutPoint","description":"The transaction uses OutPoint in inputs to reference the previously created Cells instead of embedding them.","source":"@site/docs/tech-explanation/outpoint.mdx","sourceDirName":"tech-explanation","slug":"/tech-explanation/outpoint","permalink":"/docs/tech-explanation/outpoint","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/outpoint.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"outpoint","title":"OutPoint"},"sidebar":"tutorial","previous":{"title":"previous_output","permalink":"/docs/tech-explanation/previous-output"},"next":{"title":"since","permalink":"/docs/tech-explanation/since"}},{"id":"tech-explanation/outputs","title":"outputs","description":"The transaction destroys the Cells in inputs and creates the Cells in outputs. These output Cells, identical in structure as the aforementioned Cell structure can be used as inputs for future transactions.","source":"@site/docs/tech-explanation/outputs.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/outputs","permalink":"/docs/tech-explanation/outputs","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/outputs.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"outputs","title":"outputs"},"sidebar":"tutorial","previous":{"title":"since","permalink":"/docs/tech-explanation/since"},"next":{"title":"outputs_data","permalink":"/docs/tech-explanation/outputs-data"}},{"id":"tech-explanation/outputs-data","title":"outputs_data","description":"An array of Cell data of each output Cell. The data of the i-th Cell in outputs is the i-th item in outputs_data. The actual data is kept separate from outputs to simplify CKB Script handling and to allow for future optimization.","source":"@site/docs/tech-explanation/outputs-data.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/outputs-data","permalink":"/docs/tech-explanation/outputs-data","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/outputs-data.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"outputs-data","title":"outputs_data"},"sidebar":"tutorial","previous":{"title":"outputs","permalink":"/docs/tech-explanation/outputs"},"next":{"title":"Block","permalink":"/docs/tech-explanation/block"}},{"id":"tech-explanation/previous-output","title":"previous_output","description":"A Cell outpoint that points to the Cells used as inputs. These Cells are referred through outpoint, which contains the transaction hash of the previous transaction, as well as this Cell's index in its transaction's output list.","source":"@site/docs/tech-explanation/previous-output.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/previous-output","permalink":"/docs/tech-explanation/previous-output","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/previous-output.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"previous-output","title":"previous_output"},"sidebar":"tutorial","previous":{"title":"CellInput","permalink":"/docs/tech-explanation/cellinput"},"next":{"title":"OutPoint","permalink":"/docs/tech-explanation/outpoint"}},{"id":"tech-explanation/proposals","title":"proposals","description":"proposals refer to an array of hex-encoded short transaction IDs that represent proposed transactions within a block or its uncle blocks. A transaction proposal ID is the first 10 bytes of the transaction hash. In CKB, the transaction proposal ID must be proposed before a transaction can be committed to the blockchain.","source":"@site/docs/tech-explanation/proposals.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/proposals","permalink":"/docs/tech-explanation/proposals","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/proposals.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"proposals","title":"proposals"},"sidebar":"tutorial","previous":{"title":"uncles","permalink":"/docs/tech-explanation/uncles"},"next":{"title":"CKB Address","permalink":"/docs/tech-explanation/ckb-address"}},{"id":"tech-explanation/rawheader","title":"RawHeader","description":"RawHeader is the payload of the block header.","source":"@site/docs/tech-explanation/rawheader.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/rawheader","permalink":"/docs/tech-explanation/rawheader","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/rawheader.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"rawheader","title":"RawHeader"},"sidebar":"tutorial","previous":{"title":"header","permalink":"/docs/tech-explanation/header"},"next":{"title":"transactions","permalink":"/docs/tech-explanation/transactions"}},{"id":"tech-explanation/script","title":"Script","description":"Structure","source":"@site/docs/tech-explanation/script.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/script","permalink":"/docs/tech-explanation/script","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/script.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"script","title":"Script"},"sidebar":"tutorial","previous":{"title":"Capacity","permalink":"/docs/tech-explanation/capacity"},"next":{"title":"code_hash","permalink":"/docs/tech-explanation/code-hash"}},{"id":"tech-explanation/script-args","title":"script_args","description":"scriptargs refers to the arguments imported into the CKB-VM instance as input for the Scripts. In CKB, public key information is conventionally stored in scriptargs, while signature information is in witnesses, though it's not mandatory.","source":"@site/docs/tech-explanation/script-args.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/script-args","permalink":"/docs/tech-explanation/script-args","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/script-args.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"script-args","title":"script_args"},"sidebar":"tutorial","previous":{"title":"hash_type","permalink":"/docs/tech-explanation/hash-type"},"next":{"title":"Lock Script","permalink":"/docs/tech-explanation/lock-script"}},{"id":"tech-explanation/script-group-exe","title":"Script Group Execution","description":"script-group-exe}","source":"@site/docs/tech-explanation/script-group-exe.mdx","sourceDirName":"tech-explanation","slug":"/tech-explanation/script-group-exe","permalink":"/docs/tech-explanation/script-group-exe","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/script-group-exe.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"script-group-exe","title":"Script Group Execution"},"sidebar":"tutorial","previous":{"title":"Lock Script vs. Type Script: The Difference","permalink":"/docs/tech-explanation/lock-type-diff"},"next":{"title":"witnesses","permalink":"/docs/tech-explanation/witness"}},{"id":"tech-explanation/since","title":"since","description":"Since value guarding current referenced inputs. since can be added to any input in a transaction, specifying a future time when it can be committed. Please refer to the RFC0017: Transaction Since Precondition for details.","source":"@site/docs/tech-explanation/since.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/since","permalink":"/docs/tech-explanation/since","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/since.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"since","title":"since"},"sidebar":"tutorial","previous":{"title":"OutPoint","permalink":"/docs/tech-explanation/outpoint"},"next":{"title":"outputs","permalink":"/docs/tech-explanation/outputs"}},{"id":"tech-explanation/transaction","title":"Transaction","description":"A transaction in CKB destroys some Cells (outputs from previous transactions) and generates new ones.","source":"@site/docs/tech-explanation/transaction.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/transaction","permalink":"/docs/tech-explanation/transaction","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/transaction.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"transaction","title":"Transaction"},"sidebar":"tutorial","previous":{"title":"ckbhash","permalink":"/docs/tech-explanation/ckbhash"},"next":{"title":"Cell_deps","permalink":"/docs/tech-explanation/cell-deps"}},{"id":"tech-explanation/transactions","title":"transactions","description":"An array of committed transactions contained in the block. Each element of this array has the same structure as the transaction structure. The first transaction must be the cellbase.","source":"@site/docs/tech-explanation/transactions.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/transactions","permalink":"/docs/tech-explanation/transactions","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/transactions.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"transactions","title":"transactions"},"sidebar":"tutorial","previous":{"title":"RawHeader","permalink":"/docs/tech-explanation/rawheader"},"next":{"title":"uncles","permalink":"/docs/tech-explanation/uncles"}},{"id":"tech-explanation/type-script","title":"Type Script","description":"type-script}","source":"@site/docs/tech-explanation/type-script.mdx","sourceDirName":"tech-explanation","slug":"/tech-explanation/type-script","permalink":"/docs/tech-explanation/type-script","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/type-script.mdx","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"type-script","title":"Type Script"},"sidebar":"tutorial","previous":{"title":"Lock Script","permalink":"/docs/tech-explanation/lock-script"},"next":{"title":"Lock Script vs. Type Script: The Difference","permalink":"/docs/tech-explanation/lock-type-diff"}},{"id":"tech-explanation/uncles","title":"uncles","description":"UncleBlock is a sub-structure of Block. It is the ordered list of uncle blocks.","source":"@site/docs/tech-explanation/uncles.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/uncles","permalink":"/docs/tech-explanation/uncles","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/uncles.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"uncles","title":"uncles"},"sidebar":"tutorial","previous":{"title":"transactions","permalink":"/docs/tech-explanation/transactions"},"next":{"title":"proposals","permalink":"/docs/tech-explanation/proposals"}},{"id":"tech-explanation/witness","title":"witnesses","description":"witnesses is provided by transaction creator to enable the successful execution of the corresponding Script. For example, signatures might be included to ensure a signature verification Lock Script passes.","source":"@site/docs/tech-explanation/witness.md","sourceDirName":"tech-explanation","slug":"/tech-explanation/witness","permalink":"/docs/tech-explanation/witness","draft":false,"unlisted":false,"editUrl":"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/tech-explanation/witness.md","tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{"id":"witness","title":"witnesses"},"sidebar":"tutorial","previous":{"title":"Script Group Execution","permalink":"/docs/tech-explanation/script-group-exe"},"next":{"title":"ckbhash","permalink":"/docs/tech-explanation/ckbhash"}}],"drafts":[],"sidebars":{"tutorial":[{"type":"category","label":"Getting Started","className":"category-getting-started","collapsible":false,"items":[{"type":"doc","id":"getting-started/how-ckb-works"},{"type":"doc","id":"getting-started/quick-start"},{"type":"doc","id":"getting-started/installation-guide"},{"type":"doc","id":"getting-started/blockchain-networks"},{"type":"doc","id":"getting-started/ckb-vs-btc"}],"collapsed":false},{"type":"category","label":"SDK & Devtools","className":"category-tool","collapsible":false,"items":[{"type":"doc","id":"sdk-and-devtool/rust"},{"type":"doc","id":"sdk-and-devtool/go"},{"type":"doc","id":"sdk-and-devtool/java"},{"type":"doc","id":"sdk-and-devtool/ccc"},{"type":"doc","id":"sdk-and-devtool/lumos"},{"type":"doc","id":"sdk-and-devtool/ckb-cli"},{"type":"doc","id":"sdk-and-devtool/offckb"},{"type":"doc","id":"sdk-and-devtool/devtool"}],"collapsed":false},{"type":"category","label":"DApp Tutorials","className":"category-dapp","collapsible":false,"items":[{"type":"doc","id":"dapp/transfer-ckb"},{"type":"doc","id":"dapp/store-data-on-cell"},{"type":"doc","id":"dapp/create-token"},{"type":"doc","id":"dapp/create-dob"},{"type":"doc","id":"dapp/simple-lock"}],"collapsed":false},{"type":"category","label":"Scripts (Smart Contracts)","className":"category-script","collapsible":false,"items":[{"type":"doc","id":"script/intro-to-script"},{"type":"doc","id":"script/program-language-for-script"},{"type":"doc","id":"script/syscalls-for-script"},{"type":"doc","id":"script/vm-cycle-limits"},{"type":"doc","id":"script/vm-selection"},{"type":"doc","id":"script/type-id"},{"type":"doc","id":"script/spawn-cross-script-calling"},{"type":"doc","id":"script/debug-script"},{"type":"doc","id":"script/common-script-error-code"},{"type":"doc","id":"script/minimal-script"},{"type":"doc","id":"script/sudt-script"},{"type":"doc","id":"script/spawn-script"},{"type":"doc","id":"script/js-script"}],"collapsed":false},{"type":"category","label":"Integrate Wallets","className":"category-integrate-wallets","collapsible":false,"items":[{"type":"doc","id":"integrate-wallets/intro-to-wallets"},{"type":"doc","id":"integrate-wallets/ccc-wallet"},{"type":"doc","id":"integrate-wallets/joyid"}],"collapsed":false},{"type":"category","label":"Common Scripts","className":"category-common-scripts","collapsible":false,"items":[{"type":"doc","id":"common-scripts/omnilock"},{"type":"doc","id":"common-scripts/xudt"},{"type":"doc","id":"common-scripts/spore-protocol"},{"type":"doc","id":"common-scripts/spore-dob-0"}],"collapsed":false},{"type":"category","label":"Network & Nodes","className":"category-node","collapsible":false,"items":[{"type":"doc","id":"node/rpcs"},{"type":"doc","id":"node/run-mainnet-node"},{"type":"doc","id":"node/run-testnet-node"},{"type":"doc","id":"node/run-devnet-node"},{"type":"doc","id":"node/run-public-rpc-node"}],"collapsed":false},{"type":"category","label":"Serialization (Molecule)","className":"category-molecule","collapsible":false,"items":[{"type":"doc","id":"serialization/serialization-molecule-in-ckb"},{"type":"doc","id":"serialization/features-molecule"},{"type":"doc","id":"serialization/use-in-ckb-scripts"},{"type":"doc","id":"serialization/tools-molecule"},{"type":"doc","id":"serialization/schema-language"},{"type":"doc","id":"serialization/encoding-specs"},{"type":"doc","id":"serialization/example-role-playing-game"}],"collapsed":false},{"type":"category","label":"How-Tos","className":"category-howto","collapsible":false,"items":[{"type":"doc","id":"how-tos/how-to-sign-a-tx"},{"type":"doc","id":"how-tos/how-to-query-tx-state"},{"type":"doc","id":"how-tos/how-to-calculate-tx-hash"},{"type":"doc","id":"how-tos/how-to-calculate-script-hash"},{"type":"doc","id":"how-tos/how-to-calculate-code-hash"}],"collapsed":false},{"type":"category","label":"History & Hard Forks","className":"category-history","collapsible":false,"items":[{"type":"doc","id":"history-and-hard-forks/intro-to-hard-fork"},{"type":"doc","id":"history-and-hard-forks/ckb-hard-fork-history"},{"type":"doc","id":"history-and-hard-forks/history-vm-version"},{"type":"doc","id":"history-and-hard-forks/rethinking-forks"}],"collapsed":false},{"type":"category","label":"Tech Explanation","className":"category-tech-explanation","collapsible":false,"items":[{"type":"doc","id":"tech-explanation/nervos-blockchain"},{"type":"doc","id":"tech-explanation/cell"},{"type":"doc","id":"tech-explanation/cell-model"},{"type":"doc","id":"tech-explanation/capacity"},{"type":"doc","id":"tech-explanation/script"},{"type":"doc","id":"tech-explanation/code-hash"},{"type":"doc","id":"tech-explanation/hash-type"},{"type":"doc","id":"tech-explanation/script-args"},{"type":"doc","id":"tech-explanation/lock-script"},{"type":"doc","id":"tech-explanation/type-script"},{"type":"doc","id":"tech-explanation/lock-type-diff"},{"type":"doc","id":"tech-explanation/script-group-exe"},{"type":"doc","id":"tech-explanation/witness"},{"type":"doc","id":"tech-explanation/ckbhash"},{"type":"doc","id":"tech-explanation/transaction"},{"type":"doc","id":"tech-explanation/cell-deps"},{"type":"doc","id":"tech-explanation/out-point"},{"type":"doc","id":"tech-explanation/dep-type"},{"type":"doc","id":"tech-explanation/dep-group"},{"type":"doc","id":"tech-explanation/header-dep"},{"type":"doc","id":"tech-explanation/cellinput"},{"type":"doc","id":"tech-explanation/previous-output"},{"type":"doc","id":"tech-explanation/outpoint"},{"type":"doc","id":"tech-explanation/since"},{"type":"doc","id":"tech-explanation/outputs"},{"type":"doc","id":"tech-explanation/outputs-data"},{"type":"doc","id":"tech-explanation/block"},{"type":"doc","id":"tech-explanation/header"},{"type":"doc","id":"tech-explanation/rawheader"},{"type":"doc","id":"tech-explanation/transactions"},{"type":"doc","id":"tech-explanation/uncles"},{"type":"doc","id":"tech-explanation/proposals"},{"type":"doc","id":"tech-explanation/ckb-address"},{"type":"doc","id":"tech-explanation/ckb-vm"},{"type":"doc","id":"tech-explanation/consensus"},{"type":"doc","id":"tech-explanation/economics"},{"type":"doc","id":"tech-explanation/glossary"}],"collapsed":false},{"type":"category","label":"Mining","className":"category-mining","collapsible":false,"items":[{"type":"doc","id":"mining/algorithm-difficulty"},{"type":"doc","id":"mining/rewards"},{"type":"doc","id":"mining/halving"},{"type":"doc","id":"mining/cost-and-profit"},{"type":"doc","id":"mining/risks"},{"type":"doc","id":"mining/hardware"},{"type":"doc","id":"mining/guide"},{"type":"doc","id":"mining/info-stats"}],"collapsed":false},{"type":"category","label":"Ecosystem","className":"category-ecosystem","collapsible":false,"items":[{"type":"doc","id":"ecosystem/projects"},{"type":"doc","id":"ecosystem/organizations"}],"collapsed":false},{"type":"category","label":"Resources","className":"category-resources","collapsible":false,"items":[{"type":"link","label":"Positioning Paper","href":"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0001-positioning/0001-positioning.md"},{"type":"link","label":"CKB RFCs","href":"https://github.com/nervosnetwork/rfcs"},{"type":"link","label":"CKB Dev Log","href":"https://github.com/nervosnetwork/ckb/discussions/categories/dev-log"},{"type":"link","label":"CKB Academy","href":"https://academy.ckb.dev/"},{"type":"link","label":"CKB Cookbook","href":"https://cookbook.ckbdapps.com/"}],"collapsed":false}]}}]}},"docusaurus-plugin-content-blog":{"default":{"blogSidebarTitle":"All Posts","blogPosts":[{"id":"intro-to-ckb-script-programming-1","metadata":{"permalink":"/blog/intro-to-ckb-script-programming-1","editUrl":"https://github.com/facebook/docusaurus/edit/main/website/blog/intro-to-script-1.md","source":"@site/blog/intro-to-script-1.md","title":"Introduction to CKB Script Programming 1: Validation Model","description":"As of now, the cell validation model in CKB has been more or less stablized, hence I'm starting a series of article introducing CKB script programming here. My goal here is to fill in all the missing implementation details one need to write CKB scripts after reading the whitepaper, so you can start exploring this beautiful wonderland CKB presents.","date":"2019-07-05T00:00:00.000Z","tags":[],"readingTime":6.37,"hasTruncateMarker":false,"authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}],"frontMatter":{"title":"Introduction to CKB Script Programming 1: Validation Model","date":"2019-07-05","slug":"intro-to-ckb-script-programming-1","authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}]},"unlisted":false,"nextItem":{"title":"Introduction to CKB Script Programming 2: Script Basics","permalink":"/blog/intro-to-ckb-script-programming-2"}},"content":"As of now, the cell validation model in CKB has been more or less stablized, hence I'm starting a series of article introducing CKB script programming here. My goal here is to fill in all the missing implementation details one need to write CKB scripts after reading the whitepaper, so you can start exploring this beautiful wonderland CKB presents.\n\nYou might noticed that I call the code running on CKB as `script`, not `smart contract`. This is because smart contract is quite a confusing term to me, and I want to use a different word here to indicate CKB's unique programmability. A script in CKB's sense need not be just a script we see in scripting languages such as Ruby, JS, it actually refers to the RISC-V format binary you run on CKB VM.\n\nThis first post here, is dedicated to the brand [new verification model](https://github.com/nervosnetwork/ckb/pull/913) introduced in CKB v0.14.0. It might sound boring but I promise you this is the last post without actual examples to play with :P\n\nNote even though I believe CKB's programming model is quite stable now, development is still happening so there might be changes. I will try my best to make sure this post is updated but if anything confuses you, this post is describing CKB's Lina mainnet version now.\n\n# Overview\n\nBelow illustrates a real transaction on CKB:\n\n![Transaction Example](/img/blog/tx.svg)\n\nThere are a lot of things going on in this graph, and we will come back to this graph again in later posts. Today, we will just focus on 2 entities in the cell data structure: `lock` and `type`.\n\n```rust\npub struct CellOutput {\n    pub capacity: Capacity,\n    pub lock: Script,\n    #[serde(rename = \"type\")]\n    pub type_: Option<Script>,\n}\n```\n\nFrom the data structure we can see that `lock` and `type` shared the same structure, later we can show that they are also executed in the same environment, the differences between them are just in a few tiny bits:\n\n- `lock` is required, while `type` is optional\n- Mentally, they are used to capture different use cases.\n\nWe will first start with `type` script here.\n\n# Type Script\n\nNote the name here is just a lucky accident, it is not related to the beloved [programming language](https://www.typescriptlang.org/).\n\nIf you think about it, a transaction on CKB(or most UTXO-based blockchains) just transforms one set of cells(or UTXOs) to another set of cells. What's interesting, is the actual transformation here. That's where we start to design CKB's verification model: how can we build a model to better validate the cell transformations?\n\nThat's where a `type` script comes in play: a type script is used to validate certain rules in the cell transformation phase. Some examples here include:\n\n- Validating UDT(user defined token) balances to ensure no new token is invalidly issued.\n- Ensuring a unique name is assigned to a cell that might be mutated. Note this is a fun one, please expect a future article dedicated entirely to this topic.\n- Implementing economic constructs. In fact NervosDAO is completely implemented as a [type script](https://github.com/nervosnetwork/ckb-system-scripts/blob/66d7da8ec72dffaa7e9c55904833951eca2422a9/c/dao.c) with minimal support from the consensus layer.\n- A bitcoin VM can be compiled to RISC-V binary, which can transform CKB into an alternative bitcoin implementation :)\n- Keep in mind that in addition to data, cell can be used to store code as well, hence a type script can also be used to run tests on the code in cell to ensure certain behavior.\n\nIn a nutshell, type script can be used to capture any validation logic you need in the cell transformation. Combined with CKB's flexible virtual machine, I believe this will provide endless potentials.\n\n# Lock Script\n\nType script captures the cell transformation logic, but there's still one thing missing from the picture: how can I guard my own cell from someone else? In other words, how can I ensure my tokens stay mine in an ever-changing world?\n\nThis is why we designed the always required lock script. A cell can only be consumed when the lock script can be executed sucessfully. This is different from type script, which might be totally optional. A lock script is always there to guard the security of a cell.\n\nTypically, you would expect that a lock script contains a signature verification phase, like all the other blockchains do, but there are also brand new use cases unlocked by CKB:\n\n- The actual signature algorithm is totally determined by the lock script, and you are free to use any lock script. That means you are free to incorporate any signature algorithms that suit your need. In the official CKB distribution we are including [secp256k1 algorithm](https://github.com/nervosnetwork/ckb-system-scripts/blob/66d7da8ec72dffaa7e9c55904833951eca2422a9/c/secp256k1_blake160_sighash_all.c) as the default lock script. But you don't have to use this, if someone implements a lock script using schnorr signature, you are more than welcome to use that one.\n- In addition to signature verification, a lock script can also include other rules to unlock the cell as well. For example, I can configure my lock script to pass if the transaction contains an output cell that uses my lock script, but has more capacity than my consumed cell. This way when someone sends me capacity, they can consume my existing cell and create a new cell for me. They don't have to create a new cell for me like bitcoin requires.\n\nIn my personal opinion, the best part of CKB, is that a lock script created by the community is treated exactly the same way as the official default one. No priviledge is granted to the official scripts. Unlike some other blockchains, CKB provides the freedom to develop CKB scripts back to the whole community.\n\n# Execution Model\n\nNow let's see when lock and type scripts are executed.\n\n## Back to the Example\n\nHere's the transaction we see earlier again:\n\n![Transaction Example](/img/blog/tx.svg)\n\nFor this example, the execution flow is as follows:\n\n1. `Lock Script 1` is executed once.\n2. `Lock Script 2` is executed once.\n3. `Type Script 1` is executed once.\n4. `Type Script 2` is executed once.\n\nIn later posts we can see both lock and type scripts are executed in the same environment, and both have access to the whole transaction. If any of the script fails, the whole transaction fails. Only when all the scripts succeed, the transaction is considered validated.\n\nThere're couple of points worth mentioning:\n\n- Even though there are 2 input cells with `Lock Script 1`, it is only executed once, it's up to the actual lock script to locate all the input cells with the same lock script and validate both signature.\n- Only lock scripts in input cells are executed in this transaction, for example, `Lock Script 3` is not executed here.\n- Even though an input cell and an output cell both contain `Type Script 1`, it is only executed once.\n- Type scripts in both input and output cells are executed, which include `Type Script 1` and `Type Script 2`.\n- Some cells do not have type scripts, in this case we just omit the execution.\n\n## Rules\n\nNow to summary the rules:\n\n- Lock scripts in input cells are collected and deduped, each unique lock script is executed and only executed once.\n- Type scripts in input and output cells(if existed) are collected together and deduped, each unique type script is executed and only executed once.\n- If any script fails, the whole transaction validation fails.\n\n# What's Next\n\nNow that cell model is covered, we will look at how to actual write a CKB VM script in the next post. The default secp256k1 lock script will be examined to show the life of a CKB VM script."},{"id":"intro-to-ckb-script-programming-2","metadata":{"permalink":"/blog/intro-to-ckb-script-programming-2","editUrl":"https://github.com/facebook/docusaurus/edit/main/website/blog/intro-to-script-2.md","source":"@site/blog/intro-to-script-2.md","title":"Introduction to CKB Script Programming 2: Script Basics","description":"Last post introduced current CKB's validation model. This post will get more fun, since we will show how to deploy script codes to CKB for real. I'm hoping after this post, you should be able to explore the CKB world and work on new script codes as you wish.","date":"2019-07-13T00:00:00.000Z","tags":[],"readingTime":18.075,"hasTruncateMarker":false,"authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}],"frontMatter":{"title":"Introduction to CKB Script Programming 2: Script Basics","date":"2019-07-13","slug":"intro-to-ckb-script-programming-2","authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}]},"unlisted":false,"prevItem":{"title":"Introduction to CKB Script Programming 1: Validation Model","permalink":"/blog/intro-to-ckb-script-programming-1"},"nextItem":{"title":"Introduction to CKB Script Programming 3: UDT","permalink":"/blog/intro-to-ckb-script-programming-3"}},"content":"Last post introduced current CKB's validation model. This post will get more fun, since we will show how to deploy script codes to CKB for real. I'm hoping after this post, you should be able to explore the CKB world and work on new script codes as you wish.\n\nThis post is written based on current CKB Lina mainnet version now.\n\nA warning here: this will be a long post, since I want to fill in enough for the more interesting topic next week. So you don't have to finish it at once if you don't have enough time. I've tried to split it into individual sections, so you can try each one at a time.\n\n# Wording\n\nBefore we continue, let's distinguish between 2 terms: script, and script code.\n\nIn this post and hopefully the whole series, we will distinguish between script, and script code. Script code actually refers to the program you write and compile to use on CKB. Script, on the other hand, actually refers to the script data structure used in CKB, which is a little more than just the script code:\n\n```rust\npub struct Script {\n    pub code_hash: H256,\n    pub hash_type: ScriptHashType,\n    pub args: JsonBytes,\n}\n```\n\nWe can ignore `hash_type` for now, a future post will explain what it is and it's interesting usage. Later in this post, we will show that `code_hash` actually just identifies a script code, so for now we can just think of it as script code. What script also includes, is the `args` part, which distinguishes script from script code. `args` can be used here to provide additional arguments for a CKB script, for example, while people might all be using the same default lock script code, each of them might have their own pubkey hash, `args` is exact the place to hold pubkey hash. This way each user of CKB can have different lock script, while sharing the same lock script code.\n\nNote that in most cases, script and script code can be used interchangably, but if you are confused at some places, it might be worthwhile to think of the difference between the 2.\n\n# A Minimal CKB Script Code\n\nAs you might have already heard, CKB is based on the open source RISC-V ISA. But what does that even mean? In my words, it means we are (sort of) embedding a real mini computer in CKB, instead of a virtual machine. The benefit of a real computer, is that you can write any logic you want in any language you want. The first few examples we show here will be written in C for simplicity(well I mean simplicity in the toolchain, not the [language](http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html)), but later we will switch to JavaScript based script code, and hopefully show more languages in the series. On CKB there's endless possibilities.\n\nAs we mentioned about, CKB VM is more like a real mini computer. CKB script code also looks like a normal Unix style executable program we run on a computer:\n\n```c\nint main(int argc, char* argv[])\n{\n  return 0;\n}\n```\n\nWhen compiled via a C compiler, this will become a script code that is runnable on CKB. In other words, CKB just take plain old Unix style executables(but in RISC-V architecture instead of the popular x86 architecture), and run it in a virtual machine environment. If the program returns with 0 as the return code, we consider the script succeeds, all non-zero return codes will be considered script faliures.\n\nIn the example above, we are showing a script code that always succeeds, since the return code will always be zero. Please don't use this as your lock script code, otherwise your token can be taken away by anyone.\n\nBut the example above won't be interesting, here we will start with an interesting idea: personally I dislike carrot. I do know that carrot is great from a nutritional point of view, but I still want to avoid it due to the taste. Now what if I want to set a rule, that none of my cells on CKB has data that begin with `carrot`? Let's write a script code to ensure this.\n\nIn order to ensure none of the cells can have `carrot` in cell data, we need a way to first read cell data in the script. CKB provides `syscalls` to help with this.\n\nTo ensure the security of CKB script, each script has to run in an isolated environment that is totally separated from the main computer you are running CKB. This way it won't be able to access data it doesn't need, such as your private keys or passwords. However, for a script to be useful, there must be certain data it want to access, such as the cell a script guards, or a transaction a script validates. CKB provides `syscalls` to ensure this, syscalls are defined in RISC-V standard, they provide a way to access certain resources provided by the environment. In a normal situation, the environment here means the operating system, but in the case of CKB VM, the environment refers to the actual CKB process. With syscalls, a CKB script can access the whole transaction containing itself, including inputs, outputs, witnesses, and deps.\n\nThe good news, is that we have encapsulated syscalls in an easy to use [header file](https://github.com/nervosnetwork/ckb-system-scripts/blob/a7b7c75662ed950c9bd024e15f83ce702a54996e/c/ckb_syscalls.h), you are very welcome to poke around this file to see how syscalls are implemented. The bottomline is you can just grab this header file and use the wrapped functions to make syscalls as you want.\n\nNow with the syscalls at hand, we can start with our carrot-forbidden script:\n\n```c\n#include <memory.h>\n#include \"ckb_syscalls.h\"\n\nint main(int argc, char* argv[]) {\n  int ret;\n  size_t index = 0;\n  uint64_t len = 0; /* (1) */\n  unsigned char buffer[6];\n\n  while (1) {\n    len = 6;\n    memset(buffer, 0, 6);\n    ret = ckb_load_cell_data(buffer, &len, 0, index, CKB_SOURCE_OUTPUT); /* (2) */\n    if (ret == CKB_INDEX_OUT_OF_BOUND) {               /* (3) */\n      break;\n    }\n\n    if (memcmp(buffer, \"carrot\", 6) == 0) {\n      return -1;\n    }\n\n    index++;\n  }\n\n  return 0;\n}\n```\n\nSeveral points worth explaining here:\n\n1. We will use `len` field both as an input and output parameter, hence it is passed as a pointer here.\n2. When making a syscall, we need to provide the following: a buffer to hold the data provided by the syscall; a `len` field denoting both the buffer length, and available data length returned by the syscall; an offset into the input data buffer, and several parameters denoting the exact field we are fetching in the transaction. For more details, please refer to our [RFC](https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0009-vm-syscalls/0009-vm-syscalls.md).\n3. For maximum flexibility, CKB uses the return value of the syscall to represent data fetching status: 0(or `CKB_SUCCESS`) means success, 1(or `CKB_INDEX_OUT_OF_BOUND`) means you have finished fetching all indices in a kind, 2(or `CKB_ITEM_MISSING`) means an entity is not present, such as fetching a type script from a cell that doesn't have one.\n\nSo to recap, this script would loop through all output cells in the transaction, load the first 6 bytes of each cell data and test if those bytes match `carrot`. If we found a match, the script would return `-1`, denoting an error status, if no match is found, the script exits with `0`, meaning execution success.\n\nTo perform the loop, the script would keep an `index` variable, in each loop iteration, it would tries to make the syscall to fetch the cell denoted by current `index` value, if the syscall returns `CKB_INDEX_OUT_OF_BOUND`, it means the script has iterated through all the cells, hence it just exits the loop, otherwise, the loop would continue, the cell data is tested, then `index` variable is incremented for the next iteration.\n\nThis concludes your first useful CKB script code! In the next section, we will see how we can deploy it to CKB and run it.\n\n# Deploying a Script to CKB\n\nFirst, we need to compile the carrot source code written above. Since GCC already has upstream RISC-V support, you can of course use the official GCC to build your script code. Or you can use the [docker image](https://hub.docker.com/r/nervos/ckb-riscv-gnu-toolchain) we have prepared to save the trouble of compiling GCC:\n\n```bash\n$ ls\ncarrot.c  ckb_consts.h  ckb_syscalls.h\n$ sudo docker run --rm -it -v `pwd`:/code nervos/ckb-riscv-gnu-toolchain:xenial bash\nroot@dc2c0c209dcd:/# cd /code\nroot@dc2c0c209dcd:/code# riscv64-unknown-elf-gcc -Os carrot.c -o carrot\nroot@dc2c0c209dcd:/code# exit\nexit\n$ ls\ncarrot*  carrot.c  ckb_consts.h  ckb_syscalls.h\n```\n\nAnd that's it, CKB can use the compiled executable from GCC directly as scripts on chain, there's no way for further processing. We can now deploy it on chain. Note that I will use CKB's Node.js SDK [Lumos](https://github.com/ckb-js/lumos). Please refer to the official [Docs](https://lumos-website.vercel.app/) for how to set it up. Across the serial posts, there are some common codes to set up in the Repl environment with Lumos packages, we won't repeat these codes for simplicity, but you can take the following as a reference:\n\n```js\n$ node\nWelcome to Node.js v20.12.0.\nType \".help\" for more information.\n>\n> const lumos = require(\"@ckb-lumos/lumos\");\n> const indexer = new lumos.Indexer(\"https://testnet.ckb.dev/rpc\");\n> const rpc = new lumos.RPC(\"https://testnet.ckb.dev/rpc\");\n> lumos.config.initializeConfig(lumos.config.TESTNET);\n> const wallet = {\n  address:\n    \"ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqvwg2cen8extgq8s5puft8vf40px3f599cytcyd8\",\n  privkey: \"0x6109170b275a09ad54877b82f7d9930f88cab5717d484fb4741ae9d1dd078cd6\",\n};\n> const wallet2 = {\n  address: \"ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsq2prryvze6fhufxkgjx35psh7w70k3hz7c3mtl4d\",\n  privkey: \"0xace08599f3174f4376ae51fdc30950d4f2d731440382bb0aa1b6b0bd3a9728cd\"\n}\n```\n\nTo deploy the script to CKB, we can just create a new cell, with the script code as cell data part:\n\n```js\n> const fs = require(\"fs\");\n> const data = fs.readFileSync(\"carrot\");\n> data.byteLength\n7744\n> let txSkeleton = lumos.helpers.TransactionSkeleton({ cellProvider: indexer });\n> txSkeleton = await lumos.commons.common.transfer(txSkeleton,[wallet.address], wallet2.address, \"8000\" + \"00000000\");\n> txSkeleton.update(\"outputs\", (outputs) => {\n  let cell = outputs.first();\n  cell.data = \"0x\" + data.toString(\"hex\");\n  return outputs;\n});\n> txSkeleton = await lumos.commons.common.payFeeByFeeRate(txSkeleton,[wallet.address], 1000);\n> txSkeleton = lumos.commons.common.prepareSigningEntries(txSkeleton);\n> const signatures = txSkeleton.get(\"signingEntries\").map((entry) => lumos.hd.key.signRecoverable(entry.message, wallet.privkey)).toArray();\n> const signedTx = lumos.helpers.sealTransaction(txSkeleton, signatures)\n> const carrotTxHash = await rpc.sendTransaction(signedTx)\n```\n\nHere I simply create a new cell with enough capacity by sending tokens to another wallet. Now we can create the type script containing the carrot script code:\n\n```js\n> const bytes = require(\"@ckb-lumos/lumos/codec\").bytes;\n> const carrotDataHash = lumos.utils.ckbHash(bytes.bytify(\"0x\" + data.toString(\"hex\")));\n> const carrotTypeScript =  {\n  codeHash: carrotDataHash,\n  hashType: \"data\",\n  args: \"0x\"\n};\n```\n\nRecall the Script data structure:\n\n```rust\npub struct Script {\n    pub code_hash: H256,\n    pub hash_type: ScriptHashType,\n    pub args: JsonBytes,\n}\n```\n\nWe can see that instead of embedding the script code directly in the script data structure, we are only including the code hash, which is a Blake2b hash of the actual script binary code. Since carrot script doesn't use an argument, we can use empty bytes for `args` part.\n\nNote I'm still ignoring `hash_type` here, we will leave to a future post to see a different way of specifying code hash. For now, let's keep it simple here.\n\nTo run the carrot script, we need to create a new transaction, and set carrot type script as the type script of one of the output cells:\n\n```js\n> let txSkeleton = lumos.helpers.TransactionSkeleton({ cellProvider: indexer });\n> txSkeleton = await lumos.commons.common.transfer(txSkeleton,[wallet.address], wallet2.address,\"100\" + \"00000000\");\n> txSkeleton.update(\"outputs\", (outputs) => {\n  let cell = outputs.first();\n  cell.cellOutput.type = carrotTypeScript;\n  return outputs;\n});\n```\n\nThere's one more step needed: in order for CKB to locate the carrot script, we need to reference the cell containing carrot script in one of transaction deps:\n\n```js\n> txSkeleton = lumos.helpers.addCellDep(txSkeleton, {\n  outPoint: {\n    txHash: carrotTxHash,\n    index: \"0x0\"\n  },\n  depType: \"code\"\n})\n```\n\nNow we are ready to sign and send the transaction:\n\n```js\n> txSkeleton = await lumos.commons.common.payFeeByFeeRate(txSkeleton,[wallet.address],1000);\n> txSkeleton = lumos.commons.common.prepareSigningEntries(txSkeleton);\n> const signatures = txSkeleton.get(\"signingEntries\").map((entry) => lumos.hd.key.signRecoverable(entry.message, wallet.privkey)).toArray();\n> const signedTx = lumos.helpers.sealTransaction(txSkeleton, signatures)\n> const txHash = await rpc.sendTransaction(signedTx)\n> txHash\n0xd7b0fea7c1527cde27cc4e7a2e055e494690a384db14cc35cd2e51ec6f078163\n```\n\nSince this transaction does not have any cell containing `carrot` in the cell data, the type script validates successfully. Now let's try a different transaction that does have a cell that begins with `carrot`:\n\n```js\n> let txSkeleton = lumos.helpers.TransactionSkeleton({ cellProvider: indexer });\n> txSkeleton = await lumos.commons.common.transfer(txSkeleton,[wallet.address],wallet2.address,\"400\" + \"00000000\");\n> txSkeleton.update(\"outputs\", (outputs) => {\n  let cell = outputs.first();\n  cell.cellOutput.type = carrotTypeScript;\n  cell.data = \"0x\" + Buffer.from(\"carrot123\", \"utf8\").toString(\"hex\");\n  return outputs;\n});\n> txSkeleton = lumos.helpers.addCellDep(txSkeleton, {\n  outPoint: {\n    txHash: carrotTxHash,\n    index: \"0x0\",\n  },\n  depType: \"code\",\n});\n> txSkeleton = await lumos.commons.common.payFeeByFeeRate(txSkeleton,[wallet.address],1000);\n> txSkeleton = lumos.commons.common.prepareSigningEntries(txSkeleton);\n> const signatures = txSkeleton.get(\"signingEntries\").map((entry) => lumos.hd.key.signRecoverable(entry.message, wallet.privkey)).toArray();\n> const signedTx = lumos.helpers.sealTransaction(txSkeleton, signatures);\n> await rpc.sendTransaction(signedTx);\nUncaught:\nResponseException [Error]: {\"code\":-302,\"message\":\"TransactionFailedToVerify: Verification failed Script(TransactionScriptError { source: Outputs[0].Type, cause: ValidationFailure: see error code -1 on page..\"}\n```\n\nWe can see our carrot script rejects a transaction that generates a cell with carrot. Now I can use this script to make sure all my cells are free from carrots!\n\nSo to recap, to deploy and run a script as type script, what we need to do is:\n\n1. Compile the script to RISC-V executable binary\n2. Deploy the binary in a cell's data part\n3. Create a type script data structure with the blake2b hash of the binary as `code hash`, any required arguments of the script code in the `args` part\n4. Create a new transaction with the type script set in one of the generated cells\n5. Include the outpoint to the cell containing the script code as one of the transaction deps\n\nThat's really all you need! If your script has run into problems, those are the points you need to check.\n\nAlthough we only talk about type scripts here, lock script works exactly the same way. The only quirk you need to keep in mind, is that when you create a cell with a specificed lock script, the lock script won't run here. It only runs when you are consuming the cell. So while type script can be used to create the logic that runs when you create the cell, lock script is used to create the logic that runs when you consume the cell. Given this consideration, please make sure your lock script is correct, otherwise you might be losing the tokens in the following scenarios:\n\n- Your lock script has a bug that someone else can unlock your cell.\n- Your lock script has a bug that no one(including you) can unlock your cell.\n\nOne tip we can provide here, is always test your script as a type script attached to an output cell in your transaction, this way when error happens, you will know immediately, your tokens can stay safe.\n\n# Introducing Duktape\n\nI'm sure you feel the same way as I do now: it's good we can write contracts in C, but C always feels a bit tedious and, let's face it, dangerous. Is there a better way?\n\nYes of course! We mentioned above CKB VM is essentially a mini computer, and there are tons of solutions we can explore. One thing we have prepared here, is that we can write CKB script codes in JavaScript. Yes you got it right, plain ES5(yes I know, but this is just one example, and you can use a transpiler) JavaScript.\n\nHow this is possible? Since we have C compiler available, all we did is just take a JavaScript implementation for the embeded system, in our case, [duktape](https://duktape.org/), compile it from C to RISC-V binary, put it on chain, then boom, we can run JavaScript in CKB! Since we are working with a real mini computer here, there's no stopping us from embeding another VM as CKB script to CKB VM, and exploring this VM on top of VM path.\n\nAnd we can actually expand from this path, we can have JavaScript on CKB via duktape, we can also have Ruby on CKB via [mruby](https://github.com/mruby/mruby), we can even have Bitcoin Script or EVM on chain if we just compile their VM and put it on chain. This ensures CKB VM can both help us preserve legacy and build a diversified ecosystem. All languages should be and are treated equal on CKB, the freedom should be in the hands of blockchain contract developers.\n\nAt this stage you might want to ask: yes this is possible, but won't VM on top of VM be slow? I believe it really depends on your use case to say if this is gonna be slow. I'm a firm believer that benchmarks make no sense unless we put it in a real use case with standard hardware requirements. So wait to see if this is really gonna be an issue. In my opinion, higher languages are more likely to be used in type scripts to guard cell transformation, in this case, I doubt it's gonna be slow. Besides, we are also working on this field to optimize both CKB VM and the VMs on top of CKB VM to make it faster and faster :P\n\nTo use duktape on CKB, first you need to compile duktape itself into a RISC-V executable binary:\n\n```bash\n$ git clone https://github.com/xxuejie/ckb-duktape.git\n$ cd ckb-duktape\n$ git submodule init\n$ git submodule update\n$ sudo docker run --rm -it -v `pwd`:/code nervos/ckb-riscv-gnu-toolchain:xenial bash\nroot@0d31cad7a539:~# cd /code\nroot@0d31cad7a539:/code# make\nriscv64-unknown-elf-gcc -Os -DCKB_NO_MMU -D__riscv_soft_float -D__riscv_float_abi_soft -Iduktape -Ic -Ischema -Ideps/ckb-c-stdlib -Ideps/ckb-c-stdlib/molecule -Wall -Werror c/entry.c -c -o build/entry.o\nriscv64-unknown-elf-gcc -Os -DCKB_NO_MMU -D__riscv_soft_float -D__riscv_float_abi_soft -Iduktape -Ic -Ischema -Ideps/ckb-c-stdlib -Ideps/ckb-c-stdlib/molecule -Wall -Werror duktape/duktape.c -c -o build/duktape.o\nriscv64-unknown-elf-gcc build/entry.o build/duktape.o -o build/duktape -lm -Wl,-static -fdata-sections -ffunction-sections -Wl,--gc-sections -Wl,-s\nriscv64-unknown-elf-gcc -Os -DCKB_NO_MMU -D__riscv_soft_float -D__riscv_float_abi_soft -Iduktape -Ic -Ischema -Ideps/ckb-c-stdlib -Ideps/ckb-c-stdlib/molecule -Wall -Werror c/repl.c -c -o build/repl.o\nriscv64-unknown-elf-gcc build/repl.o build/duktape.o -o build/repl -lm -Wl,-static -fdata-sections -ffunction-sections -Wl,--gc-sections -Wl,-s\nriscv64-unknown-elf-gcc -Os -DCKB_NO_MMU -D__riscv_soft_float -D__riscv_float_abi_soft -Iduktape -Ic -Ischema -Ideps/ckb-c-stdlib -Ideps/ckb-c-stdlib/molecule -Wall -Werror c/dump_load.c -c -o build/dump_load.o\nriscv64-unknown-elf-gcc build/dump_load.o build/duktape.o -o build/dump_load -lm -Wl,-static -fdata-sections -ffunction-sections -Wl,--gc-sections -Wl,-s\ngcc -Wall -Werror -Iduktape -O3 c/native_dump_bytecode.c duktape/duktape.c -o build/native_dump_bytecode -lm\nriscv64-unknown-elf-gcc -Os -DCKB_NO_MMU -D__riscv_soft_float -D__riscv_float_abi_soft -Iduktape -Ic -Ischema -Ideps/ckb-c-stdlib -Ideps/ckb-c-stdlib/molecule -Wall -Werror c/dump_load_nocleanup.c -c -o build/dump_load_nocleanup.o\nriscv64-unknown-elf-gcc build/dump_load_nocleanup.o build/duktape.o -o build/dump_load_nocleanup -lm -Wl,-static -fdata-sections -ffunction-sections -Wl,--gc-sections -Wl,-s\ngcc -Wall -Werror -Ischema -Ideps/ckb-c-stdlib/molecule -O3 c/native_args_assembler.c -o build/native_args_assembler\nroot@0d31cad7a539:/code# exit\nexit\n$ ls build/\nduktape               dump_load             dump_load_nocleanup   entry.o               native_dump_bytecode  repl.o\nduktape.o             dump_load.o           dump_load_nocleanup.o native_args_assembler repl\n```\n\nLike the carrot example, the first step here is to deploy duktape script code in a CKB cell:\n\n```js\n> const data = fs.readFileSync(\"../ckb-duktape/build/duktape\");\n> data.byteLength\n291440\n> let txSkeleton = lumos.helpers.TransactionSkeleton({ cellProvider: indexer });\n> txSkeleton = await lumos.commons.common.transfer(txSkeleton,[wallet.address],wallet2.address,\"292000\" + \"00000000\");\n> txSkeleton.update(\"outputs\", (outputs) => {\n  let cell = outputs.first();\n  cell.data = \"0x\" + data.toString(\"hex\");\n  return outputs;\n});\n> txSkeleton = await lumos.commons.common.payFeeByFeeRate(txSkeleton,[wallet.address],1000);\n> txSkeleton = lumos.commons.common.prepareSigningEntries(txSkeleton);\n> const signatures = txSkeleton.get(\"signingEntries\").map((entry) => lumos.hd.key.signRecoverable(entry.message, wallet.privkey)).toArray();\n> const signedTx = lumos.helpers.sealTransaction(txSkeleton, signatures)\n> const duktapeTxHash = await rpc.sendTransaction(signedTx)\n> const duktapeCodeHash = lumos.utils.ckbHash(bytes.bytify(\"0x\" + data.toString(\"hex\")));\n```\n\nUnlike the carrot example, duktape script code now requires one argument: the JavaScript source you want to execute and the arguments to pass to the JavaScript source code. `ckb-duktape` provides a small binary tool called `native_args_assembler` to help us provide the script args from the js file and the js arguments.\n\nFirst, let's create the script args:\n\n```bash\n> docker run --rm -it -v `pwd`:/code nervos/ckb-riscv-gnu-toolchain:xenial bash\n> cd /code\n> echo \"CKB.debug(\\\"I'm running in JS\\\")\" > test.js\n> ./build/native_args_assembler -f test.js\n370000000c00000033000000000000001f000000434b422e6465627567282249276d2072756e6e696e6720696e204a5322290a04000000\n```\n\nNext, copy the script args and build the script:\n\n```js\n> const duktapeTypeScript =  {\n  codeHash: duktapeCodeHash,\n  hashType: \"data\",\n  args: \"0x370000000c00000033000000000000001f000000434b422e6465627567282249276d2072756e6e696e6720696e204a5322290a04000000\"\n};\n```\n\nNotice that with a different argument, you can create a different duktape powered type script for different use case:\n\n```bash\n> docker run --rm -it -v `pwd`:/code nervos/ckb-riscv-gnu-toolchain:xenial bash\n> cd /code\n> echo \"var a = 1;var b = a + 2;\" >> test.js\n> ./build/native_args_assembler -f test.js\n330000000c0000002f000000000000001b0000007661722061203d20313b5c6e7661722062203d2061202b20323b0a04000000\n```\n\n```js\n> const duktapeTypeScript =  {\n  codeHash: duktapeCodeHash,\n  hashType: \"data\",\n  args: \"0x330000000c0000002f000000000000001b0000007661722061203d20313b5c6e7661722062203d2061202b20323b0a04000000\"\n};\n```\n\nThis echos the differences mentioned above on script code vs script: here duktape serves as a script code providing a JavaScript engine, while different script leveraging duktape script code serves different functionalities on chain.\n\nNow we can create a cell with the duktape type script attached:\n\n```js\n> const duktapeTypeScript =  {\n  codeHash: duktapeCodeHash,\n  hashType: \"data\",\n  args: \"0x370000000c00000033000000000000001f000000434b422e6465627567282249276d2072756e6e696e6720696e204a5322290a04000000\"\n};\n> let txSkeleton = lumos.helpers.TransactionSkeleton({ cellProvider: indexer });\n> txSkeleton = await lumos.commons.common.transfer(txSkeleton,[wallet.address],wallet2.address,\"200\" + \"00000000\");\n> txSkeleton.update(\"outputs\", (outputs) => {\n  let cell = outputs.first();\n  cell.cellOutput.type = duktapeTypeScript;\n  return outputs;\n});\n> txSkeleton = lumos.helpers.addCellDep(txSkeleton, {\n  outPoint: {\n    txHash: duktapeTxHash,\n    index: \"0x0\"\n  },\n  depType: \"code\"\n})\n> txSkeleton = await lumos.commons.common.payFeeByFeeRate(txSkeleton,[wallet.address],1000);\n> txSkeleton = lumos.commons.common.prepareSigningEntries(txSkeleton);\n> const signatures = txSkeleton.get(\"signingEntries\").map((entry) => lumos.hd.key.signRecoverable(entry.message, wallet.privkey)).toArray();\n> const signedTx = lumos.helpers.sealTransaction(txSkeleton, signatures)\n> const txHash = await rpc.sendTransaction(signedTx)\n```\n\nWe can see that the script executes successfully, and if you have `ckb-script` module's log level set to `debug` in your `ckb.toml` file, you can also notice the following log:\n\n```bash\n2019-07-15 05:59:13.551 +00:00 http.worker8 DEBUG ckb-script  script group: c35b9fed5fc0dd6eaef5a918cd7a4e4b77ea93398bece4d4572b67a474874641 DEBUG OUTPUT: I'm running in JS!\n```\n\nNow you have successfully deploy a JavaScript engine on CKB, and run JavaScript based script on CKB! Feel free to try any JavaScript code you want here.\n\n# A Thought Exercise\n\nNow you are familiar with CKB script basics, here's one thought exercise: in this post you've seen what an always-success script looks like, but what about an always-failure script? How small an always-faliure script(and script code) can be?\n\nA hint: this is NOT a gcc flag-tweaking optimization contest, this is merely a thought exercise.\n\n# Next\n\nI know this is a long post, I hope you have tried this and successfully deployed a script to CKB. In the next post, we will introduce an important topic: how to issue your own user defined tokens(UDT) on CKB. The best part of UDTs on CKB, is that each user can store their UDTs in their own cells, which is different from ERC20 tokens on Ethereum, where everyone's token will have to live in the token issuer's single address. All of this can be achieved by using type scripts alone. If you are interested please stay tuned :)"},{"id":"intro-to-ckb-script-programming-3","metadata":{"permalink":"/blog/intro-to-ckb-script-programming-3","editUrl":"https://github.com/facebook/docusaurus/edit/main/website/blog/intro-to-script-3.md","source":"@site/blog/intro-to-script-3.md","title":"Introduction to CKB Script Programming 3: UDT","description":"CKB's cell model and VM enables many new use cases. However that doesn't mean we need to ditch existing ones. One common use in existing blockchains, is to issue new tokens with special purpose/meaning from the token issuer. In Ethereum, we call those ERC20 tokens, let's see how we can build a similar concept in CKB. To distinguish from ERC20, we call the tokens issued in CKB user defined token, or UDT for short.","date":"2019-09-06T00:00:00.000Z","tags":[],"readingTime":14.49,"hasTruncateMarker":false,"authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}],"frontMatter":{"title":"Introduction to CKB Script Programming 3: UDT","date":"2019-09-06","slug":"intro-to-ckb-script-programming-3","authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}]},"unlisted":false,"prevItem":{"title":"Introduction to CKB Script Programming 2: Script Basics","permalink":"/blog/intro-to-ckb-script-programming-2"},"nextItem":{"title":"Introduction to CKB Script Programming 4: WebAssembly on CKB","permalink":"/blog/intro-to-ckb-script-programming-4"}},"content":"CKB's cell model and VM enables many new use cases. However that doesn't mean we need to ditch existing ones. One common use in existing blockchains, is to issue new tokens with special purpose/meaning from the token issuer. In Ethereum, we call those ERC20 tokens, let's see how we can build a similar concept in CKB. To distinguish from ERC20, we call the tokens issued in CKB `user defined token`, or UDT for short.\n\nThis post is written based on current CKB Lina mainnet version now.\n\n# Data Model\n\nWhile Ethereum has a unique storage space for each contract account, CKB spreads data among multiple cells. A cell's lock & type script then tells which account the cell belongs to, as well as how you can interact with the cell. The consequence of this, is that unlike ERC20 which stores all token users' balances in the ERC20 contract's storage space, in CKB we will need a new design to store the balances of UDT users.\n\nWe could, of course, designate a special cell to keep the balances of all UDT users. This solution would look a lot like Ethereum's ERC20 design. But several problems arise:\n\n- The token issuer would have to provide storage space for keeping all the users' balances. As the number of user grows, the storage space would also grow, in CKB's economic model, this won't be an effective design.\n- Consider that updating a cell in CKB is essentially destroying the old cell and re-create a new one, having a single cell with all balances would create a bottleneck: every action which needs to update UDT balance would have to update the one and only cell. People will compete on using the cell.\n\nWhile there are solutions which can mitigate or even solve the above problems, we started to question the basic design here: does it really make sense to keep all UDTs in a single place? Once transferred, the UDTs really should belong to the receiver, why should the balance still be kept in a central place?\n\nThat leads to our proposed design here:\n\n1. A special type script denotes that the cell stores UDTs.\n2. The first 4 bytes of the cell data contains the amount of UDTs in current cell.\n\nThis design has several implications:\n\n- The storage cost for a UDT cell is always constant, it is irrelevant to the amount of UDTs stored in the cell.\n- A user can transfer either all or part of the UDTs in a cell to others\n- In practice, there might be numerous cells containing the same UDTs.\n- The lock script used to guard a UDT is decoupled from the UDT itself.\n\nEach token user then keeps their UDTs in their own cells. They are responsible for providing the storage space for the UDTs, and ensure their own tokens are secure. This way UDTs can truly belong to each individual UDT user.\n\nOne question remains here: if tokens are stored in numerous cells belonging to each user instead of a single place, how can we ensure the tokens are indeed created by token issuer? What if someone forges tokens on their own? In Ethereum, this is probably a problem, but as we shall see in this post, a type script in CKB can prevent all those attacks, ensuring your token is safe.\n\n# Writing the UDT Script\n\nGiven the above design, a minimal UDT type script should guard the following rules:\n\n- In a UDT transfer transaction, the sum of UDTs in the output cells should equal the sum of UDTs in the input cells.\n- Only the token issuer can generate new tokens in the initial token creation process.\n\nThis might sound a little ambitious, but we will see that with a type script and some CKB's unique design patterns, the eagle can be landed :P\n\nFor simplicity, we will write the UDT script here in pure JavaScript, while a C version might help in saving cycles, the functionality will be the same.\n\nFirst, we will need to loop through all input cells and gather the sum of UDTs:\n\n```\ndiff --git a/udt.js b/udt.js\nindex e69de29..4a20bd0 100644\n--- a/udt.js\n+++ b/udt.js\n@@ -0,0 +1,17 @@\n+var input_index = 0;\n+var input_coins = 0;\n+var buffer = new ArrayBuffer(4);\n+var ret = CKB.CODE.INDEX_OUT_OF_BOUND;\n+\n+while (true) {\n+  ret = CKB.raw_load_cell_data(buffer, 0, input_index, CKB.SOURCE.GROUP_INPUT);\n+  if (ret === CKB.CODE.INDEX_OUT_OF_BOUND) {\n+    break;\n+  }\n+  if (ret !== 4) {\n+    throw \"Invalid input cell!\";\n+  }\n+  var view = new DataView(buffer);\n+  input_coins += view.getUint32(0, true);\n+  input_index += 1;\n+}\n```\n\nAs explained in the previous post, CKB requires us to use a loop to iterate through all inputs in the same `group` and fetch the data. In C we would use `ckb_load_cell_data`, which is wrapped into a JS function `CKB.raw_load_cell_data`. As indicated by the ArrayBuffer, we are only interested in the first 4 bytes of the cell data, since those 4 bytes will contain the amount of UDTs.\n\nNote that here we perform a simple add operation on `input_coins`, this is very dangerous. We are doing it just for simplicity, in a production setting, you should check if the value will hold in a 32-bit integer value. Higher precision number types should be used if needed.\n\nSimilarly, we can fetch the sum of output coins and do the comparision:\n\n```\ndiff --git a/udt.js b/udt.js\nindex 4a20bd0..e02b993 100644\n--- a/udt.js\n+++ b/udt.js\n@@ -15,3 +15,23 @@ while (true) {\n   input_coins += view.getUint32(0);\n   input_index += 1;\n }\n+\n+var output_index = 0;\n+var output_coins = 0;\n+\n+while (true) {\n+  ret = CKB.raw_load_cell_data(buffer, 0, output_index, CKB.SOURCE.GROUP_OUTPUT);\n+  if (ret === CKB.CODE.INDEX_OUT_OF_BOUND) {\n+    break;\n+  }\n+  if (ret !== 4) {\n+    throw \"Invalid output cell!\";\n+  }\n+  var view = new DataView(buffer);\n+  output_coins += view.getUint32(0, true);\n+  output_index += 1;\n+}\n+\n+if (input_coins !== output_coins) {\n+  throw \"Input coins do not equal output coins!\";\n+}\n```\n\nThis is almost all we need to validate the first rule: the sum of UDTs in the output cells should equal the sum of UDTs in the input cells. In other words, with this type script now, no one will be able to forge new tokens. Isn't that wonderful?\n\nBut there's one quirk: when we say `no one` will be able to forge new tokens, we really mean `no one`, including the token issuer! This is no good, we need to add an exception so the token issuer can create the tokens first, but no one will be able to do that after. Is there a way to do that?\n\nYes there is! But the answer reads like a riddle, so please read this paragraph carefully if I lost you the first time: a type script consist of 2 parts: a code hash denoting the actual code, and args used by the type script. 2 type scripts with different args will be treated 2 different type scripts. The trick here, is to allow the token issuer to create a cell with a new type script, that no one will be able to create again, so if we put something in the args part that is not be able to included again, the problem will be solved.\n\nNow think about this problem: what cannot be included in a blockchain twice? An OutPoint in a transaction input! The first time we include an OutPoint as a transaction input, the referenced cell will be consumed, if someone later include it again, it will create a double-spending error, which is exactly what we use blockchain for.\n\nAnd we have the answer now! The full validation flow of a minimal UDT type script in CKB, is as follows:\n\n1. First gather the sum of all UDTs in the input cells and the sum of all UDTs in the output cells, if they are equaled, the type script exits with a success status.\n2. Check if the first argument of the type script matches the first OutPoint in current transaction, if they match, exit with a success status.\n3. Otherwise exit with a failure status\n\nIf you are still with me here, you will see that step 1 corresponds to a normal UDT transfer, while step 2 corresponds to the initial token creation process.\n\nThis is what we mean by CKB's unique design pattern: by using an input OutPoint as a script argument, we can create a unique script that cannot be forged again:\n\n1. If an attacker tries to use the same argument, the script will validate that the first input OutPoint in the transaction does not match the argument, hence invalidates the transaction;\n2. If the attacker tries to use the same argument and fill in the argument as the first input OutPoint, it will create a double-spent error, also invalidates the transaction;\n3. If the attacker tries to use a different argument, CKB will recognize that the different argument leads to a different type script, hence generating a different UDT.\n\nThis simple yet powerful pattern thus ensures the UDTs stay safe while enjoying the benefits that they can be transferred freely among many different cells. To the best of our knowledge, this pattern is not possible yet in many other blockchains which claim to be `flexible` or `programmable`.\n\nNow we can finally complete the UDT script:\n\n```bash\ndiff --git a/contract.js b/contract.js\ndeleted file mode 100644\nindex e69de29..0000000\ndiff --git a/udt.js b/udt.js\nindex e02b993..cd443bf 100644\n--- a/udt.js\n+++ b/udt.js\n@@ -1,3 +1,7 @@\n+if (CKB.ARGV.length !== 1) {\n+  throw \"Requires only one argument!\";\n+}\n+\n var input_index = 0;\n var input_coins = 0;\n var buffer = new ArrayBuffer(4);\n@@ -33,5 +37,17 @@ while (true) {\n }\n\n if (input_coins !== output_coins) {\n-  throw \"Input coins do not equal output coins!\";\n+  if (!((input_index === 0) && (output_index === 1))) {\n+    throw \"Invalid token issuing mode!\";\n+  }\n+  var first_input = CKB.load_input(0, 0, CKB.SOURCE.INPUT);\n+  if (typeof first_input === \"number\") {\n+    throw \"Cannot fetch the first input\";\n+  }\n+  var hex_input_outpoint = Array.prototype.map\n+   .call(new Uint8Array(first_input), function (x) {\n+     return (\"00\" + x.toString(16)).slice(-2);\n+   })\n+   .join(\"\")\n+   .slice(16); // remove the first 8 bytes of since\n+  var outpoint_arg = new TextDecoder().decode(CKB.ARGV[0]);\n+  if (outpoint_arg != hex_input_outpoint) {\n+    throw \"Invalid creation argument!\";\n+  }\n }\n```\n\nAnd that's it, with 53 lines of code or 1372 bytes, we've completed a minimal UDT type script in CKB. Notice I don't even use a minimizer here, with any decent JS minimizer, we should be able to get a much more compact type script. Of course this is a production ready script, but it suffices to show a simple script is enough to handle important tasks in CKB.\n\n# Deploying to CKB\n\nI'm not like [some other organizations](https://hacks.mozilla.org/2019/09/debugging-webassembly-outside-of-the-browser/) who prefer to only show you a video and a provocative post which hide how they did it and the accompanying problems. I believe no post is fun without actual code and steps to play with it. And here's how you can use the above UDT script on CKB:\n\nIn case you might need it, here's the full UDT script without diff format:\n\n```bash\n$ cat udt.js\nif (CKB.ARGV.length !== 1) {\n  throw \"Requires only one argument!\";\n}\n\nvar input_index = 0;\nvar input_coins = 0;\nvar buffer = new ArrayBuffer(4);\nvar ret = CKB.CODE.INDEX_OUT_OF_BOUND;\n\nwhile (true) {\n  ret = CKB.raw_load_cell_data(buffer, 0, input_index, CKB.SOURCE.GROUP_INPUT);\n  if (ret === CKB.CODE.INDEX_OUT_OF_BOUND) {\n    break;\n  }\n  if (ret !== 4) {\n    throw \"Invalid input cell!\";\n  }\n  var view = new DataView(buffer);\n  input_coins += view.getUint32(0, true);\n  input_index += 1;\n}\n\nvar output_index = 0;\nvar output_coins = 0;\n\nwhile (true) {\n  ret = CKB.raw_load_cell_data(buffer, 0, output_index, CKB.SOURCE.GROUP_OUTPUT);\n  if (ret === CKB.CODE.INDEX_OUT_OF_BOUND) {\n    break;\n  }\n  if (ret !== 4) {\n    throw \"Invalid output cell!\";\n  }\n  var view = new DataView(buffer);\n  output_coins += view.getUint32(0, true);\n  output_index += 1;\n}\n\nif (input_coins !== output_coins) {\n  if (!((input_index === 0) && (output_index === 1))) {\n    throw \"Invalid token issuing mode!\";\n  }\n  var first_input = CKB.load_input(0, 0, CKB.SOURCE.INPUT);\n  if (typeof first_input === \"number\") {\n    throw \"Cannot fetch the first input\";\n  }\n  var hex_input_outpoint = Array.prototype.map\n    .call(new Uint8Array(first_input), function (x) {\n      return (\"00\" + x.toString(16)).slice(-2);\n    })\n    .join(\"\")\n    .slice(16); // remove the first 8 bytes of since\n  var outpoint_arg = new TextDecoder().decode(CKB.ARGV[0]);\n  if (outpoint_arg != hex_input_outpoint) {\n    throw \"Invalid creation argument!\";\n  }\n}\n```\n\nIn order to run JavaScript, let's first deploy duktape on CKB:\n\n```js\n> const fs = require(\"fs\");\n> const data = fs.readFileSync(\"../ckb-duktape/build/duktape\");\n> data.byteLength\n291440\n> let txSkeleton = lumos.helpers.TransactionSkeleton({ cellProvider: indexer });\n> txSkeleton = await lumos.commons.common.transfer(txSkeleton, [wallet.address], wallet2.address, \"292000\" + \"00000000\");\n> txSkeleton.update(\"outputs\", (outputs) => {\n  let cell = outputs.first();\n  cell.data = \"0x\" + data.toString(\"hex\");\n  return outputs;\n});\n> txSkeleton = await lumos.commons.common.payFeeByFeeRate(txSkeleton, [wallet.address], 1000);\n> txSkeleton = lumos.commons.common.prepareSigningEntries(txSkeleton);\n> const signatures = txSkeleton.get(\"signingEntries\").map((entry) => lumos.hd.key.signRecoverable(entry.message, wallet.privkey)).toArray();\n> const signedTx = lumos.helpers.sealTransaction(txSkeleton, signatures)\n> const duktapeTxHash = await rpc.sendTransaction(signedTx)\n> const duktapeCodeHash = lumos.utils.ckbHash(bytes.bytify(\"0x\" + data.toString(\"hex\")));\n```\n\nFirst, let's create a UDT with 1000000 tokens\n\n```js\n> let txSkeleton = lumos.helpers.TransactionSkeleton({ cellProvider: indexer });\n> txSkeleton = await lumos.commons.common.transfer(txSkeleton, [wallet.address], wallet2.address, \"1820\" + \"00000000\");\n> const blockchain = require(\"@ckb-lumos/base\").blockchain;\n> const outPointBuf = blockchain.OutPoint.pack(txSkeleton.get(\"inputs\").first().outPoint);\n> const outPointHex = Buffer.from(outPointBuf).toString(\"hex\");\n> outPointHex\n6a5f904a6f6ec270b6dde3add221aa8a82120e2e98ea6dac59160dd09359084201000000\n```\n\n`outPointHex` is part of the args in the Script, we will use a small tool to build the whole js Script args:\n\n```bash\ncd ckb-duktape\ndocker run --rm -it -v `pwd`:/code nervos/ckb-riscv-gnu-toolchain:xenial bash\nroot@0d31cad7a539:~# cd /code\nroot@0d31cad7a539:/code# ./build/native_args_assembler -f udt.js -t 6a5f904a6f6ec270b6dde3add221aa8a82120e2e98ea6dac59160dd09359084201000000\nb50600000c00000061060000000000004d06000069662028434b422e415247562e6c656e67746820213d3d203129207b0a20207468726f7720225265717569726573206f6e6c79206f6e6520617267756d656e7421223b0a7d0a0a76617220696e7075745f696e646578203d20303b0a76617220696e7075745f636f696e73203d20303b0a76617220627566666572203d206e65772041727261794275666665722834293b0a76617220726574203d20434b422e434f44452e494e4445585f4f55545f4f465f424f554e443b0a0a7768696c6520287472756529207b0a2020726574203d20434b422e7261775f6c6f61645f63656c6c5f64617461286275666665722c20302c20696e7075745f696e6465782c20434b422e534f555243452e47524f55505f494e505554293b0a202069662028726574203d3d3d20434b422e434f44452e494e4445585f4f55545f4f465f424f554e4429207b0a20202020627265616b3b0a20207d0a20206966202872657420213d3d203429207b0a202020207468726f772022496e76616c696420696e7075742063656c6c21223b0a20207d0a20207661722076696577203d206e657720446174615669657728627566666572293b0a2020696e7075745f636f696e73202b3d20766965772e67657455696e74333228302c2074727565293b0a2020696e7075745f696e646578202b3d20313b0a7d0a0a766172206f75747075745f696e646578203d20303b0a766172206f75747075745f636f696e73203d20303b0a0a7768696c6520287472756529207b0a2020726574203d20434b422e7261775f6c6f61645f63656c6c5f64617461280a202020206275666665722c0a20202020302c0a202020206f75747075745f696e6465782c0a20202020434b422e534f555243452e47524f55505f4f55545055540a2020293b0a202069662028726574203d3d3d20434b422e434f44452e494e4445585f4f55545f4f465f424f554e4429207b0a20202020627265616b3b0a20207d0a20206966202872657420213d3d203429207b0a20202020434b422e646562756728726574293b0a202020207468726f772022496e76616c6964206f75747075742063656c6c21223b0a20207d0a20207661722076696577203d206e657720446174615669657728627566666572293b0a20206f75747075745f636f696e73202b3d20766965772e67657455696e74333228302c2074727565293b0a20206f75747075745f696e646578202b3d20313b0a7d0a0a69662028696e7075745f636f696e7320213d3d206f75747075745f636f696e7329207b0a2020696620282128696e7075745f696e646578203d3d3d2030202626206f75747075745f696e646578203d3d3d20312929207b0a202020207468726f772022496e76616c696420746f6b656e2069737375696e67206d6f646521223b0a20207d0a20207661722066697273745f696e707574203d20434b422e6c6f61645f696e70757428302c20302c20434b422e534f555243452e494e505554293b0a202069662028747970656f662066697273745f696e707574203d3d3d20226e756d6265722229207b0a202020207468726f77202243616e6e6f742066657463682074686520666972737420696e707574223b0a20207d0a2020766172206865785f696e7075745f6f7574706f696e74203d2041727261792e70726f746f747970652e6d61700a202020202e63616c6c286e65772055696e743841727261792866697273745f696e707574292c2066756e6374696f6e20287829207b0a20202020202072657475726e202822303022202b20782e746f537472696e6728313629292e736c696365282d32293b0a202020207d290a202020202e6a6f696e282222290a202020202e736c696365283136293b202f2f2072656d6f7665207468652066697273742038206279746573206f662073696e63650a2020766172206f7574706f696e745f617267203d206e657720546578744465636f64657228292e6465636f646528434b422e415247565b305d293b0a2020696620286f7574706f696e745f61726720213d206865785f696e7075745f6f7574706f696e7429207b0a20202020434b422e6465627567286f7574706f696e745f617267290a20202020434b422e6465627567286865785f696e7075745f6f7574706f696e74290a202020207468726f772022496e76616c6964206372656174696f6e20617267756d656e7421223b0a20207d0a7d0a540000000800000048000000366135663930346136663665633237306236646465336164643232316161386138323132306532653938656136646163353931363064643039333539303834323031303030303030\n```\n\nCopy this args to the Script args:\n\n```js\n> let duktapeUdtTypeScript = {\n    codeHash: duktapeCodeHash,\n    hashType: \"data\",\n    args: \"0xb50600000c00000061060000000000004d06000069662028434b422e415247562e6c656e67746820213d3d203129207b0a20207468726f7720225265717569726573206f6e6c79206f6e6520617267756d656e7421223b0a7d0a0a76617220696e7075745f696e646578203d20303b0a76617220696e7075745f636f696e73203d20303b0a76617220627566666572203d206e65772041727261794275666665722834293b0a76617220726574203d20434b422e434f44452e494e4445585f4f55545f4f465f424f554e443b0a0a7768696c6520287472756529207b0a2020726574203d20434b422e7261775f6c6f61645f63656c6c5f64617461286275666665722c20302c20696e7075745f696e6465782c20434b422e534f555243452e47524f55505f494e505554293b0a202069662028726574203d3d3d20434b422e434f44452e494e4445585f4f55545f4f465f424f554e4429207b0a20202020627265616b3b0a20207d0a20206966202872657420213d3d203429207b0a202020207468726f772022496e76616c696420696e7075742063656c6c21223b0a20207d0a20207661722076696577203d206e657720446174615669657728627566666572293b0a2020696e7075745f636f696e73202b3d20766965772e67657455696e74333228302c2074727565293b0a2020696e7075745f696e646578202b3d20313b0a7d0a0a766172206f75747075745f696e646578203d20303b0a766172206f75747075745f636f696e73203d20303b0a0a7768696c6520287472756529207b0a2020726574203d20434b422e7261775f6c6f61645f63656c6c5f64617461280a202020206275666665722c0a20202020302c0a202020206f75747075745f696e6465782c0a20202020434b422e534f555243452e47524f55505f4f55545055540a2020293b0a202069662028726574203d3d3d20434b422e434f44452e494e4445585f4f55545f4f465f424f554e4429207b0a20202020627265616b3b0a20207d0a20206966202872657420213d3d203429207b0a20202020434b422e646562756728726574293b0a202020207468726f772022496e76616c6964206f75747075742063656c6c21223b0a20207d0a20207661722076696577203d206e657720446174615669657728627566666572293b0a20206f75747075745f636f696e73202b3d20766965772e67657455696e74333228302c2074727565293b0a20206f75747075745f696e646578202b3d20313b0a7d0a0a69662028696e7075745f636f696e7320213d3d206f75747075745f636f696e7329207b0a2020696620282128696e7075745f696e646578203d3d3d2030202626206f75747075745f696e646578203d3d3d20312929207b0a202020207468726f772022496e76616c696420746f6b656e2069737375696e67206d6f646521223b0a20207d0a20207661722066697273745f696e707574203d20434b422e6c6f61645f696e70757428302c20302c20434b422e534f555243452e494e505554293b0a202069662028747970656f662066697273745f696e707574203d3d3d20226e756d6265722229207b0a202020207468726f77202243616e6e6f742066657463682074686520666972737420696e707574223b0a20207d0a2020766172206865785f696e7075745f6f7574706f696e74203d2041727261792e70726f746f747970652e6d61700a202020202e63616c6c286e65772055696e743841727261792866697273745f696e707574292c2066756e6374696f6e20287829207b0a20202020202072657475726e202822303022202b20782e746f537472696e6728313629292e736c696365282d32293b0a202020207d290a202020202e6a6f696e282222290a202020202e736c696365283136293b202f2f2072656d6f7665207468652066697273742038206279746573206f662073696e63650a2020766172206f7574706f696e745f617267203d206e657720546578744465636f64657228292e6465636f646528434b422e415247565b305d293b0a2020696620286f7574706f696e745f61726720213d206865785f696e7075745f6f7574706f696e7429207b0a20202020434b422e6465627567286f7574706f696e745f617267290a20202020434b422e6465627567286865785f696e7075745f6f7574706f696e74290a202020207468726f772022496e76616c6964206372656174696f6e20617267756d656e7421223b0a20207d0a7d0a540000000800000048000000366135663930346136663665633237306236646465336164643232316161386138323132306532653938656136646163353931363064643039333539303834323031303030303030\"\n  };\n> const bytes = require(\"@ckb-lumos/lumos/codec\").bytes;\n> const Uint32LE = require(\"@ckb-lumos/codec\").number.Uint32LE;\n> txSkeleton.update(\"outputs\", (outputs) => {\n  let cell = outputs.first();\n  cell.cellOutput.type = duktapeUdtTypeScript;\n  cell.data = bytes.hexify(Uint32LE.pack(1000000));\n  return outputs;\n});\n> txSkeleton = lumos.helpers.addCellDep(txSkeleton, {\n  outPoint: {\n    txHash: duktapeTxHash,\n    index: \"0x0\"\n  },\n  depType: \"code\"\n})\n> txSkeleton = await lumos.commons.common.payFeeByFeeRate(txSkeleton, [wallet.address], 3000);\n> txSkeleton = lumos.commons.common.prepareSigningEntries(txSkeleton);\n> const signatures = txSkeleton.get(\"signingEntries\").map((entry) => lumos.hd.key.signRecoverable(entry.message, wallet.privkey)).toArray();\n> const signedTx = lumos.helpers.sealTransaction(txSkeleton, signatures)\n> const rootUdtTxHash = await rpc.sendTransaction(signedTx)\n```\n\nIf we tried to submit the same transaction again, double-spent error will prevent us from forging the same token:\n\n```js\nawait rpc.sendTransaction(signedTx)\nCKB::RPCError: jsonrpc error: {:code=>-3, :message=>\"UnresolvableTransaction(Dead(OutPoint(0x0b607e9599f23a8140d428bd24880e5079de1f0ee931618b2f84decf2600383601000000)))\"}\n```\n\nAnd no matter how we tried, we cannot create another cell which forges the same UDT token.\n\nNow we can try transfering UDTs to another account. First let's try creating one which has more output UDTs than input UDTs\n\n```js\n> let inputOutpoint = {\n  txHash: rootUdtTxHash,\n  index: \"0x0\"\n}\n> let udtCellWithStatus = await rpc.getLiveCell(inputOutpoint, true);\n> let blockHash = (await rpc.getTransaction(rootUdtTxHash)).txStatus.blockHash;\n> let blockNumber = (await rpc.getHeader(blockHash)).number;\n> let input = {\n    outPoint: inputOutpoint,\n    data: udtCellWithStatus.cell.data.content,\n    cellOutput: udtCellWithStatus.cell.output,\n    blockNumber\n  }\n> let output = {\n  data: bytes.hexify(Uint32LE.pack(2000000)),\n  cellOutput: udtCellWithStatus.cell.output,\n}\n> let txSkeleton = lumos.helpers.TransactionSkeleton({ cellProvider: indexer });\n> txSkeleton = txSkeleton.update(\"inputs\", (inputs) => inputs.push(input));\n> txSkeleton = txSkeleton.update(\"outputs\", (outputs) => outputs.push(output));\n> txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => witnesses.push(\"0x55000000100000005500000055000000410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"));\n> txSkeleton = lumos.helpers.addCellDep(txSkeleton, {\n  outPoint: {\n    txHash: duktapeTxHash,\n    index: \"0x0\"\n  },\n  depType: \"code\"\n})\n> txSkeleton = lumos.helpers.addCellDep(txSkeleton, {\n  outPoint: {\n    txHash: lumos.config.TESTNET.SCRIPTS['SECP256K1_BLAKE160']['TX_HASH'],\n    index: lumos.config.TESTNET.SCRIPTS['SECP256K1_BLAKE160']['INDEX']\n  },\n  depType: lumos.config.TESTNET.SCRIPTS['SECP256K1_BLAKE160']['DEP_TYPE']\n})\n> txSkeleton = await lumos.commons.common.payFeeByFeeRate(txSkeleton, [wallet2.address], 3000);\n> txSkeleton = lumos.commons.common.prepareSigningEntries(txSkeleton);\n> let signatures = txSkeleton.get(\"signingEntries\").map((entry) => lumos.hd.key.signRecoverable(entry.message, wallet2.privkey)).toArray();\n> let signedTx = lumos.helpers.sealTransaction(txSkeleton, signatures)\n> await rpc.sendTransaction(signedTx)\nCKB::RPCError: jsonrpc error: {:code=>-3, :message=>\"InvalidTx(ScriptFailure(ValidationFailure(101)))\"}\n```\n\nHere we tried to send another user 2000000 UDTs, of course this should trigger an error since we are trying to forge more tokens. But with slight modification, we can show that a UDT transferring transaction works if you respect the sum verification rule:\n\n```js\n> txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n  let cell = outputs.first();\n  cell.cellOutput.type = input.cellOutput.type;\n  cell.data = bytes.hexify(Uint32LE.pack(1000000));\n  return outputs;\n});\n> txSkeleton = await lumos.commons.common.payFeeByFeeRate(txSkeleton, [wallet2.address], 3000);\n> txSkeleton = lumos.commons.common.prepareSigningEntries(txSkeleton);\n> signatures = txSkeleton.get(\"signingEntries\").map((entry) => lumos.hd.key.signRecoverable(entry.message, wallet2.privkey)).toArray();\n> signedTx = lumos.helpers.sealTransaction(txSkeleton, signatures)\n> let txHash = await rpc.sendTransaction(signedTx)\n```\n\n# Flexible Rules\n\nThe UDT script shown here serves just as an example, in reality, dapps might be more complicated and requires more functions. You are also free to include more features for your UDT scripts depending on your needs, some examples include:\n\n- Here we strictly ensure that the sum of output UDTs equals the sum of input UDTs, but in some cases, it might be enough just to ensure the sum of output UDTs does not exceed the sum of input UDTs. In order words, when not needed, a user can choose to burn the UDTs for the capacities.\n- The above UDT script doesn't allow issuing more tokens after the initial creation process, but there might be another type of UDT that allows more issurance from the token issuer. This is also possible on CKB, the actual way to solve this task, is left as an exercise here :)\n- Here we limit the script to only create one cell in the initial token creation process, it's also possible to create multiple cells to spread the usage in the initial token creation process.\n- While we only cover ERC20 here, ERC721 should also be totally possible.\n\nNotice those are just some examples, the actual ways of using CKB script are limitless here. We are more than happy to see cases where CKB dapp developers amaze us with interesting usage of CKB scripts."},{"id":"intro-to-ckb-script-programming-4","metadata":{"permalink":"/blog/intro-to-ckb-script-programming-4","editUrl":"https://github.com/facebook/docusaurus/edit/main/website/blog/intro-to-script-4.md","source":"@site/blog/intro-to-script-4.md","title":"Introduction to CKB Script Programming 4: WebAssembly on CKB","description":"Since we made the choice to build CKB's virtual machine with RISC-V, we've been getting a question almost everyday: why don't you build your virtual machine on WebAssembly like everyone else does?","date":"2019-10-09T00:00:00.000Z","tags":[],"readingTime":13.83,"hasTruncateMarker":false,"authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}],"frontMatter":{"title":"Introduction to CKB Script Programming 4: WebAssembly on CKB","date":"2019-10-09","slug":"intro-to-ckb-script-programming-4","authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}]},"unlisted":false,"prevItem":{"title":"Introduction to CKB Script Programming 3: UDT","permalink":"/blog/intro-to-ckb-script-programming-3"},"nextItem":{"title":"Introduction to CKB Script Programming 5: Debugging","permalink":"/blog/intro-to-ckb-script-programming-5"}},"content":"Since we made the choice to build CKB's virtual machine with RISC-V, we've been getting a question almost everyday: why don't you build your virtual machine on WebAssembly like everyone else does?\n\nThere're many reasons behind this choice, making it a perfect choice for another article or even a conference talk. But fundamentally there lies one important reason: building software is all about finding the right abstraction, and we believe RISC-V is a better abstraction than WebAssembly for public permissionless blockchain.\n\nWhile WebAssembly is already a huge advancement over higher level programming langauges as well as the first generation blockchain virtual machines, RISC-V works at a much lower level than WebAssembly, making it a more suitable choice for public blockchains which are designed to run for decades to come.\n\nBut that still leaves one question unanswered: a significant portion of the blockchain industry is betting on WebAssembly, contributing an (arguably) better ecosystem building on WebAssembly powered dapps. How can CKB compete with that? As mentioned above, RISC-V is actually a lower level of abstraction than WebAssembly, we can port existing WebAssembly programs, and run them on CKB VM directly. This way, we can enjoy the flexibility and stability provided by RISC-V, while also embracing the WebAssembly ecosystem.\n\nIn this article, we will show how you can run WebAssembly programs in CKB VM, we will also show that it actually has more benefits running this way than directly using a WebAssembly VM.\n\nPersonally, while I believe WebAssembly has some interesting features enabling different use cases, I don't believe WebAssembly has a better ecosystem in the blockchain space. If you look around, there are probably just 2 mature choices for building dapps in a WebAssembly-based blockchain: Rust, and AssemblyScript. People keep bragging about WebAssembly's ability to support arbitrary languages in a single abstract VM(I personally refuse to call WebAssembly low-level VM), but it really just comes down to one of the 2 choices here to build a real dapp. I think we probably have different definitions if we can call 2 supported languages a good VM ecosystem. There are some [other languages](https://github.com/tweag/asterius) playing catching up here, but they are not yet at stable phase to count as a richful ecosystem. While some [interesting langauges](https://github.com/forest-lang/forest-compiler) have potentials in a WebAssembly based environment, no one pays attention to support them. And if you look hard enough, it also remains a question if 2 different blockchains using WebAssembly can share contracts with each other. Of course one might say: \"well it's just a matter of time, given time more vibrant WebAssembly ecosystem will sprout\", but the same argument could apply anywhere: why given time, an ecosystem for RISC-V won't be better?\n\nBut enough for the rant, let's just assume for now, WebAssembly does have a blockchain ecosystem, we can show that the 2 widely used choices, AssemblyScript and Rust, are all supported in a CKB VM environment.\n\n# AssemblyScript\n\nI believe no words speak better than a demo you can play with. So let's try the official AssemblyScript and run the compiled program on CKB. We will just use the official example in AssemblyScript's [introduction page](https://docs.assemblyscript.org/):\n\n```\n$ cat fib.ts\nexport function fib(n: i32): i32 {\n  var a = 0, b = 1;\n    for (let i = 0; i < n; i++) {\n        let t = a + b; a = b; b = t;\n  }\n  return b;\n}\n```\n\nPlease refer to AssemblyScript's documentation on how to install it. For convenience, I have some steps that you can just copy-paste here.\n\n```\n$ git clone https://github.com/AssemblyScript/assemblyscript.git\n$ cd assemblyscript\n$ npm install\n$ bin/asc ../fib.ts -b ../fib.wasm -O3\n$ cd ..\n```\n\nWe have a compiled WebAssembly program to use here. What we can do then, is invoke a program named [wasm2c](https://github.com/WebAssembly/wabt/tree/master/wasm2c) to compile it to C source file, then compile it via a RISC-V compiler to a RISC-V program, and run it on CKB VM.\n\nI'm sure you would ask: but this is a hack! It sort of does a decompilation of the WASM program then make it work, you are cheating here. The answer to this question, is yes and no:\n\n- On the one hand, yes I'm cheating here, but the question I'm gonna raise in response is: all we should care, is the end result, if the result is good enough, why should we care if this is cheating? In addition, modern compiler is already complicated enough like a total black box, how can we be sure this decompilation will achieve worse result?\n- On the other hand, this is just one way of transforming WebAssembly into RISC-V. There're numerous other ways in which you can achieve the same result. We will come back to this in the Recap section later.\n\nLet's fire up `wasm2c` and transform the WebAssembly program:\n\n```\n$ git clone --recursive https://github.com/WebAssembly/wabt\n$ cd wabt\n$ mkdir build\n$ cd build\n$ cmake ..\n$ cmake --build .\n$ cd ../..\n$ wabt/bin/wasm2c fib.wasm -o fib.c\n```\n\nYou will see a pair of `fib.c` and `fib.h` file in current directory, they contain the transformation result of the WebAssembly program, and when compiled and called correctly, they will achieve the same feature as the WebAssembly program.\n\nWe can use a small wrapper C file to invoke the WebAssembly program:\n\n```\n$ cat main.c\n#include <stdio.h>\n#include <stdlib.h>\n\n#include \"fib.h\"\n\nint main(int argc, char** argv) {\n  if (argc < 2) return 2;\n\n  u8 x = atoi(argv[1]);\n\n  init();\n\n  u8 result = Z_fibZ_ii(x);\n\n  return result;\n}\n```\n\nThis just reads an integer from a CLI argument, invokes the fibonacci function in the WebAssembly program, then return the result. Let's try compile it first:\n\n```\n$ sudo docker run --rm -it -v `pwd`:/code nervos/ckb-riscv-gnu-toolchain:xenial bash\n(docker) $ cd /code\n(docker) $ riscv64-unknown-elf-gcc -o fib_riscv64 -O3 -g main.c fib.c /code/wabt/wasm2c/wasm-rt-impl.c -I /code/wabt/wasm2c\n/riscv/lib/gcc/riscv64-unknown-elf/8.3.0/../../../../riscv64-unknown-elf/bin/ld: /tmp/ccfUDYhE.o: in function `__retain':\n/code/fib.c:1602: undefined reference to `Z_envZ_abortZ_viiii'\n/riscv/lib/gcc/riscv64-unknown-elf/8.3.0/../../../../riscv64-unknown-elf/bin/ld: /tmp/ccfUDYhE.o: in function `i32_load':\n/code/fib.c:42: undefined reference to `Z_envZ_abortZ_viiii'\n/riscv/lib/gcc/riscv64-unknown-elf/8.3.0/../../../../riscv64-unknown-elf/bin/ld: /tmp/ccfUDYhE.o: in function `f17':\n/code/fib.c:1564: undefined reference to `Z_envZ_abortZ_viiii'\n/riscv/lib/gcc/riscv64-unknown-elf/8.3.0/../../../../riscv64-unknown-elf/bin/ld: /code/fib.c:1564: undefined reference to `Z_envZ_abortZ_viiii'\n/riscv/lib/gcc/riscv64-unknown-elf/8.3.0/../../../../riscv64-unknown-elf/bin/ld: /tmp/ccfUDYhE.o: in function `f6':\n/code/fib.c:1011: undefined reference to `Z_envZ_abortZ_viiii'\n/riscv/lib/gcc/riscv64-unknown-elf/8.3.0/../../../../riscv64-unknown-elf/bin/ld: /tmp/ccfUDYhE.o:/code/fib.c:1012: more undefined references to `Z_envZ_abortZ_viiii' follow\ncollect2: error: ld returned 1 exit status\n(docker) $ exit\n```\n\nAs shown above, there's an error here. It tells us there's an `Z_envZ_abortZ_viiii` function not defined. Let's dive into why this happened.\n\nFirst, let's transform the original WebAssembly file into a human readable form:\n\n```\n$ wabt/bin/wasm2wat fib.wasm -o fib.wast\n$ cat fib.wast | grep \"(import\"\n(import \"env\" \"abort\" (func (;0;) (type 2)))\n```\n\nSo the problem is that WebAssembly can import external functions, when invoking, provides additional functionalities. In fact, the famous [WASI](https://wasi.dev/) is implemented based on the `import` feature. Later we shall see `import` can be used to implement more interesting features that are not possible in WebAssembly based blockchain virtual machines.\n\nFor now, let's provide an abort implementation to fix the error:\n\n```\n$ cat main.c\n#include <stdio.h>\n#include <stdlib.h>\n\n#include \"fib.h\"\n\nvoid (*Z_envZ_abortZ_viiii)(u32, u32, u32, u32);\n\nvoid env_abort(u32 a, u32 b, u32 c, u32 d) {\n  abort();\n}\n\nint main(int argc, char** argv) {\n  if (argc < 2) return 2;\n\n  u8 x = atoi(argv[1]);\n\n  Z_envZ_abortZ_viiii = &env_abort;\n\n  init();\n\n  u8 result = Z_fibZ_ii(x);\n\n  return result;\n}\n$ sudo docker run --rm -it -v `pwd`:/code nervos/ckb-riscv-gnu-toolchain:xenial bash\n(docker) $ cd /code\n(docker) $ riscv64-unknown-elf-gcc -o fib_riscv64 -O3 -g main.c fib.c /code/wabt/wasm2c/wasm-rt-impl.c -I /code/wabt/wasm2c\n(docker) $ exit\n```\n\nOf course you can test the compiled `fib_riscv64` program on CKB. But as a trick, there's a simple CKB VM [binary](https://github.com/nervosnetwork/ckb-vm-test-suite/tree/master/binary/src) in the [test suite](https://github.com/nervosnetwork/ckb-vm-test-suite) we can use the run this particular program. It's worth mentioning that this CKB VM binary works slightly different from the VM in CKB. It suffices to test WebAssembly programs in current example. But for testing proper CKB script, you might want to use the newly built [standalone debugger](https://github.com/nervosnetwork/ckb-standalone-debugger), which follows all CKB semantics. Later posts will explain how the debugger works.\n\nLet's try compile the binary in test suite and run the program:\n\n```\n$ git clone --recursive https://github.com/nervosnetwork/ckb-vm-test-suite\n$ cd ckb-vm-test-suite\n$ git clone https://github.com/nervosnetwork/ckb-vm\n$ cd binary\n$ cargo build --release\n$ cd ../..\n$ ckb-vm-test-suite/binary/target/release/asm64 fib_riscv64 5\nError result: Ok(8)\n$ ckb-vm-test-suite/binary/target/release/asm64 fib_riscv64 10\nError result: Ok(89)\n```\n\nThe error here is slightly misleading, the binary will treat any non-zero result from the program as errors. Since the program tested return the fibonacci calculation result as the return value, the binary will treat the return value(which is most likely non-zero) as error, but we can see that the actual error value contains the correct fibonacci value.\n\nNow we proves AssemblyScript program indeed works on CKB VM! I'm sure more complicated programs might run into errors which need separate tweaking, but you already get the workflow and know where to look for when error happens :)\n\n# Rust\n\nWe've already seen simpler examples in the AssemblyScript part. Let's try something more interesting in the Rust part: can we do a whole signature verification in Rust code?\n\nTurns out yes we can! But this is signficantly more than what we can fit in a blog post. I've prepared a [demo project](https://github.com/nervosnetwork/wasm-secp256k1-test) showcasing this. It uses a pure Rust implemented [secp256k1 library](https://github.com/paritytech/libsecp256k1) to do signature verification. If you follow the instructions in the README, you can reproduce the exact steps of the following:\n\n- Compile a complicated Rust program into WebAssembly\n- Transform the WebAssembly program into RISC-V\n- Run the resulting RISC-V program on CKB VM\n\n# Enhancements to WebAssembly\n\nThere's one additional thing we want to mention: if you check out the `bindgen` branch of the [Rust secp256k1 demo repository](https://github.com/nervosnetwork/wasm-secp256k1-test/tree/bindgen), and try the same steps, you will run into the following errors:\n\n```\n/riscv/lib/gcc/riscv64-unknown-elf/8.3.0/../../../../riscv64-unknown-elf/bin/ld: /tmp/ccYMiL3C.o: in function `core::result::unwrap_failed':\n/code/secp.c:342: undefined reference to `Z___wbindgen_placeholder__Z___wbindgen_describeZ_vi'\n/riscv/lib/gcc/riscv64-unknown-elf/8.3.0/../../../../riscv64-unknown-elf/bin/ld: /code/secp.c:344: undefined reference to `Z___wbindgen_placeholder__Z___wbindgen_describeZ_vi'\n/riscv/lib/gcc/riscv64-unknown-elf/8.3.0/../../../../riscv64-unknown-elf/bin/ld: /code/secp.c:344: undefined reference to `Z___wbindgen_placeholder__Z___wbindgen_describeZ_vi'\n/riscv/lib/gcc/riscv64-unknown-elf/8.3.0/../../../../riscv64-unknown-elf/bin/ld: /code/secp.c:347: undefined reference to `Z___wbindgen_placeholder__Z___wbindgen_describeZ_vi'\n/riscv/lib/gcc/riscv64-unknown-elf/8.3.0/../../../../riscv64-unknown-elf/bin/ld: /code/secp.c:350: undefined reference to `Z___wbindgen_placeholder__Z___wbindgen_describeZ_vi'\n/riscv/lib/gcc/riscv64-unknown-elf/8.3.0/../../../../riscv64-unknown-elf/bin/ld: /tmp/ccYMiL3C.o:/code/secp.c:353: more undefined references to `Z___wbindgen_placeholder__Z___wbindgen_describeZ_vi' follow\n/riscv/lib/gcc/riscv64-unknown-elf/8.3.0/../../../../riscv64-unknown-elf/bin/ld: /tmp/ccYMiL3C.o: in function `i32_store':\n/code/secp.c:56: undefined reference to `Z___wbindgen_anyref_xform__Z___wbindgen_anyref_table_set_nullZ_vi'\n/riscv/lib/gcc/riscv64-unknown-elf/8.3.0/../../../../riscv64-unknown-elf/bin/ld: /tmp/ccYMiL3C.o: in function `i32_load':\n/code/secp.c:42: undefined reference to `Z___wbindgen_anyref_xform__Z___wbindgen_anyref_table_set_nullZ_vi'\n/riscv/lib/gcc/riscv64-unknown-elf/8.3.0/../../../../riscv64-unknown-elf/bin/ld: /tmp/ccYMiL3C.o: in function `i32_store':\n/code/secp.c:56: undefined reference to `Z___wbindgen_anyref_xform__Z___wbindgen_anyref_table_set_nullZ_vi'\n/riscv/lib/gcc/riscv64-unknown-elf/8.3.0/../../../../riscv64-unknown-elf/bin/ld: /code/secp.c:56: undefined reference to `Z___wbindgen_anyref_xform__Z___wbindgen_anyref_table_set_nullZ_vi'\n/riscv/lib/gcc/riscv64-unknown-elf/8.3.0/../../../../riscv64-unknown-elf/bin/ld: /tmp/ccYMiL3C.o: in function `i32_load':\n/code/secp.c:42: undefined reference to `Z___wbindgen_anyref_xform__Z___wbindgen_anyref_table_growZ_ii'\n/riscv/lib/gcc/riscv64-unknown-elf/8.3.0/../../../../riscv64-unknown-elf/bin/ld: /code/secp.c:42: undefined reference to `Z___wbindgen_anyref_xform__Z___wbindgen_anyref_table_growZ_ii'\ncollect2: error: ld returned 1 exit status\n```\n\nFollowing the same steps in the AssemblyScript examples, we can certain `imports` in the WebAssembly file:\n\n```\n$ wabt/bin/wasm2wat wasm_secp256k1_test.wasm -o secp.wat\n$ cat secp.wat | grep \"(import\"\n(import \"__wbindgen_placeholder__\" \"__wbindgen_describe\" (func $__wbindgen_describe (type 3)))\n(import \"__wbindgen_anyref_xform__\" \"__wbindgen_anyref_table_grow\" (func $__wbindgen_anyref_table_grow (type 4)))\n(import \"__wbindgen_anyref_xform__\" \"__wbindgen_anyref_table_set_null\" (func $__wbindgen_anyref_table_set_null (type 3)))\n```\n\nThose are actually binding environment functions needed in the Rust [wasm-bindgen](https://github.com/rustwasm/wasm-bindgen). We will continue to work to provide the bindings compatible with CKB environment. But let's take a step back and think about this now: the environment functions needed here, are not part of WebAssembly standard. What's required in the standard, is that when an import entry cannot be found, the WebAssembly VM is expected to halt execution with an errors. To achieve different features, different WebAssembly based blockchains might inject different imports here, making it hard to write a WebAssembly program that's compatible across different blockchains.\n\nIn the CKB environment, however, we can attach any environment functions as we like, hence supporting all WebAssembly programs which are targeting different blockchains. What's more, we can use `imports` as we like to introduce new features to an existing WebAssembly programs, since the import functions are shipped together with the WebAssembly program, CKB itself doesn't have to do anything to support this, all the magic happens right within a single CKB script. For a WebAssembly powered blockchain, those environment functions are most likely to be fixed and part of the consensus rules, you cannot introduce new ones as you wish. Similarly, this tranformation based workflow on CKB will make it far easier to support new WebAssembly features, such as garbage collection, or threading, it really is just a matter of shipping the support features you need as part of your CKB script, there's no need to wait another 6 months for the next hardfork when a WebAssembly virtual machine gets updated, if it's updated.\n\n# It's About Ease of Implementation\n\nYou might have one question: \"I get it, you have WebAssembly on RISC-V, but I could also have RISC-V on WebAssembly! WebAssembly is flexible!\". In a sense, this is true, once a language or a VM surpasses a certain level of flexibility, it can be used to build many (even crazy) things. The first version of [jslinux](https://bellard.org/jslinux/tech.html) which emulates full x86 was even written in pure JavaScript! But the other side of the problem, is ease of implementation. Building WebAssembly on RISC-V feels more natural, since WebAssembly abstracts at a higher level with many high level features, such as higher level contrl flows, garbage collection, etc. RISC-V, on the other hand, really emulates what a real CPU can do, it is a very thin layer on top of the actual CPU running inside of the computer. So while both directions are possible indeed, certain features are easier to implement in the WebAssembly on RISC-V direction, while roadblocks might sit in front of you in the RISC-V on WebAssembly direction.\n\nOne alternative example is EVM, EVM has been advocating turing complete for years, but the sad truth is that it's close to impossible to build arbitrary complicated algorithsm on EVM: either the coding part is too difficult or gas consumption will be unreasonable. People have to come up with all kinds of hacks so as to introduce latest algorithms on EVM, we can only have reasonable blake2b algorithms in EVM when Istanbul hardfork lands. What about many other algorithms?\n\nAll of those reflect our rationale behind the RISC-V choice: we want to find the minimal layer on top of this generation's CPU architecture, and RISC-V is the most transparent model we can expose to the blockchain world while ensuring security and performance. Any different models, such as WebAssembly, EVM, etc., should be one layer on top of the RISC-V model, and can be naturally implemented via the RISC-V model. The other direction, however, might not feel so smooth at all.\n\n# Recap\n\nHere we demonstrated that you can run non-trivial WebAssembly programs on CKB VM. But we do want to point out this workflow is not without its problems. One gotcha is performance, our preliminary testing shows that the WebAssembly based secp256k1 demo runs 30 times slower than a similar C based implementation compiled directly to CKB VM. After some investigation, we believe this is due to the following problems\n\n- Due to how memory works in WebAssembly, wasm2c has to first put data segments in the code in plain C array, then when booting, allocate enough memory, then do memcpy to copy the data into the allocated memory. For the secp256k1 example, this means every boot of the program has to copy the 1MB pre-computed multiplication table. Combining with the fact that our RISC-V program now uses newlib, which contains a naive memcpy implementation optimized for code size over speed, this can significantly slow down the program.\n- While wasm2c can deliver good performance for simpler programs, for a sophisticated and heavily optimized algorithm like secp256k1, the transformation layer could mean that many optimization chances are lost, hence making it slower than a direct implementation compiled directly to RISC-V\n\nLuckily, the problems here are totally solvable. The above mentioned workflow is one way we can translate WebAssembly programs to RISC-V programs, but it's absolutely not the only way to achieve that. Like we mentioned above, the transformation layer hinders optimization opportunities, what if we bring in modern compilers to unleash all the possible optimizations here?\n\nThere is already [progress](https://github.com/wasmerio/wasmer/tree/master/lib/llvm-backend) being done which translates a WebAssembly program via LLVM into native code. The performance obtained here, is really good. Since LLVM 9 [officially supports](https://riscv.org/2019/09/llvm-9-releases-with-official-risc-v-target-support-asm-goto-clang-9-and-more-vincy-davis-packt-pub/) RISC-V now, it's perfectly possible to change the code so LLVM generates RISC-V assembly instead of x86_64 assembly. This way we can translate WebAssembly program via LLVM directly into a RISC-V program, enjoying all the advanced optimizations LLVM can performn on our code.\n\nAs a result, our current solution documented in this post shows this path is totally possible while achieving good enough performance for many existing cases(e.g., many type scripts can be written in Rust for safety, while the performance is not a big problem), this new LLVM solution can provide far better performance for the same workflow in the future. It's just a matter of time for us to find the time to work on this."},{"id":"intro-to-ckb-script-programming-5","metadata":{"permalink":"/blog/intro-to-ckb-script-programming-5","editUrl":"https://github.com/facebook/docusaurus/edit/main/website/blog/intro-to-script-5.md","source":"@site/blog/intro-to-script-5.md","title":"Introduction to CKB Script Programming 5: Debugging","description":"Due to the fact that CKB script works at a much lower level than other smart contracts, the debugging story for CKB, has been quite a mysterious one. In this post, we will show how one can debug CKB scripts. As you will find out, debugging a CKB script is not so different from debugging your everyday program.","date":"2019-10-18T00:00:00.000Z","tags":[],"readingTime":10.82,"hasTruncateMarker":false,"authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}],"frontMatter":{"title":"Introduction to CKB Script Programming 5: Debugging","date":"2019-10-18","slug":"intro-to-ckb-script-programming-5","authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}]},"unlisted":false,"prevItem":{"title":"Introduction to CKB Script Programming 4: WebAssembly on CKB","permalink":"/blog/intro-to-ckb-script-programming-4"},"nextItem":{"title":"Introduction to CKB Script Programming 6: Type ID","permalink":"/blog/intro-to-ckb-script-programming-6"}},"content":"Due to the fact that CKB script works at a much lower level than other smart contracts, the debugging story for CKB, has been quite a mysterious one. In this post, we will show how one can debug CKB scripts. As you will find out, debugging a CKB script is not so different from debugging your everyday program.\n\nThis post is written based on current CKB Lina mainnet version now.\n\n# Debugging C programs with GDB\n\nThe first solution to CKB script debugging, works with compiled languages such as C, Rust, etc. Perhaps you are used to writing C programs, and GDB is your best friend. You are wondering if debugging C programs with GDB is possible, and the answer, of course, is: yes, you can definitely debug your CKB script written in C via GDB! Let me show you how.\n\nFirst we have the same carrot example from my old posts:\n\n```c\n#include <memory.h>\n#include \"ckb_syscalls.h\"\n\nint main(int argc, char* argv[]) {\n  int ret;\n  size_t index = 0;\n  uint64_t len = 0;\n  unsigned char buffer[6];\n\n  while (1) {\n    len = 6;\n    memset(buffer, 0, 6);\n    ret = ckb_load_cell_data(buffer, &len, 0, index, CKB_SOURCE_OUTPUT);\n    if (ret == CKB_INDEX_OUT_OF_BOUND) {\n      break;\n    }\n\n    int cmp = memcmp(buffer, \"carrot\", 6);\n    if (cmp) {\n      return -1;\n    }\n\n    index++;\n  }\n\n  return 0;\n}\n```\n\nI've made 2 changes to it:\n\n- I've updated the script to make it compatible with CKB v0.23.0. In this version, we should be using `ckb_load_cell_data` to fetch cell data.\n- I've also introduced a slight bug to the code, so we can later try the debugging workflow. You might noticed it if you are familiar with C, but no need to worry if you missed it, I will explain it later.\n\nAs usual, let's use our official toolchain to compile it to RISC-V code:\n\n```bash\n$ ls\ncarrot.c\n$ git clone https://github.com/nervosnetwork/ckb-system-scripts\n$ cp ckb-system-scripts/c/ckb_*.h ./\n$ ls\ncarrot.c  ckb_consts.h  ckb_syscalls.h  ckb-system-scripts/\n$ sudo docker run --rm -it -v `pwd`:/code nervos/ckb-riscv-gnu-toolchain:bionic-20191012 bash\nroot@3efa454be9af:/# cd /code\nroot@3efa454be9af:/code# riscv64-unknown-elf-gcc carrot.c -g -o carrot\nroot@3efa454be9af:/code# exit\n```\n\nNotice when I compile the script, I added `-g` so as to generate debugging information which is quite useful in GDB. For a production script, you would almost always want to strip them out to save previous on-chain space.\n\nNow let's deploy the script to CKB. Have your CKB node running, and fire up to Javascript SDK:\n\n```js\n$ node\nWelcome to Node.js v20.12.0.\nType \".help\" for more information.\n>\n> const lumos = require(\"@ckb-lumos/lumos\");\n> const indexer = new lumos.Indexer(\"https://testnet.ckb.dev/rpc\");\n> const rpc = new lumos.RPC(\"https://testnet.ckb.dev/rpc\");\n> lumos.config.initializeConfig(lumos.config.TESTNET);\n> const wallet = {\n  address:\n    \"ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqvwg2cen8extgq8s5puft8vf40px3f599cytcyd8\",\n  privkey: \"0x6109170b275a09ad54877b82f7d9930f88cab5717d484fb4741ae9d1dd078cd6\",\n};\n> const wallet2 = {\n  address: \"ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsq2prryvze6fhufxkgjx35psh7w70k3hz7c3mtl4d\",\n  privkey: \"0xace08599f3174f4376ae51fdc30950d4f2d731440382bb0aa1b6b0bd3a9728cd\"\n}\n\n> const data = fs.readFileSync(\"carrot_bug\");\n> data.byteLength\n19760\n> let txSkeleton = lumos.helpers.TransactionSkeleton({ cellProvider: indexer });\n> txSkeleton = await lumos.commons.common.transfer(txSkeleton,[wallet.address],wallet2.address,\"19900\" + \"00000000\");\n> txSkeleton.update(\"outputs\", (outputs) => {\n  let cell = outputs.first();\n  cell.data = \"0x\" + data.toString(\"hex\");\n  return outputs;\n});\n> txSkeleton = await lumos.commons.common.payFeeByFeeRate(txSkeleton,[wallet.address],1000);\n> txSkeleton = lumos.commons.common.prepareSigningEntries(txSkeleton);\n> const signatures = txSkeleton.get(\"signingEntries\").map((entry) => lumos.hd.key.signRecoverable(entry.message, wallet.privkey)).toArray();\n> const signedTx = lumos.helpers.sealTransaction(txSkeleton, signatures)\n> const carrotTxHash = await rpc.sendTransaction(signedTx)\n```\n\nWith carrot script on blockchain, we can create a transaction to test the carrot script:\n\n```js\n> const carrotDataHash = lumos.utils.ckbHash(bytes.bytify(\"0x\" + data.toString(\"hex\")));\n> const carrotTypeScript =  {\n  codeHash: carrotDataHash,\n  hashType: \"data\",\n  args: \"0x\"\n};\n\n> let txSkeleton = lumos.helpers.TransactionSkeleton({ cellProvider: indexer });\n> txSkeleton = await lumos.commons.common.transfer(txSkeleton,[wallet.address],wallet2.address,\"100\" + \"00000000\");\n> txSkeleton.update(\"outputs\", (outputs) => {\n  let cell = outputs.first();\n  cell.cellOutput.type = carrotTypeScript;\n  return outputs;\n});\n> txSkeleton = lumos.helpers.addCellDep(txSkeleton, {\n  outPoint: {\n    txHash: carrotTxHash,\n    index: \"0x0\"\n  },\n  depType: \"code\"\n})\n> txSkeleton = await lumos.commons.common.payFeeByFeeRate(txSkeleton,[wallet.address],1000);\n> txSkeleton = lumos.commons.common.prepareSigningEntries(txSkeleton);\n> const signatures = txSkeleton.get(\"signingEntries\").map((entry) => lumos.hd.key.signRecoverable(entry.message, wallet.privkey)).toArray();\n> const signedTx = lumos.helpers.sealTransaction(txSkeleton, signatures)\n> const txHash = await rpc.sendTransaction(signedTx)\n\nUncaught:\nResponseException [Error]: {\"code\":-302,\"message\":\"TransactionFailedToVerify: Verification failed Script(TransactionScriptError { source: Outputs[0].Type, cause: ValidationFailure: see error code -1 on page..\n```\n\nIf you checked the transaction carefully, you will noticed that none of the output cells has data starting with `carrot`. However we still run into validation failure, it means our script must have a bug. Previously, you would run out of options here, you might go back to check the code, hoping you can see where it goes wrong. But that is not necessary now, you can just dump the transaction here, and feed it into a standalone CKB debugger to debug it!\n\nFirst, let's dump the transaction together with its surrounding environment, into a local file:\n\n```js\n> let txJson = rpc.paramsFormatter.toRawTransaction(lumos.helpers.createTransactionFromSkeleton(txSkeleton))\n> fs.writeFileSync('failed-tx.json', JSON.stringify(txJson, null, 2))\n```\n\nYou will need [ckb-transaction-dumper](https://github.com/nervosnetwork/ckb-transaction-dumper) to convert the `failed-tx.json` to a dump transaction:\n\n```bash\n$ ckb-transaction-dumper -t failed-tx.json -o carrot.json\n```\n\nNow let's try [ckb-standalone-debugger](https://github.com/nervosnetwork/ckb-standalone-debugger):\n\n```bash\n$ cargo install --git https://github.com/nervosnetwork/ckb-standalone-debugger ckb-debugger\n$ ckb-debugger --mode gdb --gdb-listen 0.0.0.0:2000 --tx-file carrot.json --cell-index 0 --cell-type output --script-group-type type\n```\n\nKeep in mind you might need to tweak the path to `carrot.json` depending on your environment. Now we can try connecting to the debugger via GDB in a differnet terminal:\n\n```\n$ sudo docker run --rm -it -v `pwd`:/code nervos/ckb-riscv-gnu-toolchain:bionic-20191012 bash\nroot@66e3b39e0dfd:/# cd /code\nroot@66e3b39e0dfd:/code# riscv64-unknown-elf-gdb carrot\nGNU gdb (GDB) 8.3.0.20190516-git\nCopyright (C) 2019 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nType \"show copying\" and \"show warranty\" for details.\nThis GDB was configured as \"--host=x86_64-pc-linux-gnu --target=riscv64-unknown-elf\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n    <http://www.gnu.org/software/gdb/documentation/>.\n\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from carrot...\n(gdb) target remote 192.168.1.230:2000\nRemote debugging using 192.168.1.230:2000\n0x00000000000100c6 in _start ()\n(gdb)\n```\n\nNotice `192.168.1.230`, is the IP address of my workstation in my local network. It's very likely you need to adjust that, since your computer might have a different IP address. Now we can try a normal GDB debugging session:\n\n```\n(gdb) b main\nBreakpoint 1 at 0x106b0: file carrot.c, line 6.\n(gdb) c\nContinuing.\n\nBreakpoint 1, main (argc=0, argv=0x400000) at carrot.c:6\n6         size_t index = 0;\n(gdb) n\n7         uint64_t len = 0;\n(gdb) n\n11          len = 6;\n(gdb) n\n12          memset(buffer, 0, 6);\n(gdb) n\n13          ret = ckb_load_cell_data(buffer, &len, 0, index, CKB_SOURCE_OUTPUT);\n(gdb) n\n14          if (ret == CKB_INDEX_OUT_OF_BOUND) {\n(gdb) n\n18          int cmp = memcmp(buffer, \"carrot\", 6);\n(gdb) n\n19          if (cmp) {\n(gdb) p cmp\n$1 = -99\n(gdb) p buffer[0]\n$2 = 0 '\\000'\n(gdb) n\n20            return -1;\n```\n\nHere we can see where it goes wrong: the first byte in `buffer` has value `0`, which is different from `c`, hence our buffer is different from `carrot`. But instead of jumping to next iteration, the condition `if (cmp) {` jumps to the true case, where `-1` is returned, indicating a match to `carrot`! And the reason to this, is that `memcmp` would return `0` when the 2 buffers are equal, and non-zero value when they are not. But instead of testing the return value of `memcmp` is 0, we directly use it in the `if` condition, since C would treat any non-zero value as true, `-99` in this case would be treated as true. This is a typical C mistake for beginners, I hope you will never run into it :)\n\nNow we know the reason, it will be a trivial task to fix the bug in the carrot script, but what you just see here, is that we manage to dump the runtime state of an errored transaction from CKB, then debug it via GDB, which is a common tool in the industry! And your existing workflows and tools on top of GDB can also work here, isn't that beautiful?\n\n# REPL based Development/Debugging\n\nHowever, GDB is only one part of the story in modern software development. Dynamic languages have largely taken the landscape, and many programmers are used to REPL baesd development/debugging workflow. This is totally different from GDB in a compiled languages, basically what you get is a running environment, and you can type in any code you want to interact with the environment, getting different results. As we will show here, CKB also has support for this type of development/debugging workflow :P\n\nHere we will use the [ckb-duktape](https://github.com/nervosnetwork/ckb-duktape) showcasing a REPL in JavaScript. But keep in mind this is merely a demo showing the workflow, there's nothing preventing you from porting your favorite dynamic languages(whether it's Ruby, Python, Lisp, etc.) to CKB, and start a REPL for that language.\n\nFirst let's try compiling duktape:\n\n```bash\n$ git clone https://github.com/nervosnetwork/ckb-duktape\n$ cd ckb-duktape\n$ sudo docker run --rm -it -v `pwd`:/code nervos/ckb-riscv-gnu-toolchain:bionic-20191012 bash\nroot@982d1e906b76:/# cd /code\nroot@982d1e906b76:/code# make\nriscv64-unknown-elf-gcc -Os -DCKB_NO_MMU -D__riscv_soft_float -D__riscv_float_abi_soft -Iduktape -Ic -Wall -Werror c/entry.c -c -o build/entry.o\nriscv64-unknown-elf-gcc -Os -DCKB_NO_MMU -D__riscv_soft_float -D__riscv_float_abi_soft -Iduktape -Ic -Wall -Werror duktape/duktape.c -c -o build/duktape.o\nriscv64-unknown-elf-gcc build/entry.o build/duktape.o -o build/duktape -lm -Wl,-static -fdata-sections -ffunction-sections -Wl,--gc-sections -Wl,-s\nriscv64-unknown-elf-gcc -Os -DCKB_NO_MMU -D__riscv_soft_float -D__riscv_float_abi_soft -Iduktape -Ic -Wall -Werror c/repl.c -c -o build/repl.o\nriscv64-unknown-elf-gcc build/repl.o build/duktape.o -o build/repl -lm -Wl,-static -fdata-sections -ffunction-sections -Wl,--gc-sections -Wl,-s\nroot@982d1e906b76:/code# exit\n```\n\nYou will need the `build/repl` binary generated here. Similar to the carrot example, let's first deploy duktape REPL binary on CKB:\n\n```js\n$ node\nWelcome to Node.js v20.12.0.\nType \".help\" for more information.\n>\n> const lumos = require(\"@ckb-lumos/lumos\");\n> const indexer = new lumos.Indexer(\"https://testnet.ckb.dev/rpc\");\n> const rpc = new lumos.RPC(\"https://testnet.ckb.dev/rpc\");\n> lumos.config.initializeConfig(lumos.config.TESTNET);\n> const wallet = {\n  address:\n    \"ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqvwg2cen8extgq8s5puft8vf40px3f599cytcyd8\",\n  privkey: \"0x6109170b275a09ad54877b82f7d9930f88cab5717d484fb4741ae9d1dd078cd6\",\n};\n> const wallet2 = {\n  address: \"ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsq2prryvze6fhufxkgjx35psh7w70k3hz7c3mtl4d\",\n  privkey: \"0xace08599f3174f4376ae51fdc30950d4f2d731440382bb0aa1b6b0bd3a9728cd\"\n}\n\n> const data = fs.readFileSync(\"./ckb-duktape/build/repl\");\n> data.byteLength\n306040\n> let txSkeleton = lumos.helpers.TransactionSkeleton({ cellProvider: indexer });\n> txSkeleton = await lumos.commons.common.transfer(txSkeleton,[wallet.address],wallet2.address,\"306240\" + \"00000000\");\n> txSkeleton.update(\"outputs\", (outputs) => {\n  let cell = outputs.first();\n  cell.data = \"0x\" + data.toString(\"hex\");\n  return outputs;\n});\n> txSkeleton = await lumos.commons.common.payFeeByFeeRate(txSkeleton,[wallet.address],1000);\n> txSkeleton = lumos.commons.common.prepareSigningEntries(txSkeleton);\n> const signatures = txSkeleton.get(\"signingEntries\").map((entry) => lumos.hd.key.signRecoverable(entry.message, wallet.privkey)).toArray();\n> const signedTx = lumos.helpers.sealTransaction(txSkeleton, signatures)\n> const duktapeReplTxHash = await rpc.sendTransaction(signedTx)\n```\n\nWe will also need to create a transaction containing the duktape script, I'm building a simpler one, but you are free to include more data so you can play with CKB:\n\n```bash\n> docker run --rm -it -v `pwd`:/code nervos/ckb-riscv-gnu-toolchain:xenial bash\n> cd /code\n> echo \"CKB.debug(\\\"I'm running in JS\\\")\" > test.js\n> ./build/native_args_assembler -f test.js\n370000000c00000033000000000000001f000000434b422e6465627567282249276d2072756e6e696e6720696e204a5322290a04000000\n```\n\n```js\n> const duktapeReplCodeHash = lumos.utils.ckbHash(bytes.bytify(\"0x\" + data.toString(\"hex\")));\n> const duktapeTypeScript = {\n  codeHash: duktapeReplCodeHash,\n  hashType: \"data\",\n  args: \"0x370000000c00000033000000000000001f000000434b422e6465627567282249276d2072756e6e696e6720696e204a5322290a04000000\",\n};\n> let txSkeleton = lumos.helpers.TransactionSkeleton({ cellProvider: indexer });\n> txSkeleton = await lumos.commons.common.transfer(txSkeleton,[wallet.address],wallet2.address,\"150\" + \"00000000\");\n> txSkeleton.update(\"outputs\", (outputs) => {\n  let cell = outputs.first();\n  cell.cellOutput.type = duktapeTypeScript;\n  return outputs;\n});\n> txSkeleton = lumos.helpers.addCellDep(txSkeleton, {\n  outPoint: {\n    txHash: duktapeReplTxHash,\n    index: \"0x0\",\n  },\n  depType: \"code\",\n});\n> txSkeleton = await lumos.commons.common.payFeeByFeeRate(txSkeleton,[wallet.address],1000);\n> txSkeleton = lumos.commons.common.prepareSigningEntries(txSkeleton);\n> const signatures = txSkeleton.get(\"signingEntries\").map((entry) => lumos.hd.key.signRecoverable(entry.message, wallet.privkey)).toArray();\n> const signedTx = lumos.helpers.sealTransaction(txSkeleton, signatures);\n> const txHash = await rpc.sendTransaction(signedTx);\n```\n\nLet's also dump it to file:\n\n```js\nlet txJson = rpc.paramsFormatter.toRawTransaction(\n  lumos.helpers.createTransactionFromSkeleton(txSkeleton)\n);\nfs.writeFileSync(\"duktape-tx.json\", JSON.stringify(txJson, null, 2));\n```\n\n```bash\nckb-transaction-dumper -t duktape-tx.json -o duktape.json\n```\n\nDifferent from last time, we don't need to start GDB, we can start the program directly:\n\n```bash\n$ ckb-debugger  --tx-file duktape.json --cell-index 0 --cell-type output --script-group-type type\nduk>\n```\n\nYou will see a `duk>` prompt for you to enter JS code! Again if you run into errors, check if you need to change to a different type script hash, or use the correct path to `duktape.json`. We can see normal JS code works here:\n\n```bash\nduk> print(1 + 2)\n3\n= undefined\nduk> function foo(a) { return a + 1; }\n= undefined\nduk> foo(123)\n= 124\n```\n\nThere're also CKB related functions you can use:\n\n```bash\nduk> var hash = CKB.load_script_hash()\n= undefined\nduk> function buf2hex(buffer) { return Array.prototype.map.call(new Uint8Array(buffer), function(x) { return ('00' + x.toString(16)).slice(-2); }).join(''); }\n= undefined\nduk> buf2hex(hash)\n= a8b79392c857e29cb283e452f2cd48a8e06c51af64be175e0fe0e2902c482837\n```\n\nNotice the script hash we get here is exactly the current executing type script hash! This verifies CKB syscalls do work here, we can also try more interesting stuff\n\n```bash\nduk> print(CKB.SOURCE.OUTPUT)\n2\n= undefined\nduk> print(CKB.CELL.CAPACITY)\n0\n= undefined\nduk> capacity_field = CKB.load_cell_by_field(0, 0, CKB.SOURCE.OUTPUT, CKB.CELL.CAPACITY)\n= [object ArrayBuffer]\nduk> buf2hex(capacity_field)\n= 00e40b5402000000\n```\n\nThis `00e40b5402000000` might looks slightly mysterious to you at first, but notice that RISC-V uses little endian, so if we reverse the byte order here, we would get `00000002540be400`, which is exactly `10000000000` in decimal. Also keep in mind that in CKB capacity is stored in shannons, so `10000000000` is exactly `100` bytes, which is the same amount of coins we want to transfer when we generate the transaction above! Now you can see how you can play with CKB in this duktape environment :)\n\n# Conclusion\n\nNow we've introduced 2 types of debugging experience in CKB, feel free to play with either one you like(or actually both of them). I can't wait to see all the amazing applications you can build with CKB :)"},{"id":"intro-to-ckb-script-programming-6","metadata":{"permalink":"/blog/intro-to-ckb-script-programming-6","editUrl":"https://github.com/facebook/docusaurus/edit/main/website/blog/intro-to-script-6.md","source":"@site/blog/intro-to-script-6.md","title":"Introduction to CKB Script Programming 6: Type ID","description":"You might noticed there's a hashtype field in CKB's Script structure. For simplicity, we've been ignoring that till now. This post will provide an introduction to the hashtype field, and the unique capability it can bring.","date":"2020-02-03T00:00:00.000Z","tags":[],"readingTime":13.595,"hasTruncateMarker":false,"authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}],"frontMatter":{"title":"Introduction to CKB Script Programming 6: Type ID","date":"2020-02-03","slug":"intro-to-ckb-script-programming-6","authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}]},"unlisted":false,"prevItem":{"title":"Introduction to CKB Script Programming 5: Debugging","permalink":"/blog/intro-to-ckb-script-programming-5"},"nextItem":{"title":"Introduction to CKB Script Programming 7: Advanced Duktape Examples","permalink":"/blog/intro-to-ckb-script-programming-7"}},"content":"You might noticed there's a `hash_type` field in CKB's Script structure. For simplicity, we've been ignoring that till now. This post will provide an introduction to the `hash_type` field, and the unique capability it can bring.\n\n# Problem\n\nIn the blockchain space, there's a pair of issues that everyone has to pick sides:\n\n### Upgradability\n\nCan I upgrade a smart contract after it's deployed on the blockchain? Suppose a smart contract gets widely adopted, then all of a sudden, someone notices a bug in the smart contract(sadly this will always happen in our industry), can we upgrade the smart contract to a fixed version without affecting all the users?\n\nA different scenario: as technology advances, there might be new algorithms that could be leveraged to build smart contracts that run faster. Can we upgrade existing smart contracts to benefit more users?\n\n### Determinism\n\nThis one has 2 parts:\n\n- Determinism A: if I pick a smart contract to guard my tokens, will my tokens stay safe(could be unlocked by me and only by me) in the future?\n- Determinism B: if I sign a transaction now, and send it later, will my transaction still be accepted by the blockchain?\n\nNote that a secure blockchain has more deterministic requirements than those mentioned here. I'm only including properties that relate to the discussed problem here.\n\n### Conflicts\n\nIf we think about it, we could find that there're always conflicts between upgradability and determinism:\n\n- If a smart contract could be upgraded, it might have different behaviors, hence enabling an attacker to unlock a cell, or disabling unlocking from the owner himself/herself.\n- If a smart contract could be upgraded, an already signed transaction might run into different behaviors, resulting it be rejected by the blockchain.\n\nHistorically, there is only one side you can pick, and most existing blockchains have picked the side of determinism. The \"code is law\" idea thus becomes very famous in the blockchain space. But we all know software design is all about tradeoffs. Given certain situation, it might make sense to sacrifice slight determinism, in exchange for the ease of upgradability. For example, a large organization might have special security team monitoring potential vulnerabilities in smart contracts use by them. By granting them the ability to upgrade smart contracts, they have their own control in fixing vulnerabilities instead of waiting on someone. In the meantime, determinism property A won't be an issue for them since they are in charge of their own cells and smart contracts.\n\nSo now the question is: can we enable this new possibility in CKB? It turns out we can and this whole mechanism is already deployed in current mainnet CKB! But to understand the whole mechanism in CKB, we have to first take a look at some other ideas that support this mechanism.\n\nNOTE: I'm sure you will ask: does this mean you will sacrifice determinism in CKB? Let me assure you this feature is totally optional in CKB, you can perfectly practice \"code is law\" principle in CKB like in other blockchains. We are just hoping this unique feature will provide new possibilities for people who really need it.\n\n# Write A Unique Type Script\n\nLet's first ask a question: how can we create a type script that ensures only one live cell in CKB can have that unique type script? By unique type script, we mean the whole type script structure, including code hash, hash type and args.\n\nNote that this question might seem irrelevant to script upgradability right now, but please bear with me, we will see how it will contribute to the final solution in CKB.\n\nNote if you have seen [my previous UDT article](../2019_09_06_introduction_to_ckb_script_programming_udt/), you might already realize there is a solution. But if you haven't, I do suggest to take a step back and think about how you can implement such a script on your own. It will be a really good learning experience.\n\nIf you are ready, here's the basic workflow of the script:\n\n1. Count how many output cells use current type script, if there's more than one cell with current type script, returns a failure return code;\n2. Count how many input cells use current type script, if there's one input cell with current type script, returns a success return code;\n3. Use CKB syscall to read the first OutPoint in current transaction;\n4. If the OutPoint data read match the `args` part of current type script, returns a success return code;\n5. Returns a failure return code otherwise.\n\nPutting in simple C code, the script would look like following:\n\n```c\n#include \"blockchain.h\"\n#include \"ckb_syscalls.h\"\n\n#define INPUT_SIZE 128\n#define SCRIPT_SIZE 32768\n\nint main() {\n  uint64_t len = 0;\n  int ret = ckb_load_cell(NULL, &len, 0, 1, CKB_SOURCE_GROUP_OUTPUT);\n  if (ret != CKB_INDEX_OUT_OF_BOUND) {\n    return -1;  /* 1 */\n  }\n\n  len = 0;\n  ret = ckb_load_cell(NULL, &len, 0, 0, CKB_SOURCE_GROUP_INPUT);\n  if (ret != CKB_INDEX_OUT_OF_BOUND) {\n    return 0;  /* 2 */\n  }\n\n  /* 3 */\n  unsigned char input[INPUT_SIZE];\n  uint64_t input_len = INPUT_SIZE;\n  ret = ckb_load_input(input, &input_len, 0, 0, CKB_SOURCE_INPUT);\n  if (ret != CKB_SUCCESS) {\n    return ret;\n  }\n  if (input_len > INPUT_SIZE) {\n    return -100;\n  }\n\n  unsigned char script[SCRIPT_SIZE];\n  len = SCRIPT_SIZE;\n  ret = ckb_load_script(script, &len, 0);\n  if (ret != CKB_SUCCESS) {\n    return ret;\n  }\n  if (len > SCRIPT_SIZE) {\n    return -101;\n  }\n  mol_seg_t script_seg;\n  script_seg.ptr = (uint8_t *)script;\n  script_seg.size = len;\n\n  if (MolReader_Script_verify(&script_seg, false) != MOL_OK) {\n    return -102;\n  }\n\n  mol_seg_t args_seg = MolReader_Script_get_args(&script_seg);\n  mol_seg_t args_bytes_seg = MolReader_Bytes_raw_bytes(&args_seg);\n\n  if ((input_len == args_bytes_seg.size) &&\n      (memcmp(args_bytes_seg.ptr, input, input_len) == 0)) {\n    /* 4 */\n    return 0;\n  }\n  return -103;\n}\n```\n\nAs explained in the UDT post, attackers will be prevented in several different directions:\n\n1. If an attacker tries to create a cell with the exactly same type script, there will be 2 cases:\n   a. A valid transaction will have different OutPoint data in the first input from the type script args;\n   b. If the user tries to duplicate type script args as the first transaction input, CKB will signal a double-spent error;\n2. If the attacker tries to use a different type script args, it will be a different type script by definition.\n\nThis way, we can ensure a cell will have unique type script across all live cells in CKB. Considering each script has an associated hash, we will have a cell in CKB with its unique hash, or unique ID.\n\n# Resolving Scripts in CKB Transaction\n\nNow let's look at how CKB resolves the script to run before the `hash type` change:\n\n- CKB extracts `code hash` value from the script structure to run.\n- It loops through all dep cells, computes the hash of each dep cell data. If any dep cell data hash matches the specified `code hash`, CKB uses the data in the found dep cell as the script to run.\n- If no dep cell has data hash matching specified `code hash`, CKB results in a validation error.\n\nThe upgradability problem, in fact lies in the way we test for dep cells. Right now we are testing against data hash, and when a script is upgraded, a different hash will be generated, the matching would fail. That brings a question: can we test for dep cells using a different solution? Is there something that can stay unchanged when the script is changed? Considering the actual script to run lives in a cell, we can rephrase the question in a different way:\n\nIs there something that can stay unchanged when a cell's data get updated?\n\nWe can use a script structure! Since lock script is typically used for signature verification, we can use a type script for this problem. A type script can stay perfectly unchanged when a cell's data get changed. Hence we added `hash type` field to CKB's script structure, and modified the script resolving flow to the following:\n\n- For each dep cell, we extract the `test hash` based on `hash type` value in the script structure:\n  - If `hash type` is `data`, the dep cell's data hash is used as `test hash`\n  - If `hash type` is `type`, the dep cell's type script hash is used as `test hash`\n- CKB extracts `code hash` and `hash type` values from the script structure to run\n- If CKB finds a dep cell whose `test hash` matches specified `code hash`, CKB uses the data in the found dep cell as the scrip to run.\n- If no dep cell has `test hash` matching specified `code hash`, CKB results in a validation error.\n\nNotice the `hash type` used here, is the value belonging to the script to run, not the values of scripts in a dep cell. You could perfectly have 2 inputs in a transaction, one using `data` as `hash type`, the other using `type` as `hash type`. Either one of them will use its own correct way to locate the correct cell.\n\nThis way we have totally conquered determinism property A above, but for property B there will be some subtle affects, we will discuss those in more details below.\n\n# Putting Everything Together\n\nThere's still one problem unsolved, there might still be an attack:\n\n- A lock script L1 is stored in a cell C1 with type script T1\n- Alice guards her cells via lock script L1 using `hash type` as `type`, by definition, she fills her script structure's `code hash` field with the hash of type script T1\n- Bob creates a different cell C2 with a always success lock script L2, and also use the same type script T1\n- Now Bob can use C2 as a dep cell to unlock Alice's cell. CKB won't be able to distinguish that Alice wants to use C1, while Bob provides C2. Both C1 and C2 use T1 as type script\n\nThat teaches us a very important lesson: if you build a lock/type script and want people to leverage the upgradability property, you have to make sure to use a type script that is unique and unforgeable.\n\nLuckily, we just solved this problem! In the above we just developed a type script that can provide a unique type script hash in CKB. Combined together, this unique type script and `hash type` feature in CKB provide a way to upgrade already deployed smart contracts.\n\n# Chicken Egg Problem\n\nYou might have noticed that CKB already implements such a script, named a [type ID](https://github.com/nervosnetwork/ckb/blob/2145e4e3adee46670b3c9411c4ac547fc76e3a23/script/src/type_id.rs) script. But unlike the other system scripts, this one is implemented purely in Rust outside of CKB VM. I'm sure you will have this rant: you said CKB VM is flexible, don't you?\n\nI do have made that claim in many different occasions, and in fact I've shown you above a way to implement the type ID logic in C code that could be compiled and run in CKB VM. But the problem here, is that we are at a chicken-egg situation: if we implement the type ID script, should we make it upgradable? If so, what should we put in as its type script? And if it's not upgradable, how can we make sure it's free from bugs and all the other vulnerabilities?\n\nWe thought hard on this question, and it really seems the easiest and safest solution, is to implement the type ID script via pure Rust, so we can deal with any potential situations in a more mature and experienced way.\n\nBut unlike some other chains which keep provide discounts for builtin smart contracts, we do set a very large cycle cost on the type ID script to discourage the use of the builtin script. At mainnet, it is now set as 1 million cycles. This is much much larger than the same logic implemented on CKB VM, we are hoping one day there will be fully vetted and secure type ID script that everyone will use instead of using this builtin type ID script.\n\n# Trust Issue\n\nWe do want to mention this new feature is not without its drawbacks. You should really understand how it works and the tradeoffs involved before using it. This section tries to discuss all those considerations, but I do want to warn you it might still miss something, and you should use your own judgments.\n\n## Determinism Property A\n\nThe type ID solution does provide a way to solve property A: when a bug is discovered, it's possible to fix the smart contracts without affecting existing cells using the same smart contracts. But it does require certain considerations:\n\n### Ownership\n\nWith a type ID solution, people might be able to steal your coin by hacking the cell containing smart contracts you use. Since typical cells are guarded by only one or more signatures, some human errors could cause major problems. Fundamentally, it's a tradeoff situation:\n\n1. For the truly paranoid ones, they might want to stick to the old way of referencing a script via its own hash, not the type script hash of the containing cell. The \"code is law\" principle is fully enforced here. You will know exactly what can be used to unlock your cell, and it won't change anytime in the future.\n2. For people willing to sacrifice a little bit, they can gain the ability to upgrade existing smart contracts for different benefits. But please do make sure to fully understand the lock script of the cell containing the script you use.\n\nFor example, if you look at the deployed system scripts in CKB's mainnet, they all use type ID setup, but they all have their lock script's code hash set to all zeros, meaning no one gets to change the lock script easily via a signature. We want to make sure there's a need to change the default lock script, it will be via a fork agreed upon by the whole community, after all IMHO it really is the whole Nervos community that _owns_ CKB :P\n\nThere is some initial ideas that you can use to guard the script contained in a cell. For example, in addition to type ID logic, the type script can also contains other logics to validate the actual script contained in its cell. For example, formal analysis methods might be used, or certain test cases can be provided in which the type script run the actual script against. Only when the analysis or the test cases pass, will one be able to change script contained in a cell. Though I must say this is just some priliminary ideas, much research and development work needs to be done to make this a reality.\n\n### Availability\n\nA different issue with type ID, is availability of the script. When you have a cell using a script with `hash type` set as `data`, you are not worried someone might destroy the used script, you can always redeploy the script on-chain then unlock your cell.\n\nBut with a type ID solution, if something bad happens, and the cell with matching type script hash is destroyed, your cell will be locked forever, since your might never be able to build a cell with the same type script hash. There are some methods you can use, such as restricting the ability to destroy a cell with a type ID script but they all just mitigate the problem, not completely solving the problem.\n\n## Determinism Property B\n\nWe do want to mention that type ID does not provide a solution to property B. When you have a signed transaction, the behavior for this transaction won't be changed with the upgrade of one smart contract.\n\nThough there is way that the type ID solution might affect an already signed transaction: if a transaction uses a script from cell, and the cell gets updated, the transaction will be render invalidated, since the cell referenced in the original OutPoint is already spent. But one could argue with the old referencing solution, this problem might also happen.\n\n# Conclusion\n\nSo that's all I know about type ID at the moment :) It certainly has its drawbacks, but we do believe it can be proved very useful for certain users. For other users, this will be completely optional, and you are perfectly ignoring this feature at all. It's my hope that this new feature rarely seen in other blockchains, can provide a starting point to boost more possibilities."},{"id":"intro-to-ckb-script-programming-7","metadata":{"permalink":"/blog/intro-to-ckb-script-programming-7","editUrl":"https://github.com/facebook/docusaurus/edit/main/website/blog/intro-to-script-7.md","source":"@site/blog/intro-to-script-7.md","title":"Introduction to CKB Script Programming 7: Advanced Duktape Examples","description":"I've introduced duktape before, shown how you can run JavaScript code on Nervos CKB. But up to this point, the code I've shown is all single piece of code with very simple logic. What if we need to parse CKB data structures? What if I need external libraries in my script? In this post we will create a duktape-powered CKB script with the following requirements:","date":"2020-02-21T00:00:00.000Z","tags":[],"readingTime":30.615,"hasTruncateMarker":false,"authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}],"frontMatter":{"title":"Introduction to CKB Script Programming 7: Advanced Duktape Examples","date":"2020-02-21","slug":"intro-to-ckb-script-programming-7","authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}]},"unlisted":false,"prevItem":{"title":"Introduction to CKB Script Programming 6: Type ID","permalink":"/blog/intro-to-ckb-script-programming-6"},"nextItem":{"title":"Introduction to CKB Script Programming 8: Performant WASM","permalink":"/blog/intro-to-ckb-script-programming-8"}},"content":"I've introduced duktape before, shown how you can run JavaScript code on Nervos CKB. But up to this point, the code I've shown is all single piece of code with very simple logic. What if we need to parse CKB data structures? What if I need external libraries in my script? In this post we will create a duktape-powered CKB script with the following requirements:\n\n- External library dependency\n- Serialization/Deserialization of CKB data structures\n- Hashing\n\nBefore continuing on this post, I want to mention that the major work used in this post, is not written by me. The credit really goes to [one](https://github.com/Keith-CY) of my colleagues, who spent the effort putting together a very nice [template](https://github.com/xxuejie/ckb-duktape-template) we can use here, so we can have a streamlined CKB script development experience via JavaScript & duktape.\n\nThis post is written based on current CKB Lina mainnet version now.\n\n# Scope\n\nIn this post, we will write a simple [HTLC](https://en.bitcoin.it/wiki/Hash_Time_Locked_Contracts) script in JavaScript. Let me admit that I'm not the world's best teacher, there're many, many people who are better than me in [explaining HTLC](https://liquality.io/blog/hash-time-locked-contracts-htlcs-explained/~). So if you want to know what HTLC is, feel free to check other places first and come back here later.\n\nNow I will assume you know what HTLC is :P The HTLC script we create here, will be unlocked if either one of the following conditions is met:\n\n- A correct secret string, and a valid signature for public key A are provided;\n- Certain amount of time is passed, and a valid signature for public key B is provided\n\nAnd there are also several points made in the design of our HTLC script:\n\n1. For simplicity, we will use a trick to do signature verification here: instead of doing signature verification directly in JavaScript, we will rely on a separate cell to provide that a signature of the correct public key is provided. Later in this post we will explain the consequence and consideration regarding signature verifi2ation in JavaScript;\n2. A hash of the correct secret string will be included in `args` part of the CKB HTLC script structure, so when the script runs, it can run a hashing function on the provided secret string, testing if it is correct;\n3. The amount of time is always set as 100 blocks. To verify 100 blocks has passed, the unlock transaction should include a block header which at least 100 blocks after the cell to unlock is committed on chain.\n\nWith the design set in stone, let's jump to the implementation now.\n\n# Getting Our Hands Dirty\n\nWhile you are certainly welcome to craft the skeleton on your own, a decent [template](https://github.com/xxuejie/ckb-duktape-template) has already been prepared by one of my colleagues to save us the time. In this post, we will start from the already built template here:\n\n```\n$ export TOP=$(pwd)\n$ git clone https://github.com/xxuejie/ckb-duktape-template htlc-template\n$ cd htlc-template\n$ npm install\n# now you can try building the script first to ensure everything works\n$ npm run build\n```\n\nNow you can use your favorite editor to open `src/index.js` file in `htlc-template` repo, the current content of the file looks like this:\n\n```\n$ cd $TOP/htlc-template\n$ cat src/index.js\nconst { Molecule } = require('molecule-javascript')\nconst schema = require('../schema/blockchain-combined.json')\n\nconst names = schema.declarations.map(declaration => declaration.name)\nconst scriptTypeIndex = names.indexOf('Script')\nconst scriptType = schema.declarations[scriptTypeIndex]\n\n// Write your script logic here.\nCKB.debug(scriptType)\n```\n\nWe will modify this file to add the logic we need.\n\n## Script Debugger Preparation\n\nTo aid script programming, let's put together a debugging environment. The debugging environment will serve 2 purposes:\n\n- Prepare a complete transaction that can be loaded to CKB debugger;\n- Create transactions and relay them to CKB\n\nLet's first create the environment skeleton:\n\n```\n$ cd $TOP\n$ mkdir htlc-runner\n$ cd htlc-runner\n$ npm init\n$ npm install --save @nervosnetwork/ckb-sdk-core\n$ npm install --save @nervosnetwork/ckb-sdk-utils\n$ npm install --save molecule-javascript\n$ npm install --save crc32\n```\n\nNow let's create a transaction skeleton for debugger usage:\n\n```\n$ cd $TOP/htlc-runner\n$ cat skeleton.json\n{\n  \"mock_info\": {\n    \"inputs\": [\n      {\n        \"input\": {\n          \"previous_output\": {\n            \"tx_hash\": \"0xa98c57135830e1b91345948df6c4b8870828199a786b26f09f7dec4bc27a73da\",\n            \"index\": \"0x0\"\n          },\n          \"since\": \"0x0\"\n        },\n        \"output\": {\n          \"capacity\": \"0x4b9f96b00\",\n          \"lock\": {\n            \"args\": \"0x32e555f3ff8e135cece1351a6a2971518392c1e30375c1e006ad0ce8eac07947c219351b150b900e50a7039f1e448b844110927e5fd9bd30425806cb8ddff1fd970dd9a8\",\n            \"code_hash\": \"@DUKTAPE_HASH\",\n            \"hash_type\": \"data\"\n          },\n          \"type\": null\n        },\n        \"data\": \"0x\"\n      }\n    ],\n    \"cell_deps\": [\n      {\n        \"cell_dep\": {\n          \"out_point\": {\n            \"tx_hash\": \"0xfcd1b3ddcca92b1e49783769e9bf606112b3f8cf36b96cac05bf44edcf5377e6\",\n            \"index\": \"0x0\"\n          },\n          \"dep_type\": \"code\"\n        },\n        \"output\": {\n          \"capacity\": \"0x702198d000\",\n          \"lock\": {\n            \"args\": \"0x\",\n            \"code_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n            \"hash_type\": \"data\"\n          },\n          \"type\": null\n        },\n        \"data\": \"@SCRIPT_CODE\"\n      },\n      {\n        \"cell_dep\": {\n          \"out_point\": {\n            \"tx_hash\": \"0xfcd1b3ddcca92b1e49783769e9bf606112b3f8cf36b96cac05bf44edcf5377e6\",\n            \"index\": \"0x1\"\n          },\n          \"dep_type\": \"code\"\n        },\n        \"output\": {\n          \"capacity\": \"0x702198d000\",\n          \"lock\": {\n            \"args\": \"0x\",\n            \"code_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n            \"hash_type\": \"data\"\n          },\n          \"type\": null\n        },\n        \"data\": \"@DUKTAPE_CODE\"\n      }\n    ],\n    \"header_deps\": [\n      {\n        \"compact_target\": \"0x1a1e4c2f\",\n        \"hash\": \"0x51d199c4060f703344eab3c9b8794e6c60195ae9093986c35dba7c3486224409\",\n        \"number\": \"0xd8fc4\",\n        \"parent_hash\": \"0xc02e01eb57b205c6618c9870667ed90e13adb7e9a7ae00e7a780067a6bfa6a7b\",\n        \"nonce\": \"0xca8c7caa8100003400231b4f9d6e0300\",\n        \"timestamp\": \"0x17061eab69e\",\n        \"transactions_root\": \"0xffb0863f4ae1f3026ba99b2458de2fa69881f7508599e2ff1ee51a54c88b5f88\",\n        \"proposals_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        \"uncles_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        \"version\": \"0x0\",\n        \"epoch\": \"0x53f00fa000232\",\n        \"dao\": \"0x4bfe53a5a9bb9a30c88898b9dfe22300a58f2bafed47680000d3b9f5b6630107\"\n      }\n    ]\n  },\n  \"tx\": {\n    \"version\": \"0x0\",\n    \"cell_deps\": [\n      {\n        \"out_point\": {\n          \"tx_hash\": \"0xfcd1b3ddcca92b1e49783769e9bf606112b3f8cf36b96cac05bf44edcf5377e6\",\n          \"index\": \"0x0\"\n        },\n        \"dep_type\": \"code\"\n      },\n      {\n        \"out_point\": {\n          \"tx_hash\": \"0xfcd1b3ddcca92b1e49783769e9bf606112b3f8cf36b96cac05bf44edcf5377e6\",\n          \"index\": \"0x1\"\n        },\n        \"dep_type\": \"code\"\n      }\n    ],\n    \"header_deps\": [\n      \"0x51d199c4060f703344eab3c9b8794e6c60195ae9093986c35dba7c3486224409\"\n    ],\n    \"inputs\": [\n      {\n        \"previous_output\": {\n          \"tx_hash\": \"0xa98c57135830e1b91345948df6c4b8870828199a786b26f09f7dec4bc27a73da\",\n          \"index\": \"0x0\"\n        },\n        \"since\": \"0x0\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"capacity\": \"0x0\",\n        \"lock\": {\n          \"args\": \"0x\",\n          \"code_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n          \"hash_type\": \"data\"\n        },\n        \"type\": null\n      }\n    ],\n    \"witnesses\": [\n      \"0x210000000c0000001d0000000d0000006920616d20612073656372657400000000\"\n    ],\n    \"outputs_data\": [\n      \"0x\"\n    ]\n  }\n}\n```\n\nYou might notice that the skeleton skips dep cell data part, this is because as we develop the HTLC script, we might need to insert different contents in the skeleton. Hence a runner here is needed to prepare the skeleton to a full transaction, then run it via CKB debugger:\n\n```\n$ cd $TOP/htlc-runner\n$ cat runner.js\n#!/usr/bin/env node\n\nconst { Molecule } = require('molecule-javascript')\nconst schema = require('../htlc-template/schema/blockchain-combined.json')\nconst utils = require(\"@nervosnetwork/ckb-sdk-utils\")\nconst process = require('process')\nconst fs = require('fs')\n\nfunction blake2b(buffer) {\n  return utils.blake2b(32, null, null, utils.PERSONAL).update(buffer).digest('binary')\n}\n\nif (process.argv.length !== 4) {\n  console.log(`Usage: ${process.argv[1]} <duktape load0 binary> <js script>`)\n  process.exit(1)\n}\n\nconst duktape_binary = fs.readFileSync(process.argv[2])\nconst duktape_hash = blake2b(duktape_binary)\nconst js_script = fs.readFileSync(process.argv[3])\n\nconst data = fs.readFileSync('skeleton.json', 'utf8').\n      replace(\"@DUKTAPE_HASH\", utils.bytesToHex(duktape_hash)).\n      replace(\"@SCRIPT_CODE\", utils.bytesToHex(js_script)).\n      replace(\"@DUKTAPE_CODE\", utils.bytesToHex(duktape_binary))\n\nfs.writeFileSync('tx.json', data)\n\nconst resolved_tx = JSON.parse(data)\nconst json_lock_script = resolved_tx.mock_info.inputs[0].output.lock\nconst lock_script = {\n  codeHash: json_lock_script.code_hash,\n  hashType: json_lock_script.hash_type,\n  args: json_lock_script.args\n}\nconst lock_script_hash = blake2b(utils.hexToBytes(utils.serializeScript(lock_script)))\n\nconsole.log(`../ckb-standalone-debugger/bins/target/release/ckb-debugger -g lock -h ${utils.bytesToHex(lock_script_hash)} -t tx.json`)\n```\n\nWe need to compile duktape here:\n\n```\n$ cd $TOP\n$ git clone --recursive https://github.com/xxuejie/ckb-duktape\n$ cd ckb-duktape\n$ sudo docker run --rm -it -v `pwd`:/code nervos/ckb-riscv-gnu-toolchain:bionic-20191209 bash\nroot@18d4b1952624:/# cd /code\nroot@18d4b1952624:/code# make\nroot@18d4b1952624:/code# exit\n```\n\nAnd also CKB debugger:\n\n```\n$ cd $TOP\n$ git clone --recursive https://github.com/xxuejie/ckb-standalone-debugger\n$ cd ckb-standalone-debugger/bins\n$ cargo build --release\n```\n\nNow you can try running generated script:\n\n```\n$ cd $TOP/htlc-runner\n$ chmod +x runner.js\n$ RUST_LOG=debug `./runner.js ../ckb-duktape/build/load0 ../htlc-template/build/duktape.js`\nDEBUG:<unknown>: script group: Byte32(0x8209891745eb858abd6f5e53c99b4f101bca221bd150a2ece58a389b7b4f8fa7) DEBUG OUTPUT: [object Object]\nRun result: Ok(0)\n```\n\nThis will prepare the transaction to run from duktape binary and JS script, then run it via CKB debugger, debug outputs and final results will be printed to stdout.\n\nOr if you find a REPL more helpful, you can use the following line to execute the script and then start a REPL:\n\n```\n$ cd $TOP/htlc-runner\n$ RUST_LOG=debug `./runner.js ../ckb-duktape/build/repl0 ../htlc-template/build/duktape.js`\nduk>\n```\n\nWith the debugger ready, let's now start to implement the HTLC script.\n\n## Custom Arguments\n\nCKB provides 2 places that we can use to hold arguments to scripts running on CKB:\n\n- `args` field in `Script` structure\n- `witnesses` field in `Transaction` structure\n\nThe difference between them, is that `args` field is used to hold arguments that remains the same for all usage of the same script, while `witnesses` field is used for temporary arguments that are used in one-time transaction validation. One example here is: for a script that does signature verification, `args` field is typically used to store public key hash, while `witnesses` field is used to hold valid signature.\n\nFor maximum flexibility, both `args` field and each item in the `witnesses` array field are just plain raw bytes. It's up to dapp developers to design the actual format of data they want to hold. In our HTLC script, we will use [molecule](https://github.com/nervosnetwork/molecule) serialization format. Molecule is widely used in CKB. If you want to interact with CKB, such as reading certain cell/script used in the current transaction, you will need to deal with molecule format. Now this is a perfect opportunity to explain how one can interact with CKB via molecule in great details, hence we will implement the custom structure used by `args` and `witness` in molecule format. Though you are free to use any serialization format in your own scripts.\n\nLet's first create a file with the 2 needed data structure:\n\n```\n$ cd $TOP/htlc-template\n$ cat htlc.mol\narray Uint32 [byte; 4];\narray Byte32 [byte; 32];\nvector Bytes <byte>;\n\nstruct HtlcArgs {\n  a: Byte32,\n  b: Byte32,\n  hash: Uint32,\n}\n\ntable HtlcWitness {\n  s: Bytes,\n  i: Uint32,\n}\n```\n\nFor more information on molecule, please refer to the [RFC](https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0008-serialization/0008-serialization.md). Here we are defining 2 structures with following requirements:\n\n- `HtlcArgs` requires 2 32-byte long raw bytes for storing both public keys(later we shall the HTLC script here actually generalizes a bit from this design), and a single 32-bit integer value for storing hash. For simplicity, our HTLC will use CRC32 as the hash function, but in a production setting, this is far from a secure solution, and you should definitely use a proper secure hash function for this;\n- `HtlcWitness` has 2 optional(denoted by the `table` construct) arguments: it contains either a variable length string containing the secret string for HTLC, or a 32-bit integer value denoting the header to check for 100 block rule.\n\n## Deserializing in Molecule\n\nWith the molecule definition in place for the custom data structure, we need to first convert them into a format that can be consumed by the JavaScript implementation of molecule:\n\n```\n$ cd $TOP/htlc-template\n$ cargo install moleculec\n$ moleculec --language - --format json --schema-file htlc.mol > src/htlc.json\n$ npx moleculec-js -ns src/htlc.json > src/htlc-combined.json\n```\n\nNow we can fill in the code that loads current Script, and parses the serialized args into a valid structure:\n\n```\n$ cd $TOP/htlc-template\n$ cat src/index.js\nconst { Molecule } = require('molecule-javascript')\nconst schema = require('../schema/blockchain-combined.json')\n\nconst names = schema.declarations.map(declaration => declaration.name)\nconst scriptTypeIndex = names.indexOf('Script')\nconst scriptType = new Molecule(schema.declarations[scriptTypeIndex])\n\n// Write your script logic here.\nconst customSchema = require('./htlc-combined.json')\nconst customNames = customSchema.declarations.map(d => d.name)\n\nconst htlcArgsIndex = customNames.indexOf('HtlcArgs')\nconst htlcArgsType = new Molecule(customSchema.declarations[htlcArgsIndex])\n\nfunction bytesToHex(b) {\n  return \"0x\" + Array.prototype.map.call(\n    new Uint8Array(b),\n    function(x) {\n      return ('00' + x.toString(16)).slice(-2)\n    }\n  ).join('')\n}\n\nfunction hexStringArrayToHexString(a) {\n  let s = \"0x\";\n  for (let i = 0; i < a.length; i++) {\n    s = s + a[i].substr(2)\n  }\n  return s\n}\n\nconst current_script = scriptType.deserialize(bytesToHex(CKB.load_script(0)))\nconst args = hexStringArrayToHexString(current_script[2][1])\nconst htlcArgs = htlcArgsType.deserialize(args)\n\nCKB.debug(`a: ${hexStringArrayToHexString(htlcArgs[0][1])}`)\nCKB.debug(`b: ${hexStringArrayToHexString(htlcArgs[1][1])}`)\nCKB.debug(`c: ${hexStringArrayToHexString(htlcArgs[2][1])}`)\n```\n\nIf we ignore the bookkeeping code for a sec, what matters here, is that we first use CKB syscall to load script, parse script structure, then get args:\n\n```\nconst current_script = scriptType.deserialize(bytesToHex(CKB.load_script(0)))\nconst args = hexStringArrayToHexString(current_script[2][1])\nconst htlcArgs = htlcArgsType.deserialize(args)\n```\n\nWe assume script args contain serialized HtlcArgs structure defined above, then we apply similar method to exact them:\n\n```\nconst htlcArgs = htlcArgsType.deserialize(args)\n```\n\nI have already provided some meaningful data in the skeleton, so if we try to execute the script:\n\n```\n$ cd $TOP/htlc-template\n$ npm run build\n$ cd $TOP/htlc-runner\n$ RUST_LOG=debug `./runner.js ../ckb-duktape/build/load0 ../htlc-template/build/duktape.js`\nDEBUG:<unknown>: script group: Byte32(0x35ab3d033e66c426573ed4b7ce816e248cb042d908fd8cfe7bba27acb37fb108) DEBUG OUTPUT: a: 0x32e555f3ff8e135cece1351a6a2971518392c1e30375c1e006ad0ce8eac07947\nDEBUG:<unknown>: script group: Byte32(0x35ab3d033e66c426573ed4b7ce816e248cb042d908fd8cfe7bba27acb37fb108) DEBUG OUTPUT: b: 0xc219351b150b900e50a7039f1e448b844110927e5fd9bd30425806cb8ddff1fd\nDEBUG:<unknown>: script group: Byte32(0x35ab3d033e66c426573ed4b7ce816e248cb042d908fd8cfe7bba27acb37fb108) DEBUG OUTPUT: c: 0x970dd9a8\nRun result: Ok(0)\n```\n\nWe can find parsed results from debug logs.\n\n## Adding new library\n\nAnother thing I want to show here, is that you can include many libraries out there already on npm, assuming:\n\n- There's a ES5 version(or you can actually adjust the webpack pipeline yourself to add polyfills) of the library;\n- It is implemented purely in JavaScript without native code\n\nIn the HTLC script, I'm gonna add [crc32](https://github.com/beatgammit/crc32), and use crc32 to calculate secret string hash. I want to mention again here that CRC32 is never a secure hash function. We pick it out of simplicity, not security. In a production setting, you should really use a real secure hash function probably implemented natively rather than using JavaScript. But for now, crc32 is quite perfect for our tutorial :P\n\nLet's include crc32 in our template, and write some debugging code to test it:\n\n```\n$ cd $TOP/htlc-template\n$ npm install --save crc32\n$ cat src/index.js\nconst { Molecule } = require('molecule-javascript')\nconst schema = require('../schema/blockchain-combined.json')\n\nconst names = schema.declarations.map(declaration => declaration.name)\nconst scriptTypeIndex = names.indexOf('Script')\nconst scriptType = new Molecule(schema.declarations[scriptTypeIndex])\n\n// Write your script logic here.\nconst customSchema = require('./htlc-combined.json')\nconst customNames = customSchema.declarations.map(d => d.name)\n\nconst htlcArgsIndex = customNames.indexOf('HtlcArgs')\nconst htlcArgsType = new Molecule(customSchema.declarations[htlcArgsIndex])\n\nfunction bytesToHex(b) {\n  return \"0x\" + Array.prototype.map.call(\n    new Uint8Array(b),\n    function(x) {\n      return ('00' + x.toString(16)).slice(-2)\n    }\n  ).join('')\n}\n\nfunction hexStringArrayToHexString(a) {\n  let s = \"0x\";\n  for (let i = 0; i < a.length; i++) {\n    s = s + a[i].substr(2)\n  }\n  return s\n}\n\nconst current_script = scriptType.deserialize(bytesToHex(CKB.load_script(0)))\nconst args = hexStringArrayToHexString(current_script[2][1])\nconst htlcArgs = htlcArgsType.deserialize(args)\n\nCKB.debug(`c: ${hexStringArrayToHexString(htlcArgs[2][1])}`)\n\nconst crc32 = require('crc32')\nCKB.debug(crc32('i am a secret'))\n$ npm run build\n$ cd $TOP/htlc-runner\n$ RUST_LOG=debug `./runner.js ../ckb-duktape/build/load0 ../htlc-template/build/duktape.js`\nDEBUG:<unknown>: script group: Byte32(0x35ab3d033e66c426573ed4b7ce816e248cb042d908fd8cfe7bba27acb37fb108) DEBUG OUTPUT: c: 0x970dd9a8\nDEBUG:<unknown>: script group: Byte32(0x35ab3d033e66c426573ed4b7ce816e248cb042d908fd8cfe7bba27acb37fb108) DEBUG OUTPUT: 970dd9a8\nRun result: Ok(0)\n```\n\nYou might noticed that the 2 values we printed here are exactly the same! That's because `i am a secret` is exactly the secret string I'm picking when preparing the skeleton.\n\n## Piecing the Contract Together\n\nWith all the libraries and required knowledge in place, we can now finish implementing the script:\n\n```\n$ cd $TOP/htlc-template\n$ cat src/index.js\nconst { Molecule } = require('molecule-javascript')\nconst schema = require('../schema/blockchain-combined.json')\n\nconst names = schema.declarations.map(declaration => declaration.name)\nconst scriptTypeIndex = names.indexOf('Script')\nconst scriptType = new Molecule(schema.declarations[scriptTypeIndex])\n\n// Write your script logic here.\nconst customSchema = require('./htlc-combined.json')\nconst customNames = customSchema.declarations.map(d => d.name)\n\nconst htlcArgsIndex = customNames.indexOf('HtlcArgs')\nconst htlcArgsType = new Molecule(customSchema.declarations[htlcArgsIndex])\n\nfunction bytesToHex(b) {\n  return \"0x\" + Array.prototype.map.call(\n    new Uint8Array(b),\n    function(x) {\n      return ('00' + x.toString(16)).slice(-2)\n    }\n  ).join('')\n}\n\nfunction hexStringArrayToString(a) {\n  let s = \"\";\n  for (let i = 0; i < a.length; i++) {\n    s = s + String.fromCharCode(parseInt(a[i]))\n  }\n  return s\n}\n\nfunction hexStringArrayToHexString(a) {\n  let s = \"0x\";\n  for (let i = 0; i < a.length; i++) {\n    s = s + a[i].substr(2)\n  }\n  return s\n}\n\nfunction parseLittleEndianHexStringArray(a) {\n  let v = 0\n  const l = a.length\n  for (let i = 0; i < l; i++) {\n    v = (v << 8) | parseInt(a[l - i - 1])\n  }\n  return v\n}\n\nconst current_script = scriptType.deserialize(bytesToHex(CKB.load_script(0)))\nconst args = hexStringArrayToHexString(current_script[2][1])\nconst htlcArgs = htlcArgsType.deserialize(args)\n\n// Load and parse witness data using the same method as above\nconst htlcWitnessIndex = customNames.indexOf('HtlcWitness')\nconst htlcWitnessType = new Molecule(customSchema.declarations[htlcWitnessIndex])\n\nconst rawWitness = CKB.load_witness(0, 0, CKB.SOURCE.GROUP_INPUT)\nif (typeof rawWitness === 'number') {\n  throw new Error(`Invalid response when loading witness: ${rawWitness}`)\n}\nconst htlcWitness = htlcWitnessType.deserialize(bytesToHex(rawWitness))\n\nlet lockHashToMatch;\nif (htlcWitness[0][1].length > 0) {\n  // Test secret string hash\n  const crc32 = require('crc32')\n  const hash = '0x' + crc32(hexStringArrayToString(htlcWitness[0][1]))\n  if (hash !== hexStringArrayToHexString(htlcArgs[2][1])) {\n    throw new Error(`Invalid secret string!`)\n  }\n  lockHashToMatch = hexStringArrayToHexString(htlcArgs[0][1])\n} else {\n  // Test header block\n  const headerTypeIndex = names.indexOf('Header')\n  const headerType = new Molecule(schema.declarations[headerTypeIndex])\n\n  // Load header for current input first\n  const rawInputHeader = CKB.load_header(0, 0, CKB.SOURCE.GROUP_INPUT)\n  if (typeof rawWitness === 'number') {\n    throw new Error(`Invalid response when loading input header: ${rawInputHeader}`)\n  }\n  const inputHeader = headerType.deserialize(bytesToHex(rawInputHeader))\n  const inputHeaderNumber = parseLittleEndianHexStringArray(inputHeader[0][1][3][1])\n\n  const targetHeaderIndex = parseLittleEndianHexStringArray(htlcWitness[1][1])\n  const rawTargetHeader = CKB.load_header(0, targetHeaderIndex,\n                                          CKB.SOURCE.HEADER_DEP)\n  if (typeof rawTargetHeader === 'number') {\n    throw new Error(`Invalid response when loading target header: ${rawTargetHeader}`)\n  }\n  const targetHeader = headerType.deserialize(bytesToHex(rawTargetHeader))\n  const targetHeaderNumber = parseLittleEndianHexStringArray(targetHeader[0][1][3][1])\n\n  if (targetHeaderNumber < inputHeaderNumber + 100) {\n    throw new Error(`Timeout period has not reached!`)\n  }\n  lockHashToMatch = hexStringArrayToHexString(htlcArgs[1][1])\n}\n\n// Now we know which lock hash to test against, we look for an input cell\n// with the specified lock hash\nlet i = 0\nwhile (true) {\n  const rawHash = CKB.load_cell_by_field(0, i, CKB.SOURCE.INPUT, CKB.CELL.LOCK_HASH)\n  if (rawHash == CKB.CODE.INDEX_OUT_OF_BOUND) {\n    throw new Error(`Cannot find input cell using lock hash ${lockHashToMatch}`)\n  }\n  if (typeof rawHash === 'number') {\n    throw new Error(`Invalid response when loading input cell: ${rawHash}`)\n  }\n  if (bytesToHex(rawHash) == lockHashToMatch) {\n    break\n  }\n  i += 1\n}\n```\n\nIt uses similar techniques as shown above to parse witness and block headers, which are also in molecule format.\n\nThere's one trick worth mentioning: in the design of HTLC script, I mentioned that the script needs to do signature verification for a given public key. The actual implemention we have here, generalizes slightly from this design:\n\n1. Instead of test a given public key, we are testing for the whole lock script hash. While this certainly satisfies our requirement, it provides more possibilities: if everyone is using the default secp256k1 lock script, different public keys will be reflected in script args part, resulting in differnet lock scripts. So testing lock scripts can certainly ensure different public keys are using. On the other hand, not everyone might be using the default secp256k1 lock script, so testing lock script hash directly, can enable more flexibilities in the HTLC script usage.\n2. While one can certainly embeds the signature verification logic within the HTLC script, we opt for a different and simpler solution here: we just test that one of the input cell has the specified lock script. Per CKB's validation rules, if the transaction is accepted by the blockchain, each input cells' lock script must pass validation, which means the lock script specified in the HTLC script will also pass validation, satisfying the validation rules of HTLC script.\n\nTo summarize a bit, we are actually showing 2 patterns that can be handy when desining dapps on CKB:\n\n1. Instead of testing signature verification for a public key, one can test for the validation of a lock script to enable flexibilities.\n2. Instead of duplicating a different lock script, one can check for the existence of an input cell using the same lock, and delegate the validation work to the input cell's lock script.\n\nFundamentally, it depends on your use case to see if those patterns can apply. Later we might also build real composable scripts via dynamic linking to supplyment pattern 2. But having those in your armory might turn out to be useful when your design can be simply by them.\n\n## Always Audit Your Script\n\nOne final note here, is that you should always remember to audit the script before deploying it and putting real tokens in it. The above HTLC script is primarily for introductory purposes. I can easily recognize a few vulnerabilities in them. You should never use it directly on CKB mainnet. However, it does provide a quite interesting exercise, so if you are interested, feel free to read the script and see if you can spot the vulnerabilities yourself :P\n\n# Running HTLC Script on Chain\n\nThere're 2 parts in testing a CKB script: previously, we were using a off-chain debugger environment to test the script for faster iteration. Now that we have a complete HTLC script, we should also deploy it on a dev chain and test the whole workflow. After all any blockchain smart contracts cannot live alone, they have to have a surrounding environments that help prepare the transaction and invoke them on chain. This is more the case for CKB, since CKB uses a separated validator-generator model.\n\nTo test our HTLC script on chain, we are gonna reuse our `htlc-runner` environment here, and write a few more node executables that can deploy and test the HTLC script on chain. The first executable we will write, is an executable to deploy duktape binary as well as our HTLC script on chain:\n\n```\n$ cd $TOP/htlc-runner\n$ cat deploy_scripts.js\n#!/usr/bin/env node\n\nconst CKB = require(\"@nervosnetwork/ckb-sdk-core\").default\nconst utils = require(\"@nervosnetwork/ckb-sdk-utils\")\nconst process = require('process')\nconst fs = require('fs')\n\nif (process.argv.length !== 6) {\n  console.log(`Usage: ${process.argv[1]} <duktape load0 binary> <js script> <private key> <node URL>`)\n  process.exit(1)\n}\n\nconst duktapeBinary = fs.readFileSync(process.argv[2])\nconst jsScript = fs.readFileSync(process.argv[3])\n\nconst privateKey = process.argv[4]\nconst nodeUrl = process.argv[5]\n\nconst run = async () => {\n  const ckb = new CKB(nodeUrl)\n  const secp256k1Dep = await ckb.loadSecp256k1Dep()\n\n  const publicKey = ckb.utils.privateKeyToPublicKey(privateKey)\n  const publicKeyHash = `0x${ckb.utils.blake160(publicKey, 'hex')}`\n\n  const lockScript = {\n    hashType: secp256k1Dep.hashType,\n    codeHash: secp256k1Dep.codeHash,\n    args: publicKeyHash\n  }\n  const lockHash = ckb.utils.scriptToHash(lockScript)\n\n  const unspentCells = await ckb.loadCells({\n    lockHash\n  })\n  const totalCapacity = unspentCells.reduce((sum, cell) => sum + BigInt(cell.capacity), 0n)\n\n  // For simplicity, we will just use 1 CKB as fee. On a real setup you\n  // might not want to do this.\n  const fee = 100000000n\n  const duktapeBinaryCapacity = BigInt(duktapeBinary.length) * 100000000n + 4100000000n\n  const jsScriptCapacity = BigInt(jsScript.length) * 100000000n + 4100000000n\n\n  const outputs = [\n    {\n      lock: {\n        codeHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n        hashType: 'data',\n        args: '0x'\n      },\n      type: null,\n      capacity: '0x' + duktapeBinaryCapacity.toString(16)\n    },\n    {\n      lock: {\n        codeHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n        hashType: 'data',\n        args: '0x'\n      },\n      type: null,\n      capacity: '0x' + jsScriptCapacity.toString(16)\n    },\n    {\n      lock: lockScript,\n      type: null,\n      capacity: '0x' + (totalCapacity - jsScriptCapacity - duktapeBinaryCapacity - fee).toString(16)\n    }\n  ]\n  const outputsData = [\n    utils.bytesToHex(duktapeBinary),\n    utils.bytesToHex(jsScript),\n    '0x'\n  ]\n\n  const transaction = {\n    version: '0x0',\n    cellDeps: [\n      {\n        outPoint: secp256k1Dep.outPoint,\n        depType: 'depGroup'\n      }\n    ],\n    headerDeps: [],\n    inputs: unspentCells.map(cell => ({\n      previousOutput: cell.outPoint,\n      since: '0x0'\n    })),\n    outputs,\n    witnesses: [\n      {\n        lock: '',\n        inputType: '',\n        outputType: ''\n      }\n    ],\n    outputsData\n  }\n  const signedTransaction = ckb.signTransaction(privateKey)(transaction)\n\n  const txHash = await ckb.rpc.sendTransaction(signedTransaction, 'passthrough')\n\n  console.log(`Transaction hash: ${txHash}`)\n  fs.writeFileSync('deploy_scripts_result.txt', txHash)\n}\n\nrun()\n```\n\nThe second executable creates a cell using HTLC script as lock:\n\n```\n$ cd $TOP/htlc-runner\n$ cat create_htlc_cell.js\n#!/usr/bin/env node\n\nconst { Molecule } = require('molecule-javascript')\nconst crc32 = require('crc32')\nconst CKB = require(\"@nervosnetwork/ckb-sdk-core\").default\nconst utils = require(\"@nervosnetwork/ckb-sdk-utils\")\nconst process = require('process')\nconst fs = require('fs')\n\nfunction blake2b(buffer) {\n  return utils.blake2b(32, null, null, utils.PERSONAL).update(buffer).digest('binary')\n}\n\nif (process.argv.length !== 8) {\n  console.log(`Usage: ${process.argv[1]} <duktape load0 binary> <deployed tx hash> <private key> <node URL> <lock hash A> <lock hash B>`)\n  process.exit(1)\n}\n\nconst duktapeBinary = fs.readFileSync(process.argv[2])\nconst duktapeHash = blake2b(duktapeBinary)\n\nconst deployedTxHash = process.argv[3]\nconst privateKey = process.argv[4]\nconst nodeUrl = process.argv[5]\nconst lockHashA = process.argv[6]\nconst lockHashB = process.argv[7]\n\nfunction hexStringToHexStringArray(s) {\n  let arr = []\n  for (let i = 2; i < s.length; i += 2) {\n    arr.push('0x' + s.substr(i, 2))\n  }\n  return arr\n}\n\nconst run = async () => {\n  const ckb = new CKB(nodeUrl)\n  const secp256k1Dep = await ckb.loadSecp256k1Dep()\n\n  const publicKey = ckb.utils.privateKeyToPublicKey(privateKey)\n  const publicKeyHash = `0x${ckb.utils.blake160(publicKey, 'hex')}`\n\n  const lockScript = {\n    hashType: secp256k1Dep.hashType,\n    codeHash: secp256k1Dep.codeHash,\n    args: publicKeyHash\n  }\n  const lockHash = ckb.utils.scriptToHash(lockScript)\n\n  const unspentCells = await ckb.loadCells({\n    lockHash\n  })\n  const totalCapacity = unspentCells.reduce((sum, cell) => sum + BigInt(cell.capacity), 0n)\n\n  // For simplicity, we will just use 1 CKB as fee. On a real setup you\n  // might not want to do this.\n  const fee = 100000000n\n  const htlcCellCapacity = 200000000000n\n\n  const customSchema = JSON.parse(fs.readFileSync('../htlc-template/src/htlc-combined.json'))\n  const htlcArgsType = new Molecule(\n    customSchema.declarations.find(d => d.name == \"HtlcArgs\"))\n  const htlcScriptArgs = htlcArgsType.serialize([\n    ['a', hexStringToHexStringArray(lockHashA)],\n    ['b', hexStringToHexStringArray(lockHashB)],\n    ['hash', hexStringToHexStringArray('0x' + crc32('i am a secret'))]\n  ])\n\n  const transaction = {\n    version: '0x0',\n    cellDeps: [\n      {\n        outPoint: secp256k1Dep.outPoint,\n        depType: 'depGroup'\n      }\n    ],\n    headerDeps: [],\n    inputs: unspentCells.map(cell => ({\n      previousOutput: cell.outPoint,\n      since: '0x0'\n    })),\n    outputs: [\n      {\n        lock: {\n          codeHash: utils.bytesToHex(duktapeHash),\n          hashType: 'data',\n          args: htlcScriptArgs\n        },\n        type: null,\n        capacity: '0x' + htlcCellCapacity.toString(16)\n      },\n      {\n        lock: lockScript,\n        type: null,\n        capacity: '0x' + (totalCapacity - fee - htlcCellCapacity).toString(16)\n      }\n    ],\n    witnesses: [\n      {\n        lock: '',\n        inputType: '',\n        outputType: ''\n      }\n    ],\n    outputsData: [\n      '0x',\n      '0x'\n    ]\n  }\n  const signedTransaction = ckb.signTransaction(privateKey)(transaction)\n\n  const txHash = await ckb.rpc.sendTransaction(signedTransaction, 'passthrough')\n\n  console.log(`Transaction hash: ${txHash}`)\n  fs.writeFileSync('create_htlc_cell_result.txt', txHash)\n}\n\nrun()\n```\n\nOne thing worth mentioning, is that this executable shows how we can serialize a molecule formatted data structure:\n\n```\n// ...\n\nfunction hexStringToHexStringArray(s) {\n  let arr = []\n  for (let i = 2; i < s.length; i += 2) {\n    arr.push('0x' + s.substr(i, 2))\n  }\n  return arr\n}\n\n// ...\n\nconst customSchema = JSON.parse(fs.readFileSync('../htlc-template/src/htlc-combined.json'))\nconst htlcArgsType = new Molecule(\n  customSchema.declarations.find(d => d.name == \"HtlcArgs\"))\nconst htlcScriptArgs = htlcArgsType.serialize([\n  ['a', hexStringToHexStringArray(lockHashA)],\n  ['b', hexStringToHexStringArray(lockHashB)],\n  ['hash', hexStringToHexStringArray('0x' + crc32('i am a secret'))]\n])\n\n// ...\n```\n\nAnd now a executable that tries to unlock HTLC guarded cell by providing secret string:\n\n```\n$ cd $TOP/htlc-runner\n$ cat unlock_via_secret_string.js\n#!/usr/bin/env node\n\nconst { Molecule } = require('molecule-javascript')\nconst crc32 = require('crc32')\nconst CKB = require(\"@nervosnetwork/ckb-sdk-core\").default\nconst utils = require(\"@nervosnetwork/ckb-sdk-utils\")\nconst process = require('process')\nconst fs = require('fs')\n\nfunction blake2b(buffer) {\n  return utils.blake2b(32, null, null, utils.PERSONAL).update(buffer).digest('binary')\n}\n\nif (process.argv.length !== 8) {\n  console.log(`Usage: ${process.argv[1]} <deployed tx hash> <htlc cell tx hash> <private key> <node URL> <secret string> <dry run>`)\n  process.exit(1)\n}\n\nconst deployedTxHash = process.argv[2]\nconst htlcCellTxHash = process.argv[3]\nconst privateKey = process.argv[4]\nconst nodeUrl = process.argv[5]\nconst secretString = process.argv[6]\nconst dryrun = process.argv[7] === 'true'\n\nfunction stringToHexStringArray(s) {\n  let a = []\n  for (let i = 0; i < s.length; i++) {\n    a.push('0x' + ('00' + s.charCodeAt(i).toString(16)).slice(-2))\n  }\n  return a\n}\n\nconst run = async () => {\n  const ckb = new CKB(nodeUrl)\n  const secp256k1Dep = await ckb.loadSecp256k1Dep()\n\n  const publicKey = ckb.utils.privateKeyToPublicKey(privateKey)\n  const publicKeyHash = `0x${ckb.utils.blake160(publicKey, 'hex')}`\n\n  const lockScript = {\n    hashType: secp256k1Dep.hashType,\n    codeHash: secp256k1Dep.codeHash,\n    args: publicKeyHash\n  }\n  const lockHash = ckb.utils.scriptToHash(lockScript)\n\n  const unspentCells = await ckb.loadCells({\n    lockHash\n  })\n  const totalCapacity = unspentCells.reduce((sum, cell) => sum + BigInt(cell.capacity), 0n)\n\n  // For simplicity, we will just use 1 CKB as fee. On a real setup you\n  // might not want to do this.\n  const fee = 100000000n\n  const htlcCellCapacity = 200000000000n\n\n  const customSchema = JSON.parse(fs.readFileSync('../htlc-template/src/htlc-combined.json'))\n  const htlcWitnessType = new Molecule(\n    customSchema.declarations.find(d => d.name == \"HtlcWitness\"))\n  const htlcWitness = htlcWitnessType.serialize([\n    ['s', stringToHexStringArray(secretString)],\n    ['i', ['0x0', '0x0', '0x0', '0x0']]\n  ])\n\n  const transaction = {\n    version: '0x0',\n    cellDeps: [\n      // Due to the requirement of load0 duktape binary, JavaScript source cell\n      // should be the first one in cell deps\n      {\n        outPoint: {\n          txHash: deployedTxHash,\n          index: \"0x1\"\n        },\n        depType: 'code'\n      },\n      {\n        outPoint: {\n          txHash: deployedTxHash,\n          index: \"0x0\"\n        },\n        depType: 'code'\n      },\n      {\n        outPoint: secp256k1Dep.outPoint,\n        depType: 'depGroup'\n      }\n    ],\n    headerDeps: [],\n    inputs: unspentCells.map(cell => ({\n      previousOutput: cell.outPoint,\n      since: '0x0'\n    })),\n    outputs: [\n      {\n        lock: lockScript,\n        type: null,\n        capacity: '0x' + (totalCapacity + htlcCellCapacity - fee).toString(16)\n      }\n    ],\n    witnesses: unspentCells.map(_cell => '0x'),\n    outputsData: [\n      '0x',\n      '0x'\n    ]\n  }\n  transaction.inputs.push({\n    previousOutput: {\n      txHash: htlcCellTxHash,\n      index: \"0x0\"\n    },\n    since: '0x0'\n  })\n  transaction.witnesses[0] = {\n    lock: '',\n    inputType: '',\n    outputType: ''\n  }\n  const signedTransaction = ckb.signTransaction(privateKey)(transaction)\n  signedTransaction.witnesses.push(htlcWitness)\n\n  if (dryrun) {\n    try {\n      const result = await ckb.rpc.dryRunTransaction(signedTransaction)\n      console.log(`Dry run success result: ${JSON.stringify(result, null, 2)}`)\n    } catch (e) {\n      console.log(`Dry run failure result: ${JSON.stringify(JSON.parse(e.message), null, 2)}`)\n    }\n  } else {\n    const txHash = await ckb.rpc.sendTransaction(signedTransaction, 'passthrough')\n\n    console.log(`Transaction hash: ${txHash}`)\n    fs.writeFileSync('unlock_via_secret_string_result.txt', txHash)\n  }\n}\n\nrun()\n```\n\nFinally a executable that tries to unlock HTLC guarded cell assuming the waiting period has passed:\n\n```\n$ cd $TOP/htlc-runner\n$ cat unlock_via_timeout.js\n#!/usr/bin/env node\n\nconst { Molecule } = require('molecule-javascript')\nconst crc32 = require('crc32')\nconst CKB = require(\"@nervosnetwork/ckb-sdk-core\").default\nconst utils = require(\"@nervosnetwork/ckb-sdk-utils\")\nconst process = require('process')\nconst fs = require('fs')\n\nfunction blake2b(buffer) {\n  return utils.blake2b(32, null, null, utils.PERSONAL).update(buffer).digest('binary')\n}\n\nif (process.argv.length !== 8) {\n  console.log(`Usage: ${process.argv[1]} <deployed tx hash> <htlc cell tx hash> <private key> <node URL> <header hash> <dry run>`)\n  process.exit(1)\n}\n\nconst deployedTxHash = process.argv[2]\nconst htlcCellTxHash = process.argv[3]\nconst privateKey = process.argv[4]\nconst nodeUrl = process.argv[5]\nconst headerHash = process.argv[6]\nconst dryrun = process.argv[7] === 'true'\n\nconst run = async () => {\n  const ckb = new CKB(nodeUrl)\n  const secp256k1Dep = await ckb.loadSecp256k1Dep()\n\n  const htlcCellTx = await ckb.rpc.getTransaction(htlcCellTxHash)\n  const htlcCellHeaderHash = htlcCellTx.txStatus.blockHash\n\n  const publicKey = ckb.utils.privateKeyToPublicKey(privateKey)\n  const publicKeyHash = `0x${ckb.utils.blake160(publicKey, 'hex')}`\n\n  const lockScript = {\n    hashType: secp256k1Dep.hashType,\n    codeHash: secp256k1Dep.codeHash,\n    args: publicKeyHash\n  }\n  const lockHash = ckb.utils.scriptToHash(lockScript)\n\n  const unspentCells = await ckb.loadCells({\n    lockHash\n  })\n  const totalCapacity = unspentCells.reduce((sum, cell) => sum + BigInt(cell.capacity), 0n)\n\n  // For simplicity, we will just use 1 CKB as fee. On a real setup you\n  // might not want to do this.\n  const fee = 100000000n\n  const htlcCellCapacity = 200000000000n\n\n  const customSchema = JSON.parse(fs.readFileSync('../htlc-template/src/htlc-combined.json'))\n  const htlcWitnessType = new Molecule(\n    customSchema.declarations.find(d => d.name == \"HtlcWitness\"))\n  const htlcWitness = htlcWitnessType.serialize([\n    ['s', []],\n    ['i', ['0x1', '0x0', '0x0', '0x0']]\n  ])\n\n  const transaction = {\n    version: '0x0',\n    cellDeps: [\n      // Due to the requirement of load0 duktape binary, JavaScript source cell\n      // should be the first one in cell deps\n      {\n        outPoint: {\n          txHash: deployedTxHash,\n          index: \"0x1\"\n        },\n        depType: 'code'\n      },\n      {\n        outPoint: {\n          txHash: deployedTxHash,\n          index: \"0x0\"\n        },\n        depType: 'code'\n      },\n      {\n        outPoint: secp256k1Dep.outPoint,\n        depType: 'depGroup'\n      }\n    ],\n    headerDeps: [\n      htlcCellHeaderHash,\n      headerHash,\n    ],\n    inputs: unspentCells.map(cell => ({\n      previousOutput: cell.outPoint,\n      since: '0x0'\n    })),\n    outputs: [\n      {\n        lock: lockScript,\n        type: null,\n        capacity: '0x' + (totalCapacity + htlcCellCapacity - fee).toString(16)\n      }\n    ],\n    witnesses: unspentCells.map(_cell => '0x'),\n    outputsData: [\n      '0x',\n      '0x'\n    ]\n  }\n  transaction.inputs.push({\n    previousOutput: {\n      txHash: htlcCellTxHash,\n      index: \"0x0\"\n    },\n    since: '0x0'\n  })\n  transaction.witnesses[0] = {\n    lock: '',\n    inputType: '',\n    outputType: ''\n  }\n  const signedTransaction = ckb.signTransaction(privateKey)(transaction)\n  signedTransaction.witnesses.push(htlcWitness)\n\n  if (dryrun) {\n    try {\n      const result = await ckb.rpc.dryRunTransaction(signedTransaction)\n      console.log(`Dry run success result: ${JSON.stringify(result, null, 2)}`)\n    } catch (e) {\n      console.log(`Dry run failure result: ${JSON.stringify(JSON.parse(e.message), null, 2)}`)\n    }\n  } else {\n    const txHash = await ckb.rpc.sendTransaction(signedTransaction, 'passthrough')\n\n    console.log(`Transaction hash: ${txHash}`)\n    fs.writeFileSync('unlock_via_timeout_result.txt', txHash)\n  }\n}\n\nrun()\n```\n\nWe are putting the header dep for HTLC input cell at index 0, the header to test for current timestamp at index 1, hence when we are preparing witness data, we use 0x01000000 for i, which is the little endian representation for 1.\n\nThis also provides a different inspiration. To prove certain time has past in CKB, you can use `since` field as shown in Nervos DAO validator script, you can also include a header on chain, and rely on the header's block number or timestamp to prove that certain time has already been reached. It really depends on your use case to tell which one is the better choice here.\n\nWith all 4 executables ready here, we are ready to play with our HTLC script a bit. But first, let's start a new CKB dev chain.\n\n```\n$ cd $TOP\n$ export CKB=\"<path to your ckb binary>\"\n$ $CKB --version\nckb 0.28.0 (728eff2 2020-02-04)\n# Block assembler args configured here correspond to the following private key:\n# 0x0a14c6fd7af6a3f13c9e2aacad80d78968de5d068a342828080650084bf20104\n$ $CKB init -c dev -C ckb-data --ba-arg 0x5a7487f529b8b8fd4d4a57c12dc0c70f7958a196\n$ $CKB run -C ckb-data\n```\n\nOn a different terminal, let's start a miner instance:\n\n```\n$ cd $TOP\n$ $CKB miner -C ckb-data\n```\n\nWe are using CKB's dev chain, since there are already 2 handy [addresses](https://github.com/nervosnetwork/ckb/blob/dad394ea3f50f518a40e5a8a457dfb6811ba245a/resource/specs/dev.toml#L70-L82) with issued balance, so we don't have to mine the CKB before testing. In addition, with a dev chain you can customize block issuing speed. However if you like you can also use the testnet, just remember never to use mainnet for testing here.\n\nWith the CKB instance running, HTLC script can be deployed and tested for real on chain.\n\n```\n# Make sure the HTLC script is successfully built first\n$ cd $TOP/htlc-template\n$ npm run build\n# Ensure all scripts are runnable\n$ cd $TOP/htlc-runner\n$ chmod +x deploy_scripts.js\n$ chmod +x create_htlc_cell.js\n$ chmod +x unlock_via_secret_string.js\n$ chmod +x unlock_via_timeout.js\n\n# Let's first deploy duktape binary and JS scripts\n$ ./deploy_scripts.js \\\n    ../ckb-duktape/build/load0 \\\n    ../htlc-template/build/duktape.js \\\n    0xd00c06bfd800d27397002dca6fb0993d5ba6399b4238b2f29ee9deb97593d2bc \\\n    \"http://127.0.0.1:8114/\"\nThis method is only for demo, don't use it in production\nTransaction hash: 0xf30e1e8989fc3a4cb1e52dacc85090f8ff74b05e008d636b8c9154f5c296e1f4\n\n# Let's create a HTLC cell\n$ ./create_htlc_cell.js \\\n    ../ckb-duktape/build/load0 \\\n    0xf30e1e8989fc3a4cb1e52dacc85090f8ff74b05e008d636b8c9154f5c296e1f4 \\\n    0xd00c06bfd800d27397002dca6fb0993d5ba6399b4238b2f29ee9deb97593d2bc \\\n    \"http://127.0.0.1:8114/\" \\\n    0x32e555f3ff8e135cece1351a6a2971518392c1e30375c1e006ad0ce8eac07947 \\\n    0xc219351b150b900e50a7039f1e448b844110927e5fd9bd30425806cb8ddff1fd\nThis method is only for demo, don't use it in production\nTransaction hash: 0x7de8ea6b0d6cb9941e76976d1d55edf844c4fa81485e00fb8eba2d161b5830cd\n\n# To save us the hassle of recreating cells, both unlock executables support\n# a dry run mode, where we only does full transaction verification, but do not\n# commit the success ones on chain.\n# First let's show that we can unlock a HTLC cell given the right secret string\n# and lock script\n$ ./unlock_via_secret_string.js \\\n    0xf30e1e8989fc3a4cb1e52dacc85090f8ff74b05e008d636b8c9154f5c296e1f4 \\\n    0x7de8ea6b0d6cb9941e76976d1d55edf844c4fa81485e00fb8eba2d161b5830cd \\\n    0xd00c06bfd800d27397002dca6fb0993d5ba6399b4238b2f29ee9deb97593d2bc \\\n    \"http://127.0.0.1:8114/\" \\\n    \"i am a secret\" \\\n    true\nThis method is only for demo, don't use it in production\nDry run success result: {\n  \"cycles\": \"0xb1acc38\"\n}\n\n# Given an invalid secret string, the transaction would fail the validation.\n# If you have enabled debug output in CKB's configuration like mentioned here:\n# https://docs.nervos.org/dev-guide/debugging-ckb-script.html#debug-syscall\n# you can notice the failure lines in CKB's debug logs.\n$ ./unlock_via_secret_string.js \\\n    0xf30e1e8989fc3a4cb1e52dacc85090f8ff74b05e008d636b8c9154f5c296e1f4 \\\n    0x7de8ea6b0d6cb9941e76976d1d55edf844c4fa81485e00fb8eba2d161b5830cd \\\n    0xd00c06bfd800d27397002dca6fb0993d5ba6399b4238b2f29ee9deb97593d2bc \\\n    \"http://127.0.0.1:8114/\" \\\n    \"invalid secret\" \\\n    true\nDry run failure result: {\n  \"code\": -3,\n  \"message\": \"Error { kind: ValidationFailure(-2) ...}\"\n}\n\n# Given the correct secret string but an invalid public key, this would still\n# fail the validation:\n$ ./unlock_via_secret_string.js \\\n    0xf30e1e8989fc3a4cb1e52dacc85090f8ff74b05e008d636b8c9154f5c296e1f4 \\\n    0x7de8ea6b0d6cb9941e76976d1d55edf844c4fa81485e00fb8eba2d161b5830cd \\\n    0x63d86723e08f0f813a36ce6aa123bb2289d90680ae1e99d4de8cdb334553f24d \\\n    \"http://127.0.0.1:8114/\" \\\n    \"i am a secret\" \\\n    true\nDry run failure result: {\n  \"code\": -3,\n  \"message\": \"Error { kind: ValidationFailure(-2) ...}\"\n}\n\n# Now we've tested unlocking by providing secret string, let's try unlocking\n# via waiting enough time. In my setup, I have the following values:\n# HTLC cell is packed in transaction:\n# 0xf30e1e8989fc3a4cb1e52dacc85090f8ff74b05e008d636b8c9154f5c296e1f4\n# which is commited in block:\n# 0x04539cff3e1a106773bc1ec35804340c0981804093ce8d7a17e9ebc37a3268ff\n# whose block number is 399.\n#\n# I'm gonna test it with block:\n# 0xe93ebb311d156847fbcdc159d1fa3c38f12613121e51582272d909379c4d1a60\n# whose block number is 409, and block:\n# 0x665ccfab2d854afa035f4697a2301f2bad9d4aa86506090b104f8ed18772ca01\n# whose block number is 510.\n# Let's first try block 510 to verify that we can unlock the HTLC cell this way:\n$ ./unlock_via_timeout.js \\\n    0xf30e1e8989fc3a4cb1e52dacc85090f8ff74b05e008d636b8c9154f5c296e1f4 \\\n    0x7de8ea6b0d6cb9941e76976d1d55edf844c4fa81485e00fb8eba2d161b5830cd \\\n    0x63d86723e08f0f813a36ce6aa123bb2289d90680ae1e99d4de8cdb334553f24d \\\n    \"http://127.0.0.1:8114/\" \\\n    0x665ccfab2d854afa035f4697a2301f2bad9d4aa86506090b104f8ed18772ca01 \\\n    true\nThis method is only for demo, don't use it in production\nDry run success result: {\n  \"cycles\": \"0x16c500ba\"\n  }\n# Notice here we are unlocking using lock script hash:\n# 0x63d86723e08f0f813a36ce6aa123bb2289d90680ae1e99d4de8cdb334553f24d\n# which is different from unlocking by providing secret string.\n\n# Now let's try block 409 here:\n$ ./unlock_via_timeout.js \\\n    0xf30e1e8989fc3a4cb1e52dacc85090f8ff74b05e008d636b8c9154f5c296e1f4 \\\n    0x7de8ea6b0d6cb9941e76976d1d55edf844c4fa81485e00fb8eba2d161b5830cd \\\n    0x63d86723e08f0f813a36ce6aa123bb2289d90680ae1e99d4de8cdb334553f24d \\\n    \"http://127.0.0.1:8114/\" \\\n    0xe93ebb311d156847fbcdc159d1fa3c38f12613121e51582272d909379c4d1a60 \\\n    true\nDry run failure result: {\n  \"code\": -3,\n  \"message\": \"Error { kind: ValidationFailure(-2) ...}\"\n}\n# As expected, this fails validatin, and if we check CKB's debug log(if you\n# have enabled it), we can find log lines containing \"Timeout period has not\n# reached!\", proving our script works as expected.\n\n# One final step would checking unlocking with enough waiting, but using the\n# wrong public key.\n$ ./unlock_via_timeout.js \\\n    0xf30e1e8989fc3a4cb1e52dacc85090f8ff74b05e008d636b8c9154f5c296e1f4 \\\n    0x7de8ea6b0d6cb9941e76976d1d55edf844c4fa81485e00fb8eba2d161b5830cd \\\n    0xd00c06bfd800d27397002dca6fb0993d5ba6399b4238b2f29ee9deb97593d2bc \\\n    \"http://127.0.0.1:8114/\" \\\n    0x665ccfab2d854afa035f4697a2301f2bad9d4aa86506090b104f8ed18772ca01 \\\n    true\nDry run failure result: {\n  \"code\": -3,\n  \"message\": \"Error { kind: ValidationFailure(-2) ...}\"\n}\n# As expected, this also fails validation.\n```\n\nNotice the generated transaction hashes might different in each different run. So make sure to adjust parameters to the cells as needed.\n\nThis concludes our HTLC script runs as expected(well, excluding those vulnarable situations), hooray!\n\n# Compute Intensive Code in JavaScript\n\nLet's jump back for a second. I've been avoiding doing signatue verification code in our HTLC script written in JavaScript here. You might notice we also use a very simple CRC32 hashing algorithm, instead of the more secure hashing algorithms such as blake2b. While one major reason I did, is for the simplicity of this post(if you read till this point you will notice this post is already insanely long!), it is still not recommended to do those operations in JavaScript since:\n\n- A crypto algorithm requires precise implementation, while I'm not saying you cannot do that, it certainly requires more care to build crypto algorithms in a higher-level language like JavaScript. It's much better to leverage existing battle-tested libraries written in C or Rust.\n- Crypto algorithms are typical compute intensive code, since we are running JavaScript code in duktape, it can easily slow your code by 10x or even 100x. A native implementation can be much faster and saves significant cycles on CKB.\n\nRight now the [duktape](https://github.com/xxuejie/ckb-duktape) distribution used here only contains duktape with no external libraries. In the future I might add other distributions with certain crypto algorithms shipped together, such as secp256k1 and blake2b. This way you will be able to invoke fast and secure crypto algorithms well within JavaScript. But please also remember sometimes, the delegate patterns mentioned above might suit your use case better.\n\n# Recap\n\nI sincerely hope you have read till this far, instead of skipping it. This is a ridiculously long post, but it contains a lot of useful information when building scripts on CKB:\n\n- How to prepare a debugging environment that aids writting the script\n- How to build custom data structure in molecule format\n- How to serialize/deserialize molecule data structures\n- How to include external libraries on npm and pack a single JavaScript for CKB use\n\nWhile I might still add more posts to this series if I noticed interesting stuff to write, I'm sure the existing 7 posts in this series, together with [many](https://justjjy.com/Build-CKB-contract-with-Rust-part-1) [other](https://justjjy.com/CKB-contract-in-Rust-part-2-Rewrite-contract-with-ckb) [awesome](https://docs.nervos.org/dev-guide/debugging-ckb-script.html) [posts](https://mp.weixin.qq.com/s/9cP_Qik-AsdpiqL-q0ac4w) by my colleagues, have well prepared you to build awesome things on CKB. We are all prepared to amazed by the beautiful things you build on CKB :)"},{"id":"intro-to-ckb-script-programming-8","metadata":{"permalink":"/blog/intro-to-ckb-script-programming-8","editUrl":"https://github.com/facebook/docusaurus/edit/main/website/blog/intro-to-script-8.md","source":"@site/blog/intro-to-script-8.md","title":"Introduction to CKB Script Programming 8: Performant WASM","description":"In an earlier post, I've shown you that you can have WASM programming running on CKB, with a little caveat that the WASM programs might not be so performant. I also mentioned that there is a potential solution that could solve the problem. And now it's the day! We now have a new project that could be used to generate performant WASM programs. Let's see how it works in this post.","date":"2020-03-02T00:00:00.000Z","tags":[],"readingTime":19.695,"hasTruncateMarker":false,"authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}],"frontMatter":{"title":"Introduction to CKB Script Programming 8: Performant WASM","date":"2020-03-02","slug":"intro-to-ckb-script-programming-8","authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}]},"unlisted":false,"prevItem":{"title":"Introduction to CKB Script Programming 7: Advanced Duktape Examples","permalink":"/blog/intro-to-ckb-script-programming-7"},"nextItem":{"title":"Introduction to CKB Script Programming 9: Cycle Reductions in Duktape Script","permalink":"/blog/intro-to-ckb-script-programming-9"}},"content":"In an [earlier post](../2019_10_09_introduction_to_ckb_script_programming_wasm_on_ckb/), I've shown you that you can have WASM programming running on CKB, with a little caveat that the WASM programs might not be so performant. I also mentioned that there is a potential solution that could solve the problem. And now it's the day! We now have a new [project](https://github.com/xxuejie/wavm-aot-generator) that could be used to generate performant WASM programs. Let's see how it works in this post.\n\n# Background\n\n(If you are impatient, you can skip this section and jump directly to Examples)\n\nIn the previous post, we are translating the WebAssembly programs back to C code, then compile it from C code to RISC-V again. But this has many drawbacks:\n\n- It's not always possible to preserve all the optimizations done on the code in a C intermediate layer.\n- Due to limitations in C, it is not possible to fully customize memory layout for the maximum performance.\n- A C layer can be flaky at times and is not always easy to debug.\n\nHere we are trying a different solution: [WAVM](https://github.com/WAVM/WAVM) is a high performance([benchmarks](https://00f.net/2019/10/22/updated-webassembly-benchmark/) show this is the highest performance WASM implementation so far) translation layer that compiles WASM code directly to native code via LLVM. Since LLVM 9+ has official RISC-V support, we can just retarget WAVM to RISC-V code, it will then be able to translate WASM program directly to RISC-V native code.\n\nThere's one additional problem: WAVM requires a runtime part to complement the native with surrounding environments. Currently this is included within WAVM with dependency on LLVM, which makes the binary quite huge. One day it suddenly occurs to me that all the information needed to build the runtime, is already included in the original WASM file, so we can just build a separate project, that processes the original WASM file and emits a minimal runtime part in plain C code, then we link it together with generated native code, the result will be a single RISC-V native program that is compiled from WASM code, and can run independently.\n\n# Examples\n\nHere we will use the exact same examples as the previous post: the fibonacci code written in AssemblyScript, and secp256k1 example in pure Rust. We will do a side-by-side comparison on the generated code size, and cycles consumed running in CKB VM. For the sake of completeness, we will also include native versions written in pure C in each example. As we will see below, even if our current WASM solution still has way to go towards the pure C version, it is already quite close and could enable many use cases.\n\nFirst let's clone all the needed repos and do necessary preparations:\n\n```\n$ export TOP=$(pwd)\n$ git clone https://github.com/AssemblyScript/assemblyscript.git\n$ cd assemblyscript\n$ git checkout b433bc425633c3df6a4a30c735c91c78526a9eb7\n$ npm install\n\n$ cd $TOP\n$ git clone --recursive https://github.com/WebAssembly/wabt\n$ cd wabt\n$ git checkout bec78eafbc203d81b9a6d1ce81f5a80dd7bf692a\n$ mkdir build\n$ cd build\n$ cmake ..\n$ cmake --build .\n\n$ cd $TOP\n$ git clone https://github.com/xxuejie/WAVM\n$ cd WAVM\n$ git checkout cb35225feeb4ba1b5a9c73cbbdb07f4cace9b359\n$ mkdir build\n$ cd build\n# Make sure you are using LLVM 9+, you might need to tweak this path depending\n# on your environment\n$ cmake .. -DLLVM_DIR=/usr/lib/llvm-9/lib/cmake/llvm\n$ cmake --build .\n\n$ cd $TOP\n$ git clone https://github.com/xxuejie/wavm-aot-generator\n$ cd wavm-aot-generator\n$ git checkout 8c818747eb19494fc9c5e0289810aa7ad484a22e\n$ cargo build --release\n\n$ cd $TOP\n$ git clone https://github.com/xxuejie/ckb-standalone-debugger\n$ cd ckb-standalone-debugger\n$ git checkout 15e8813b8cb886e95e2c81bbee9f26d47a831850\n$ cd bins\n$ cargo build --release\n\n$ cd $TOP\n$ git clone https://github.com/xxuejie/ckb-binary-patcher\n$ cd ckb-binary-patcher\n$ git checkout 930f0b468a8f426ebb759d9da735ebaa1e2f98ba\n$ cd ckb-binary-patcher\n$ cargo build --release\n\n$ cd $TOP\n$ git clone https://github.com/nervosnetwork/ckb-c-stdlib\n$ cd ckb-c-stdlib\n$ git checkout 693c58163fe37d6abd326c537447260a846375f0\n```\n\n## AssemblyScript Example\n\nHere's our old fibonacci example in AssemblyScript, let's compile it to WebAssembly program first:\n\n```\n$ cd $TOP\n$ cat << EOF > fib.ts\nexport function fib(n: i32): i32 {\n  var a = 0, b = 1;\n    for (let i = 0; i < n; i++) {\n        let t = a + b; a = b; b = t;\n  }\n  return b;\n}\nEOF\n$ assemblyscript/bin/asc fib.ts -b fib.wasm -O3\n```\n\nWe will compile the WASM code to 2 different versions: C code, and RISC-V native code.\n\n```\n$ cd $TOP\n$ wabt/build/wasm2c fib.wasm -o fib.c\n$ WAVM/build/bin/wavm compile --target-triple riscv64 fib.wasm fib_precompiled.wasm\n$ wavm-aot-generator/target/release/wavm-aot-generator fib_precompiled.wasm fib_precompiled\n```\n\nYou might noticed that instead of generating native RISC-V code, we are using WAVM to generated a `precompiled object` formatted file. This is essentially the original WASM file with native code embedded in a custom section, this way we can feed a single file to our generator for convenience reasons.\n\nLet's attach 2 distinct wrapper files used in 2 WASM solutions, and also provide a native implementation:\n\n```\n$ cd $TOP\n$ cat << EOF > fib_wabt_main.c\n#include <stdio.h>\n#include <stdlib.h>\n#include \"ckb_syscalls.h\"\n\n#include \"fib.h\"\n\nvoid (*Z_envZ_abortZ_viiii)(u32, u32, u32, u32);\n\nvoid env_abort(u32 a, u32 b, u32 c, u32 d) {\n  abort();\n}\n\nint main() {\n  uint32_t value;\n  uint64_t len = 4;\n  int ret = ckb_load_witness((void*) &value, &len, 0, 0,\n                             CKB_SOURCE_GROUP_INPUT);\n  if (ret != CKB_SUCCESS) {\n    return ret;\n  }\n  if (len < 4) {\n    return -1;\n  }\n\n  init();\n  u8 result = Z_fibZ_ii(value);\n\n  return result;\n}\nEOF\n$ cat << EOF > fib_wavm_main.c\n#include \"fib_precompiled_glue.h\"\n#include \"abi/ckb_vm_wasi_abi.h\"\n#include \"ckb_syscalls.h\"\n\nvoid* wavm_env_abort(void* dummy, int32_t code, int32_t a, int32_t b, int32_t c)\n{\n  ckb_exit(code);\n\n  return dummy;\n}\n\nint main() {\n  uint32_t value;\n  uint64_t len = 4;\n  int ret = ckb_load_witness((void*) &value, &len, 0, 0,\n                             CKB_SOURCE_GROUP_INPUT);\n  if (ret != CKB_SUCCESS) {\n    return ret;\n  }\n  if (len < 4) {\n    return -1;\n  }\n\n  wavm_ret_int32_t wavm_ret = wavm_exported_function_fib(NULL, value);\n  return wavm_ret.value;\n}\nEOF\n$ cat << EOF > fib_native_main.c\n#include \"ckb_syscalls.h\"\n\nint32_t fib(int32_t n) {\n  int32_t a = 0;\n  int32_t b = 1;\n\n  for (int32_t i = 0; i < n; i++) {\n    int32_t t = a + b;\n    a = b;\n    b = t;\n  }\n\n  return b;\n}\n\nint main() {\n  uint32_t value;\n  uint64_t len = 4;\n  int ret = ckb_load_witness((void*) &value, &len, 0, 0,\n                             CKB_SOURCE_GROUP_INPUT);\n  if (ret != CKB_SUCCESS) {\n    return ret;\n  }\n  if (len < 4) {\n    return -1;\n  }\n\n  return fib(value);\n}\nEOF\n```\n\nYou might noticed that we altered the wabt wrapper used in previous post, so that all 3 versions here load the input to fibonacci function from witness data, this way we can set the same standard for comparison.\n\nLet's compile the 3 files first:\n\n```\n$ cd $TOP\n$ sudo docker run --rm -it -v `pwd`:/code nervos/ckb-riscv-gnu-toolchain:bionic-20191209 bash\nroot@7f24745ca702:/# cd /code\nroot@7f24745ca702:/code# riscv64-unknown-elf-gcc -O3 -I ckb-c-stdlib -I wavm-aot-generator -I wabt/wasm2c fib_wabt_main.c fib.c wabt/wasm2c/wasm-rt-impl.c -o fib_wabt\nroot@7f24745ca702:/code# riscv64-unknown-elf-gcc -O3 -I ckb-c-stdlib -I wavm-aot-generator -I wabt/wasm2c fib_wavm_main.c wavm-aot-generator/abi/riscv64_runtime.S fib_precompiled.o -o fib_wavm -Wl,-T wavm-aot-generator/abi/riscv64.lds\nroot@7f24745ca702:/code# riscv64-unknown-elf-gcc -O3 -I ckb-c-stdlib -I wavm-aot-generator -I wabt/wasm2c fib_native_main.c -o fib_native\nroot@7f24745ca702:/code# exit\nexit\n$ ckb-binary-patcher/target/release/ckb-binary-patcher -i fib_wavm -o fib_wavm_patched\n```\n\nDue to a [VM bug](https://github.com/nervosnetwork/ckb-vm/issues/92), a [patcher](https://github.com/xxuejie/ckb-binary-patcher) utility has been provided to workaround RISC-V code that would generate the bug. Even though we only observed LLVM affected by this bug(GCC has optimizations that would generate different code), it still recommended to run the patcher against any script that you would want to run on CKB.\n\nWe also prepare a runner to run the scripts:\n\n```\n$ cd $TOP\n$ cat << EOF > runner.rb\n#!/usr/bin/env ruby\n\nrequire \"rbnacl\"\n\ndef bin_to_hex(bin)\n  \"0x#{bin.unpack1('H*')}\"\nend\n\ndef blake2b(data)\n  RbNaCl::Hash::Blake2b.digest(data,\n                               personal: \"ckb-default-hash\",\n                               digest_size: 32)\nend\n\nif ARGV.length != 2\n  STDERR.puts \"Usage: runner.rb <script file> <witness args>\"\n  exit 1\nend\n\nscript_binary = File.read(ARGV[0])\nscript_hash = blake2b(script_binary)\n\ntx = DATA.read.sub(\"@FIB_CODE\", bin_to_hex(script_binary))\n       .sub(\"@FIB_HASH\", bin_to_hex(script_hash))\n       .sub(\"@FIB_ARG\", ARGV[1])\n\nFile.write(\"tx.json\", tx)\ncommandline = \"ckb-standalone-debugger/bins/target/release/ckb-debugger --tx-file tx.json --script-group-type type -i 0 -e input\"\nSTDERR.puts \"Executing: #{commandline}\"\nexec(commandline)\n\n__END__\n{\n  \"mock_info\": {\n    \"inputs\": [\n      {\n        \"input\": {\n          \"previous_output\": {\n            \"tx_hash\": \"0xa98c57135830e1b91345948df6c4b8870828199a786b26f09f7dec4bc27a73da\",\n            \"index\": \"0x0\"\n          },\n          \"since\": \"0x0\"\n        },\n        \"output\": {\n          \"capacity\": \"0x4b9f96b00\",\n          \"lock\": {\n            \"args\": \"0x\",\n            \"code_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n            \"hash_type\": \"data\"\n          },\n          \"type\": {\n            \"args\": \"0x\",\n            \"code_hash\": \"@FIB_HASH\",\n            \"hash_type\": \"data\"\n          }\n        },\n        \"data\": \"0x\"\n      }\n    ],\n    \"cell_deps\": [\n      {\n        \"cell_dep\": {\n          \"out_point\": {\n            \"tx_hash\": \"0xfcd1b3ddcca92b1e49783769e9bf606112b3f8cf36b96cac05bf44edcf5377e6\",\n            \"index\": \"0x0\"\n          },\n          \"dep_type\": \"code\"\n        },\n        \"output\": {\n          \"capacity\": \"0x702198d000\",\n          \"lock\": {\n            \"args\": \"0x\",\n            \"code_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n            \"hash_type\": \"data\"\n          },\n          \"type\": null\n        },\n        \"data\": \"@FIB_CODE\"\n      }\n    ],\n    \"header_deps\": []\n  },\n  \"tx\": {\n    \"version\": \"0x0\",\n    \"cell_deps\": [\n      {\n        \"out_point\": {\n          \"tx_hash\": \"0xfcd1b3ddcca92b1e49783769e9bf606112b3f8cf36b96cac05bf44edcf5377e6\",\n          \"index\": \"0x0\"\n        },\n        \"dep_type\": \"code\"\n      }\n    ],\n    \"header_deps\": [\n    ],\n    \"inputs\": [\n      {\n        \"previous_output\": {\n          \"tx_hash\": \"0xa98c57135830e1b91345948df6c4b8870828199a786b26f09f7dec4bc27a73da\",\n          \"index\": \"0x0\"\n        },\n        \"since\": \"0x0\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"capacity\": \"0x0\",\n        \"lock\": {\n          \"args\": \"0x\",\n          \"code_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n          \"hash_type\": \"data\"\n        },\n        \"type\": null\n      }\n    ],\n    \"witnesses\": [\n      \"@FIB_ARG\"\n    ],\n    \"outputs_data\": [\n      \"0x\"\n    ]\n  }\n}\nEOF\n$ chmod +x runner.rb\n```\n\nNow we can take a look at the binary size of each version, and run the 3 versions of fibonacci calculation:\n\n```\n$ ls -lh fib_wabt fib_wavm_patched fib_native\n-rwxr-xr-x 1 root 11K Mar  3 03:27 fib_native*\n-rwxr-xr-x 1 root 53K Mar  3 03:26 fib_wabt*\n-rwxr-xr-x 1 root 88K Mar  3 03:26 fib_wavm_patched*\n$ ./runner.rb fib_wabt 0x10000000\nRun result: Ok(61)\nTotal cycles consumed: 549478\nTransfer cycles: 6530, running cycles: 542948\n$ ./runner.rb fib_wabt 0x20000000\nRun result: Ok(-30)\nTotal cycles consumed: 549590\nTransfer cycles: 6530, running cycles: 543060\n$ ./runner.rb fib_wabt 0x00010000\nRun result: Ok(29)\nTotal cycles consumed: 551158\nTransfer cycles: 6530, running cycles: 544628\n$ ./runner.rb fib_wavm_patched 0x10000000\nRun result: Ok(61)\nTotal cycles consumed: 22402\nTransfer cycles: 19696, running cycles: 2706\n$ ./runner.rb fib_wavm_patched 0x20000000\nRun result: Ok(-30)\nTotal cycles consumed: 22578\nTransfer cycles: 19696, running cycles: 2882\n$ ./runner.rb fib_wavm_patched 0x00010000\nRun result: Ok(29)\nTotal cycles consumed: 25042\nTransfer cycles: 19696, running cycles: 5346\n$ ./runner.rb fib_native 0x10000000\nRun result: Ok(61)\nTotal cycles consumed: 3114\nTransfer cycles: 1137, running cycles: 1977\n$ ./runner.rb fib_native 0x20000000\nRun result: Ok(-30)\nTotal cycles consumed: 3226\nTransfer cycles: 1137, running cycles: 2089\n$ ./runner.rb fib_native 0x00010000\nRun result: Ok(29)\nTotal cycles consumed: 4794\nTransfer cycles: 1137, running cycles: 3657\n```\n\nThe input value is encoded in witness part as 32-bit unsigned little endian integer, meaning `0x10000000`, `0x20000000` and `0x00010000` here represent `16`, `32` and `256` respectively.\n\nSince CKB VM emits 8-bit signed value as output, the calculated value are truncated here. But we do not care so much about the actual fibonacci number(well of course, assuming the 3 versions generate the same result), it's the cycle consumption that we care about here.\n\nSome insights can thus be deduced from the values:\n\n- The WAVM version generates the biggest binary size(88K), in fact it also requires loading more bytes into the VM as confirmed by `transfer cycles` of 19696(roughly speaking, 1 transfer cycle means 4 bytes loaded into the VM).\n- The WABT version and native version both take about 7 cycles to calculate one round of fibonacci iteration, while the WAVM version takes about 11 cycles to calculate one round of iteration\n- However, the WAVM version requires only about 2530 cycles to set up the running environment, while the WABT version takes about 542836 cycles to set up.\n\nWe can see that the WAVM version does take significant less cycles in the initial setup(this is hugely due to the custom memory layout we can leverage in WAVM version), but the WAVM version is slightly slower per fibonacci iteration. This might be due to the fact that LLVM still needs some work to catch up GCC's code generation quality for RISC-V, and it could also be that fibonacci is so simple, that GCC can perfectly pick up the calculation structure from the restored C code. For more complex examples, this might not be the case anymore.\n\nI personally did do some investigation into the large binary size of WAVM binary, and the problem, is that all the symbols generated in WAVM, are declared public symbols. That means we cannot rely on dead code elimination(DCE) to purge those variables and functions that we are not used, hence a larger binary is generated here. If the original WASM program is generated by Rust or LLVM directly, this won't be a problem since DCE is already performed, but Assemblyscript tends to do less DCE, hence we have a larger binary. Later I might look into WAVM to see if there's a way we can tweak non-exported functions to be module local, if that can be resolved, we should be able to reduce the binary size of WAVM version to the same level like the other solutions.\n\n# Rust Secp256k1 Example\n\nLet's also try the more complicated Rust based secp256k1 example:\n\n```\n$ cd $TOP\n$ git clone https://github.com/nervosnetwork/wasm-secp256k1-test\n$ cd wasm-secp256k1-test\n$ cargo build --release --target=wasm32-unknown-unknown\n\n$ cd $TOP\n$ wabt/bin/wasm2c wasm-secp256k1-test/target/wasm32-unknown-unknown/release/wasm-secp256k1-test.wasm -o secp.c\n# There's a symbol confliction in the latest versioni of gcc with wabt here, this\n# can serve as a temporary solutin\n$ sed -i s/bcmp/bcmp1/g secp.c\n$ WAVM/build/bin/wavm compile --target-triple riscv64 wasm-secp256k1-test/target/wasm32-unknown-unknown/release/wasm-secp256k1-test.wasm secp_precompiled.wasm\n$ wavm-aot-generator/target/release/wavm-aot-generator secp_precompiled.wasm secp_precompiled\n\n$ cd $TOP\n$ cat << EOF > secp_wabt_main.c\n#include <stdio.h>\n#include <stdlib.h>\n#include \"ckb_syscalls.h\"\n\n#include \"secp.h\"\n\nint main() {\n  uint32_t value;\n  uint64_t len = 4;\n  int ret = ckb_load_witness((void*) &value, &len, 0, 0,\n                             CKB_SOURCE_GROUP_INPUT);\n  if (ret != CKB_SUCCESS) {\n    return ret;\n  }\n  if (len < 4) {\n    return -1;\n  }\n\n  init();\n\n  uint32_t times = value >> 8;\n  value = value & 0xFF;\n  uint8_t result = 0;\n\n  for (int i = 0; i < times; i++) {\n    result += Z_runZ_ii(value);\n  }\n\n  return result;\n}\nEOF\n$ cat << EOF > secp_wavm_main.c\n#include \"secp_precompiled_glue.h\"\n#include \"abi/ckb_vm_wasi_abi.h\"\n#include \"ckb_syscalls.h\"\n\nint main() {\n  uint32_t value;\n  uint64_t len = 4;\n  int ret = ckb_load_witness((void*) &value, &len, 0, 0,\n                             CKB_SOURCE_GROUP_INPUT);\n  if (ret != CKB_SUCCESS) {\n    return ret;\n  }\n  if (len < 4) {\n    return -1;\n  }\n\n  uint32_t times = value >> 8;\n  value = value & 0xFF;\n  uint8_t result = 0;\n\n  for (int i = 0; i < times; i++) {\n    ckb_debug(\"One run!\");\n    wavm_ret_int32_t wavm_ret = wavm_exported_function_run(NULL, value);\n    result += wavm_ret.value;\n  }\n\n  return result;\n}\nEOF\n```\n\nNow we can compile the code, then compare binary size as well as running cycles:\n\n```\n$ cd $TOP\n$ sudo docker run --rm -it -v `pwd`:/code nervos/ckb-riscv-gnu-toolchain:bionic-20191209 bash\nroot@a237c0d00b1c:/# cd /code/\nroot@a237c0d00b1c:/code# riscv64-unknown-elf-gcc -O3 -I ckb-c-stdlib -I wavm-aot-generator -I wabt/wasm2c secp_wabt_main.c secp.c wabt/wasm2c/wasm-rt-impl.c -o secp_wabt\nroot@a237c0d00b1c:/code# riscv64-unknown-elf-gcc -O3 -I ckb-c-stdlib -I wavm-aot-generator -I wabt/wasm2c secp_wavm_main.c wavm-aot-generator/abi/riscv64_runtime.S secp_precompiled.o -o secp_wavm -Wl,-T wavm-aot-generator/abi/riscv64.lds\nroot@a237c0d00b1c:/code# exit\nexit\n$ ckb-binary-patcher/target/release/ckb-binary-patcher -i secp_wavm -o secp_wavm_patched\n\n$ ls -l secp_wabt secp_wavm_patched\n-rwxrwxr-x 1 ubuntu 1791744 Mar  3 05:27 secp_wabt*\n-rw-rw-r-- 1 ubuntu 1800440 Mar  3 05:29 secp_wavm_patched\n$ ./runner.rb secp_wabt 0x01010000\nRun result: Ok(0)\nTotal cycles consumed: 35702943\nTransfer cycles: 438060, running cycles: 35264883\n$ ./runner.rb secp_wabt 0x01050000\nRun result: Ok(0)\nTotal cycles consumed: 90164183\nTransfer cycles: 438060, running cycles: 89726123\n$ ./runner.rb secp_wavm_patched 0x01010000\nRun result: Ok(0)\nTotal cycles consumed: 10206568\nTransfer cycles: 428764, running cycles: 9777804\n$ ./runner.rb secp_wavm_patched 0x01050000\nRun result: Ok(0)\nTotal cycles consumed: 49307936\nTransfer cycles: 428764, running cycles: 48879172\n```\n\nLike the previous case, we can deduce facts from the values as well:\n\n- The binary sizes generated by the 2 version are only slightly different, WAVM has a slightly larger binary but the bytes needed to load into VM is less.\n- In this case, a single secp256k1 verification step takes 9775342 in the WAVM version, while 13615310 cycles are needed in the WABT version. Here we can see doing translations in LLVM directly does provide better performance than a restored C version in WABT.\n- For such a complex program, the WAVM version still only takes 2462 cycles to set up, while the WABT version would take an enourmous 21649573 cycles to set up things. Here WAVM version can provide you with big wins.\n\nSince the current direct path from Rust to RISC-V does not allow std to be used. We cannot provide a similar native version directly. But just for the curious ones, I still provide a similar function in pure C, and we can measure the cycles taken by the C version compiled directly into RISC-V:\n\n```\n$ cd $TOP\n$ git clone --recursive https://github.com/nervosnetwork/ckb-vm-bench-scripts\n$ cd ckb-vm-bench-scripts\n$ git checkout f7ab37c055b1a59bbc4f931c732331642c728c1d\n$ cd $TOP\n$ sudo docker run --rm -it -v `pwd`:/code nervos/ckb-riscv-gnu-toolchain:bionic-20191209 bash\nroot@ad22c452cb54:/# cd /code/ckb-vm-bench-scripts\nroot@ad22c452cb54:/code/ckb-vm-bench-scripts# make\n(omitted ...)\nroot@ad22c452cb54:/code/ckb-vm-bench-scripts# exit\nexit\n\n$ ./runner.rb ckb-vm-bench-scripts/build/secp256k1_bench 0x01010000\nRun result: Ok(0)\nTotal cycles consumed: 1621594\nTransfer cycles: 272630, running cycles: 1348964\n\n$ ./runner.rb ckb-vm-bench-scripts/build/secp256k1_bench 0x01050000\nRun result: Ok(0)\nTotal cycles consumed: 7007598\nTransfer cycles: 272630, running cycles: 6734968\n```\n\nAs we can see here, the C native version takes 1346501 cycles per secp256k1 step, and 2463 cycles for initial bookkeeping work. Both the binary sizes and loaded bytes are also smaller.\n\nI do want to mention here that we are not comparing the same code here, the C version and Rust version use different implementation, and we haven't benched the quality of the 2 implementations directly. That being said, assuming the 2 versions have similar performance, the Rust code, compiled to WASM first, then to RISC-V, is roughly 7x the performance of C code. Considering bound checking logic might also be performed by the Rust version, I would consider this is good performance for many many use cases. There're a whole lot of scripts that can work with this level of performance. What's more, you can always combine the C implemented performance oriented code and Rust implemented logic code together to enjoy the best of both works. And we haven't mentioned the best of this new route. Last but not least, all the involved projects, including Rust, LLVM, WAVM and our generator are active projects with development work going on, soon this gap might become much narrower with progresses made by all the awesome engineers.\n\n# WASI\n\nI kept talking about doing Rust on CKB via WASM, my colleague has [proved](https://justjjy.com/Build-CKB-contract-with-Rust-part-1) there is a path you can go directly from Rust to RISC-V, what does a WASM intermediate path help here? The problem with a native path, is that Rust's std is not supported in RISC-V port, to make matters worse, libc binding is also absent. This means you will really have to work with core Rust, a minimal and limited set of Rust. Please don't get me wrong, there's nothing bad about going with core Rust, if your use case is enough with Rust's std, you are perfectly good going that path. But I do want to provide a different path, where std is available, so most Rust libraries on crates can be used to build awesome CKB scripts. This is what the WASM path can enable us with WASI.\n\nIf you haven't heard of it, [WASI](https://wasi.dev/) is a standard way of interfacing with the running environment for a WebAssembly program. It has [been](https://github.com/alexcrichton/cc-rs/issues/447) [proved](https://github.com/alexcrichton/cc-rs/issues/446) that Rust's WASM future lies in a new `wasm32-wasi` target. By doing the WASM intermediate step, we can build WASI support right into CKB script, enjoying the future-proof `wasm32-wasi` target of Rust! In fact, WAVM already provides an [example](https://github.com/xxuejie/WAVM/blob/master/Examples/helloworld.wast) that leverages 2 of WASI's API, let's see if we can get that to work on CKB:\n\n```\n$ cd $TOP\n$ WAVM/build/bin/wavm compile --target-triple riscv64 WAVM/Examples/helloworld.wast helloworld_precompiled.wasm\n$ wavm-aot-generator/target/release/wavm-aot-generator helloworld_precompiled.wasm helloworld_precompiled\n$ cat << EOF > helloworld_wavm_main.c\n#include \"helloworld_precompiled_glue.h\"\n#include \"abi/ckb_vm_wasi_abi.h\"\n\n/* main is already generated via wavm-aot-generator */\nEOF\n$ sudo docker run --rm -it -v `pwd`:/code nervos/ckb-riscv-gnu-toolchain:bionic-20191209 bash\nroot@d28602dba318:/# cd /code\nroot@d28602dba318:/code# riscv64-unknown-elf-gcc -O3 -I ckb-c-stdlib -I wavm-aot-generator -I wabt/wasm2c helloworld_wavm_main.c wavm-aot-generator/abi/riscv64_runtime.S\nhelloworld_precompiled.o -o helloworld_wavm -Wl,-T wavm-aot-generator/abi/riscv64.lds\nroot@d28602dba318:/code# exit\nexit\n$ ckb-binary-patcher/target/release/ckb-binary-patcher -i helloworld_wavm -o helloworld_wavm_patched\n$ RUST_LOG=debug ./runner.rb helloworld_wavm_patched 0x\nDEBUG:<unknown>: script group: Byte32(0x86cfac3b49b8f97f913aa5a09d02ad1e5b1ab5be0be793815e9cb714ba831948) DEBUG OUTPUT: Hello World!\n\nRun result: Ok(0)\nTotal cycles consumed: 20260\nTransfer cycles: 17728, running cycles: 2532\n```\n\nWe can see the WASI APIs work perfectly! This is because I have already provided the [implementation](https://github.com/xxuejie/wavm-aot-generator/blob/8c818747eb19494fc9c5e0289810aa7ad484a22e/abi/ckb_vm_wasi_abi.h#L51-L91) for the 2 APIs used here. While it is incomplete now, I will work to add shims for all WASI APIs. After that we can have Rust programs, with std supported, compiled to `wasm32-wasi` target's WASM code, then translated to RISC-V perfectly.\n\nYou see many different blockchains claiming they use WebAssembly everyday, but what they don't tell you, is that WebAssembly is designed to have many flavors, and they just choose to support one of them. In fact [many](https://github.com/paritytech/substrate/issues/4043) [famous](https://github.com/confio/cosmwasm/blob/master/Building.md#requirements) [blockchains](https://github.com/CasperLabs/CasperLabs/tree/dev/execution-engine/cargo-casperlabs#building-the-contract~) [only](https://github.com/EOSIO/eosio.cdt/blob/master/tools/external/wabt/src/emscripten-helpers.cc) tend to support a bare minimal WebAssembly program. While most of them let you use Rust, they only use the flaky and could-be-deprecated `wasm32-unknown-unknown` target. As a result, they either just disable Rust std directly, claiming you don't need it, or has flaky support that might break going into the future, or they cannot afford to change the code for compatibility reasons. On the other hand, you can enjoy WASI and full feature Rust in CKB. Many ask us why we don't use WebAssembly directly, I would say that we are the first one, or at least among the first ones to get WebAssembly right on blockchains.\n\n# \"Vice Verca\" doesn't always work well\n\nOne recurring topic we heard, is that if you can translate WASM to RISC-V, you can also translate RISC-V to WASM! In a sense that is true, but there's a difference betweeen one thing that works, and one thing that works well.\n\nRISC-V, due to its design, is a very simple specification that maps extremely well to modern day CPUs. If you check our VM implementation, you might notice that most RISC-V instructions map directly onto a dozen x86-64 CPU instructions. We are just building a minimal secure layer that works on top of the CPUs in your machines. WASM, on the other hand, is a [beast](https://webassembly.org/docs/future-features/) much like JVM, there are tons of features in the spec already, there are also tons of features being added to the spec everyday. Many of the new features don't have direct mappings on CPUs, ranging from lower level instructions such as `memory.grow` or `callIndirect`, to higher level features such as garbage collections, or threading. When you pick WebAssembly as your blockchain's engine, you will have to pick a set of features, and decide how/if you want to migrate when new features keep coming out. To complicate this matter, you cannot just change the implementation of some features in your current WebAssembly engine, cuz that might bring incompatible changes.\n\nWhen you pick RISC-V as the underlying engine, you don't have such concerns. RISC-V is designed for hardware that never changes. When the spec is fixed, it will be fixed forever, and all compilers have to respect bugs in the spec. And when you are implementing WebAssembly programs on top of RISC-V, you are free to change the implementations of higher constructs in WebAssembly anyway you want. For example, you might discover a new garbage collection algorithm that will help your smart contracts, you can deploy the algorithm by upgrading the a different smart contract, no forks are needed to support this. All of these are extremely hard to being even impossible if you tackle the problem starting from a WebAssembly engine. That is where I believe the true beauty of CKB's unique design lies.\n\n# Recap\n\nHere's one suggestion: if someone tells you his/her blockchain uses WebAssembly, do yourself a favor, and ask what specific spec his/her WebAssembly engine uses, and how he/she plan to tackle the problem when more features are added to the WebAssembly specification. WebAssembly is an evergrowing specification due to its Web roots, picking one specification and freeze there is never a good strategy for employing WebAssembly in a stack. There's nothing wrong relying on WebAssembly in the blockchain world, but it matters if WebAssembly is used in the correct way. To me, CKB is one example that WebAssembly is used in the correct way with future issues considered. I do believe you will thank yourself years later, if you take the extra effort ensuring your choice of blockchain deploys WebAssembly the correct way."},{"id":"intro-to-ckb-script-programming-9","metadata":{"permalink":"/blog/intro-to-ckb-script-programming-9","editUrl":"https://github.com/facebook/docusaurus/edit/main/website/blog/intro-to-script-9.md","source":"@site/blog/intro-to-script-9.md","title":"Introduction to CKB Script Programming 9: Cycle Reductions in Duktape Script","description":"As shown earlier, plain JavaScript can be used to build CKB scripts. But if you have tried this route before, one problem you would notice, is that JavaScript based scripts tend to consume much more cycles than a native version. While this is less of an issue in experimenting, it is very real in production environment","date":"2020-03-19T00:00:00.000Z","tags":[],"readingTime":10.6,"hasTruncateMarker":false,"authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}],"frontMatter":{"title":"Introduction to CKB Script Programming 9: Cycle Reductions in Duktape Script","date":"2020-03-19","slug":"intro-to-ckb-script-programming-9","authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}]},"unlisted":false,"prevItem":{"title":"Introduction to CKB Script Programming 8: Performant WASM","permalink":"/blog/intro-to-ckb-script-programming-8"},"nextItem":{"title":"Introduction to CKB Script Programming 10: Language Choices","permalink":"/blog/intro-to-ckb-script-programming-10"}},"content":"As shown earlier, plain JavaScript can be used to build CKB scripts. But if you have tried this route before, one problem you would notice, is that JavaScript based scripts tend to consume much more cycles than a native version. While this is less of an issue in experimenting, it is very real in production environment: more cycles can naturally be reflected in more transaction fees. It's obvious that the following solutions can be used to tackle this problem:\n\n1. Rewrite a JavaScript in a native compiled language, such as C or Rust;\n2. Use better algorithms that require less cycles;\n\nIn this post, we would take a different path, and take a look at JavaScript scripts alone. Even though JavaScript can consume more cycles, it still allows fast iteraction, which might be critical in certain use cases. So the question I want to ask here is: if we decide to use JavaScript to build our CKB scripts, and we have already improved the algorithms and implementations to an optimal state, are there any other steps we can take to further optimize cycle reductions? Here we shall see some attempts at the problem.\n\n# Script To Use\n\nWe will build a simple script here that reads and prints current script args. To build the JavaScript script, we will first need the [duktape template](https://github.com/xxuejie/ckb-duktape-template):\n\n```\n$ export TOP=$(pwd)\n$ git clone https://github.com/xxuejie/ckb-duktape-template\n$ cd ckb-duktape-template\n$ git checkout 1a3536ae1dc14abe1e91461ab356e8967cde8d7b\n$ npm i\n$ cat << EOF > src/index.js\nimport { Script } from \"../schema/blockchain.js\"\n\nfunction bytesToHex(b) {\n  return \"0x\" + Array.prototype.map.call(\n    new Uint8Array(b),\n    function(x) {\n      return ('00' + x.toString(16)).slice(-2)\n    }\n  ).join('')\n}\n\nconst script = new Script(CKB.load_script(0))\nconst args = script.getArgs().raw()\nCKB.debug(bytesToHex(args))\nEOF\n$ npm run build\n```\n\nNote this example also levearges the rebuilt [Molecule JavaScript plugin](https://github.com/xxuejie/moleculec-es). Compared to the previous one, it provides a better API, while at the same time saving huge code size and runtime cycles.\n\nLet's get a baseline number first:\n\n```\n$ cd $TOP\n$ git clone --recursive https://github.com/xxuejie/ckb-duktape\n$ cd ckb-duktape\n$ git checkout d6241938247b402ec56c7af218acfc9049ac753d\n$ docker run --rm -it -v `pwd`:/code nervos/ckb-riscv-gnu-toolchain:bionic-20191209 bash\nroot@0d31cad7a539:~# cd /code\nroot@0d31cad7a539:/code# make\nroot@0d31cad7a539:/code# exit\nexit\n$ cd $TOP\n$ git clone https://github.com/xxuejie/ckb-standalone-debugger\n$ cd ckb-standalone-debugger/bins\n$ git checkout 3c503b95962e29057b248aeed4f639180c132fff\n$ cargo build --release\n$ cd $TOP\n$ cat << EOF > runner.rb\n#!/usr/bin/env ruby\n\nrequire \"rbnacl\"\n\ndef bin_to_hex(bin)\n  \"0x#{bin.unpack1('H*')}\"\nend\n\ndef blake2b(data)\n  RbNaCl::Hash::Blake2b.digest(data,\n                               personal: \"ckb-default-hash\",\n                               digest_size: 32)\nend\n\nif ARGV.length != 2 && ARGV.length != 3\n  STDERR.puts \"Usage: runner.rb <duktape file> <script file> <optional dump file>\"\n  exit 1\nend\n\nduktape_binary = File.read(ARGV[0])\nduktape_hash = blake2b(duktape_binary)\nscript_binary = File.read(ARGV[1])\n\ntx = DATA.read.sub(\"@DUKTAPE_CODE\", bin_to_hex(duktape_binary))\n       .sub(\"@DUKTAPE_HASH\", bin_to_hex(duktape_hash))\n       .sub(\"@SCRIPT_CODE\", bin_to_hex(script_binary))\n\nFile.write(\"tx.json\", tx)\ncommandline = \"ckb-standalone-debugger/bins/target/release/ckb-debugger --tx-file tx.json --script-group-type lock -i 0 -e input\"\nif ARGV.length == 3\n  commandline += \" -d #{ARGV[2]}\"\nend\nSTDERR.puts \"Executing: #{commandline}\"\nexec(commandline)\n\n__END__\n{\n  \"mock_info\": {\n    \"inputs\": [\n      {\n        \"input\": {\n          \"previous_output\": {\n            \"tx_hash\": \"0xa98c57135830e1b91345948df6c4b8870828199a786b26f09f7dec4bc27a73da\",\n            \"index\": \"0x0\"\n          },\n          \"since\": \"0x0\"\n        },\n        \"output\": {\n          \"capacity\": \"0x4b9f96b00\",\n          \"lock\": {\n            \"args\": \"0x32e555f3ff8e135cece1351a6a2971518392c1e30375c1e006ad0ce8eac07947c219351b150b900e50a7039f1e448b844110927e5fd9bd30425806cb8ddff1fd970dd9a8\",\n            \"code_hash\": \"@DUKTAPE_HASH\",\n            \"hash_type\": \"data\"\n          },\n          \"type\": null\n        },\n        \"data\": \"0x\"\n      }\n    ],\n    \"cell_deps\": [\n      {\n        \"cell_dep\": {\n          \"out_point\": {\n            \"tx_hash\": \"0xfcd1b3ddcca92b1e49783769e9bf606112b3f8cf36b96cac05bf44edcf5377e6\",\n            \"index\": \"0x0\"\n          },\n          \"dep_type\": \"code\"\n        },\n        \"output\": {\n          \"capacity\": \"0x702198d000\",\n          \"lock\": {\n            \"args\": \"0x\",\n            \"code_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n            \"hash_type\": \"data\"\n          },\n          \"type\": null\n        },\n        \"data\": \"@SCRIPT_CODE\"\n      },\n      {\n        \"cell_dep\": {\n          \"out_point\": {\n            \"tx_hash\": \"0xfcd1b3ddcca92b1e49783769e9bf606112b3f8cf36b96cac05bf44edcf5377e6\",\n            \"index\": \"0x1\"\n          },\n          \"dep_type\": \"code\"\n        },\n        \"output\": {\n          \"capacity\": \"0x702198d000\",\n          \"lock\": {\n            \"args\": \"0x\",\n            \"code_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n            \"hash_type\": \"data\"\n          },\n          \"type\": null\n        },\n        \"data\": \"@DUKTAPE_CODE\"\n      }\n    ],\n    \"header_deps\": [\n      {\n        \"compact_target\": \"0x1a1e4c2f\",\n        \"hash\": \"0x51d199c4060f703344eab3c9b8794e6c60195ae9093986c35dba7c3486224409\",\n        \"number\": \"0xd8fc4\",\n        \"parent_hash\": \"0xc02e01eb57b205c6618c9870667ed90e13adb7e9a7ae00e7a780067a6bfa6a7b\",\n        \"nonce\": \"0xca8c7caa8100003400231b4f9d6e0300\",\n        \"timestamp\": \"0x17061eab69e\",\n        \"transactions_root\": \"0xffb0863f4ae1f3026ba99b2458de2fa69881f7508599e2ff1ee51a54c88b5f88\",\n        \"proposals_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        \"uncles_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        \"version\": \"0x0\",\n        \"epoch\": \"0x53f00fa000232\",\n        \"dao\": \"0x4bfe53a5a9bb9a30c88898b9dfe22300a58f2bafed47680000d3b9f5b6630107\"\n      }\n    ]\n  },\n  \"tx\": {\n    \"version\": \"0x0\",\n    \"cell_deps\": [\n      {\n        \"out_point\": {\n          \"tx_hash\": \"0xfcd1b3ddcca92b1e49783769e9bf606112b3f8cf36b96cac05bf44edcf5377e6\",\n          \"index\": \"0x0\"\n        },\n        \"dep_type\": \"code\"\n      },\n      {\n        \"out_point\": {\n          \"tx_hash\": \"0xfcd1b3ddcca92b1e49783769e9bf606112b3f8cf36b96cac05bf44edcf5377e6\",\n          \"index\": \"0x1\"\n        },\n        \"dep_type\": \"code\"\n      }\n    ],\n    \"header_deps\": [\n      \"0x51d199c4060f703344eab3c9b8794e6c60195ae9093986c35dba7c3486224409\"\n    ],\n    \"inputs\": [\n      {\n        \"previous_output\": {\n          \"tx_hash\": \"0xa98c57135830e1b91345948df6c4b8870828199a786b26f09f7dec4bc27a73da\",\n          \"index\": \"0x0\"\n        },\n        \"since\": \"0x0\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"capacity\": \"0x0\",\n        \"lock\": {\n          \"args\": \"0x\",\n          \"code_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n          \"hash_type\": \"data\"\n        },\n        \"type\": null\n      }\n    ],\n    \"witnesses\": [\n      \"0x210000000c0000001d0000000d0000006920616d20612073656372657400000000\"\n    ],\n    \"outputs_data\": [\n      \"0x\"\n    ]\n  }\n}\nEOF\n$ chmod +x runner.rb\n$ RUST_LOG=debug ./runner.rb ckb-duktape/build/load0 ckb-duktape-template/build/duktape.js\nExecuting: ckb-standalone-debugger/bins/target/release/ckb-debugger --tx-file tx.json --script-group-type lock -i 0 -e input\nDEBUG:<unknown>: script group: Byte32(0xcf13fa84ff3a615dd496e9ad8647af01078b11ba1c2757889f0a95e2520fdeb9) DEBUG OUTPUT: 0x32e555f3ff8e135cece1351a6a2971518392c1e30375c1e006ad0ce8eac07947c219351b150b900e50a7039f1e448b844110927e5fd9bd30425806cb8ddff1fd970dd9a8\nRun result: Ok(0)\nTotal cycles consumed: 20198757\nTransfer cycles: 67328, running cycles: 20131429\n```\n\nAbout 20 million cycles are needed for this simple script. As a comparison, we can also implement similar function in pure C:\n\n```\n$ cd $TOP\n$ cat << EOF > c.c\n#include \"blockchain.h\"\n#include \"ckb_syscalls.h\"\n\n#define MAXIMUM_ARG_SIZE 4096\n#define SCRIPT_SIZE 32768\n\n#define ERROR_ARGUMENTS_LEN -1\n#define ERROR_ENCODING -2\n#define ERROR_SYSCALL -3\n#define ERROR_SCRIPT_TOO_LONG -21\n#define ERROR_OVERFLOWING -51\n#define ERROR_AMOUNT -52\n\nint main() {\n  unsigned char script[SCRIPT_SIZE];\n  uint64_t len = SCRIPT_SIZE;\n  int ret = ckb_load_script(script, &len, 0);\n  if (ret != CKB_SUCCESS) {\n    return ERROR_SYSCALL;\n  }\n  if (len > SCRIPT_SIZE) {\n    return ERROR_SCRIPT_TOO_LONG;\n  }\n  mol_seg_t script_seg;\n  script_seg.ptr = (uint8_t *)script;\n  script_seg.size = len;\n\n  if (MolReader_Script_verify(&script_seg, false) != MOL_OK) {\n    return ERROR_ENCODING;\n  }\n\n  mol_seg_t args_seg = MolReader_Script_get_args(&script_seg);\n  mol_seg_t args_bytes_seg = MolReader_Bytes_raw_bytes(&args_seg);\n  if (args_bytes_seg.size > MAXIMUM_ARG_SIZE) {\n    return ERROR_ARGUMENTS_LEN;\n  }\n\n  static const char HEXCHARS[] = \"0123456789abcdef\";\n  char hex[MAXIMUM_ARG_SIZE * 2 + 1];\n  for (size_t i = 0; i < args_bytes_seg.size; i++) {\n    hex[i * 2] = HEXCHARS[args_bytes_seg.ptr[i] >> 4];\n    hex[i * 2 + 1] = HEXCHARS[args_bytes_seg.ptr[i] & 0xF];\n  }\n  hex[args_bytes_seg.size * 2] = '\\0';\n  ckb_debug(hex);\n\n  return CKB_SUCCESS;\n}\nEOF\n$ docker run --rm -it -v `pwd`:/code nervos/ckb-riscv-gnu-toolchain:bionic-20191209 bash\nroot@57b79063c965:/# cd /code\nroot@57b79063c965:/code# riscv64-unknown-elf-gcc -O3 -I ckb-duktape/deps/ckb-c-stdlib -I ckb-duktape/deps/molecule c.c -o c -Wl,-static -fdata-sections -ffunction-sections -Wl,--gc-sections -Wl,-s\nroot@57b79063c965:/code# exit\nexit\n$ RUST_LOG=debug ./runner.rb c ckb-duktape-template/build/duktape.js\nExecuting: ckb-standalone-debugger/bins/target/release/ckb-debugger --tx-file tx.json --script-group-type lock -i 0 -e input\nDEBUG:<unknown>: script group: Byte32(0x9f637b251b36de8e6c8b48a1db2f2dcbb0e7b667de1d3ec02c589a7b680842e1) DEBUG OUTPUT: 32e555f3ff8e135cece1351a6a2971518392c1e30375c1e006ad0ce8eac07947c219351b150b900e50a7039f1e448b844110927e5fd9bd30425806cb8ddff1fd970dd9a8\nRun result: Ok(0)\nTotal cycles consumed: 5456\nTransfer cycles: 878, running cycles: 4578\n```\n\nAs we shall see here, a similar C script takes only 4578 cycles, which is much less than the JavaScript scripts. Even though our JavaScript script might need consume so less cycles, we can still significantly reduce the cycle consumptions.\n\n# Step 1: Skip Initialization\n\nThose who are familiar with dynamic languages, would realize that all dynamic language implementations will need an initialization phase to create and properly setup the VM, this could take significant work, costing a lot of cycles. Our first idea comes from this: what if we can save the already initialized state, and reuse that state in later VM executions? The whole state of a CKB VM instance, is 33 registers(32 general purpose registers + PC register) and the memory states. If we can dump those into a separate binary, and recreate the same VM state later, we won't need to do the whole initialization step again and again.\n\nckb-standalone-debugger actually provides such a dump feature. It adds a new syscall to the VM instance created by the debugger(notice this syscall is useless in production, and will probably never make it into production). When the syscall gets executed, the debugger instance would serialize all VM states, including all registers and memories into a custom-built executable. Later if we instantiate a new VM instance with this generated executable, it will restore all VM states, and the VM will continue to run as if it just returns from the syscall. This way we can do the necessary initialization steps offline via the debugger, then only deploy the generated executable to CKB, all later executions on the executable, can skip the costly initialization part, hence saving a huge amount of cycles.\n\nI have already prepared a duktape [instance](https://github.com/xxuejie/ckb-duktape/blob/d6241938247b402ec56c7af218acfc9049ac753d/c/dump_load0.c) which performs the setup, then execute the dump syscall, we can now give this a test:\n\n```\n$ cd $TOP\n$ RUST_LOG=debug ./runner.rb ckb-duktape/build/dump_load0 ckb-duktape-template/build/duktape.js dump0.bin\nExecuting: ckb-standalone-debugger/bins/target/release/ckb-debugger --tx-file tx.json --script-group-type lock -i 0 -e input -d dump0.bin\nDEBUG:<unknown>: script group: Byte32(0xb5656359cbcd52cfa68e163cdd217657f0cfc533c909d13a1fdd8032f6b4f1f0) DEBUG OUTPUT: 0x32e555f3ff8e135cece1351a6a2971518392c1e30375c1e006ad0ce8eac07947c219351b150b900e50a7039f1e448b844110927e5fd9bd30425806cb8ddff1fd970dd9a8\nRun result: Ok(0)\nTotal cycles consumed: 20199104\nTransfer cycles: 67352, running cycles: 20131752\n\n$ RUST_LOG=debug ./runner.rb dump0.bin ckb-duktape-template/build/duktape.js\nExecuting: ckb-standalone-debugger/bins/target/release/ckb-debugger --tx-file tx.json --script-group-type lock -i 0 -e input\nDEBUG:<unknown>: script group: Byte32(0x51959c6288a1cfba0d7f7dc8c5a90cf9a84bf5b58f1d5ed3b355497d119fba16) DEBUG OUTPUT: 0x32e555f3ff8e135cece1351a6a2971518392c1e30375c1e006ad0ce8eac07947c219351b150b900e50a7039f1e448b844110927e5fd9bd30425806cb8ddff1fd970dd9a8\nRun result: Ok(0)\nTotal cycles consumed: 16249542\nTransfer cycles: 96998, running cycles: 16152544\n```\n\nThe first command here executes the script as normals, but internally it [calls](https://github.com/xxuejie/ckb-duktape/blob/d6241938247b402ec56c7af218acfc9049ac753d/c/dump_load0.c#L14) the dump syscall, resultling in a dumping of the VM state then into `dump0.bin` executable file. Later when we run CKB VM on `dump0.bin` directly, we can notice it performs the same action as the above duktape binary, but saves us close to 4 million cycles.\n\n# Step 2: Bytecode Over Source\n\nPreviously, we've been running duktape on CKB VM directly against JavaScript source, this means at runtime, duktape would first need to parse the JavaScript source code, then execute it. The parsing time exists in every single invocation of the same JavaScript file, which could also be a huge waste of cycles. Luckily, duktape provides a [bytecode](https://github.com/svaarala/duktape/blob/master/doc/bytecode.rst) format: we can parse the JavaScript source to duktape bytecode format, and only loads and runs the bytecode at runtime. Let's try this now:\n\n```\n$ cd $TOP\n$ ckb-duktape/build/dump_bytecode ckb-duktape-template/build/duktape.js script.bin\n$ RUST_LOG=debug ./runner.rb ckb-duktape/build/dump_load0 script.bin dump0.bin\nExecuting: ckb-standalone-debugger/bins/target/release/ckb-debugger --tx-file tx.json --script-group-type lock -i 0 -e input -d dump0.bin\nDEBUG:<unknown>: script group: Byte32(0xb5656359cbcd52cfa68e163cdd217657f0cfc533c909d13a1fdd8032f6b4f1f0) DEBUG OUTPUT: 0x32e555f3ff8e135cece1351a6a2971518392c1e30375c1e006ad0ce8eac07947c219351b150b900e50a7039f1e448b844110927e5fd9bd30425806cb8ddff1fd970dd9a8\nRun result: Ok(0)\nTotal cycles consumed: 9239414\nTransfer cycles: 67352, running cycles: 9172062\n\n$ RUST_LOG=debug ./runner.rb dump0.bin script.bin\nExecuting: ckb-standalone-debugger/bins/target/release/ckb-debugger --tx-file tx.json --script-group-type lock -i 0 -e input\nDEBUG:<unknown>: script group: Byte32(0x51959c6288a1cfba0d7f7dc8c5a90cf9a84bf5b58f1d5ed3b355497d119fba16) DEBUG OUTPUT: 0x32e555f3ff8e135cece1351a6a2971518392c1e30375c1e006ad0ce8eac07947c219351b150b900e50a7039f1e448b844110927e5fd9bd30425806cb8ddff1fd970dd9a8\nRun result: Ok(0)\nTotal cycles consumed: 5289852\nTransfer cycles: 96998, running cycles: 5192854\n```\n\nThe [dump_load0](https://github.com/xxuejie/ckb-duktape/blob/d6241938247b402ec56c7af218acfc9049ac753d/c/dump_load0.c#L26-L37) binary actually supports both duktape bytecode and JavaScript source. It does a runtime check to see if the loaded data here is duktape bytecode or JavaScript source. Here we can see that by combining the previous 2 solutions, we can already shrink the cycle consumption from ~ 20 million to ~ 5 million.\n\nNote that duktape bytecode does come with tradeoffs. It never ensures version compatibility, so different versions of duktape, or even different builds of the same duktape version could use different bytecode format. In a normal environment, this could be a problem, but since here we also ship duktape binary as a smart contract, we can lock the version of duktape binary we are using, ensuring the bytecode always works. Another drawback, and a big surprise to many, is that the bytecode file is in fact usually larger than the original JavaScript source file:\n\n```\n$ cd $TOP\n$ ls -l script.bin\n-rw-rw-r-- 1 ubuntu 7810 Mar 19 05:28 script.bin\n$ ls -l ckb-duktape-template/build/duktape.js\n-rw-rw-r-- 1 ubuntu 3551 Mar 19 04:46 ckb-duktape-template/build/duktape.js\n```\n\nIn our example, while the original minimize JavaScript file is about 3.5K, the generated bytecode file is closed to 8K. This brings a tradeoff depending on your use case: do you want smaller file, or less cycle consumption?\n\n# Step 3: Skip Cleanup Work\n\nCKB VM works slightly different from other environment: it provides you with a fixed 4MB memory segment, and the whole segment will just be thrown away once the code finishes execution. This brings an interesting insight: in a normal environment, you definitely want to cleanup the resource you use before exiting, but in CKB VM environment, this is not necessary, since the whole memory segment will be destroyed all together. As long as you signal the correct response, cleanup steps are actually just a waste of cycles in CKB VM. Given this consideration, I've provided [dump_load0_nocleanup](https://github.com/xxuejie/ckb-duktape/blob/d6241938247b402ec56c7af218acfc9049ac753d/c/dump_load0_nocleanup.c) variation, which [does not perform](https://github.com/xxuejie/ckb-duktape/blob/d6241938247b402ec56c7af218acfc9049ac753d/c/dump_load0_nocleanup.c#L48-L49) any cleanup work after running the script. Now it is the time to try this final version:\n\n```\n$ cd $TOP\n$ RUST_LOG=debug ./runner.rb ckb-duktape/build/dump_load0_nocleanup script.bin dump0.bin\nExecuting: ckb-standalone-debugger/bins/target/release/ckb-debugger --tx-file tx.json --script-group-type lock -i 0 -e input -d dump0.bin\nDEBUG:<unknown>: script group: Byte32(0x06034ffb00fec553882c6a9c7614333a728828772d3c236a7f8fa6af60669538) DEBUG OUTPUT: 0x32e555f3ff8e135cece1351a6a2971518392c1e30375c1e006ad0ce8eac07947c219351b150b900e50a7039f1e448b844110927e5fd9bd30425806cb8ddff1fd970dd9a8\nRun result: Ok(0)\nTotal cycles consumed: 7856033\nTransfer cycles: 67348, running cycles: 7788685\n\n$ RUST_LOG=debug ./runner.rb dump0.bin script.bin\nExecuting: ckb-standalone-debugger/bins/target/release/ckb-debugger --tx-file tx.json --script-group-type lock -i 0 -e input\nDEBUG:<unknown>: script group: Byte32(0x0e948e69dd75f2d6676048569073afe4ec2b284144bbe33a6216b13171606d18) DEBUG OUTPUT: 0x32e555f3ff8e135cece1351a6a2971518392c1e30375c1e006ad0ce8eac07947c219351b150b900e50a7039f1e448b844110927e5fd9bd30425806cb8ddff1fd970dd9a8\nRun result: Ok(0)\nTotal cycles consumed: 3903352\nTransfer cycles: 96994, running cycles: 3806358\n```\n\nWith all the solutions combined, we managed to reduce the cycle consumption of a JavaScript based CKB smart contract from 20 million to less than 4 million. This is still far from the C version, which takes less than 5000 cycles. But in many cases, a higher level language like JavaScript will provide superiority over plain old C, and the cycle consumption here might already be good enough.\n\n# Future\n\nThe above are just 3 simple solutions you can levarage, there are very likely to be more way you can use to reduce cycles. One thing to remember, is that you don't have to cater for rules established in an everyday running program. As long as the script satisfies the verification needs on chain, you can employ any techniques to reduce the cycle consumption."},{"id":"intro-to-ckb-script-programming-10","metadata":{"permalink":"/blog/intro-to-ckb-script-programming-10","editUrl":"https://github.com/facebook/docusaurus/edit/main/website/blog/intro-to-script-10.md","source":"@site/blog/intro-to-script-10.md","title":"Introduction to CKB Script Programming 10: Language Choices","description":"When crafting CKB, we made the choice to use a generic VM, so it is not bound to any particular programming language. This model certainly has its pros, but it also comes with problems. A question we frequently receive is: what language should I use to program on Nervos CKB? Let's try to answer this question here.","date":"2020-04-09T00:00:00.000Z","tags":[],"readingTime":10.705,"hasTruncateMarker":false,"authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}],"frontMatter":{"title":"Introduction to CKB Script Programming 10: Language Choices","date":"2020-04-09","slug":"intro-to-ckb-script-programming-10","authors":[{"name":"Xuejie Xiao","title":"blockchain engineer at Cryptape","url":"https://xuejie.space/about/"}]},"unlisted":false,"prevItem":{"title":"Introduction to CKB Script Programming 9: Cycle Reductions in Duktape Script","permalink":"/blog/intro-to-ckb-script-programming-9"}},"content":"When crafting CKB, we made the choice to use a generic VM, so it is not bound to any particular programming language. This model certainly has its pros, but it also comes with problems. A question we frequently receive is: what language should I use to program on Nervos CKB? Let's try to answer this question here.\n\nFirst of all, I have had the belief that each dapp developer should have the freedom to pick their own choice of languages. No blockchain creators know the nuts and bolts better than the dapp developer themselves. No single programming language provides solutions for all kinds of dapps that might sprout. We offer different programming language choices, you can pick based on your needs.\n\nBut at the same time, this is also an irresponsible answer! Telling a newcomer that you have many choices to choose from, is like telling them nothing. They will just be overwhelmed by the numerous choices. After all, all they want to do, is pick a language and start experimenting/building. This means while we do offer choices, we will also need to provide recommendations: what will we pick, if we just get started on building a new dapp on CKB?\n\nTo make a recommendation, we will first need answers to 2 simple questions:\n\n1. What is your purpose here? Are you just experimenting things on CKB, or are you already tasked to build a production grade dapp?\n2. What do you plan to build? Are you building a normal dapp, or are you creating a new crypto primitives on CKB?\n\nThe answers to the questions, will affect the choices we suggest here.\n\n**NOTE**: the recommendation made here, are only relavant when I write this post(Apr 9, 2020), we are building working on this field, and things might change. I will try to make sure this post is updated, but it is always better to check with us first to see our latest recommendation is, either on [Discord](https://discord.gg/AqGTUE9), or [Nervos Talk](https://talk.nervos.org/).\n\n# Production Level Languages\n\nFor people tasked building a production grade dapp, a warning shall be provided above all: no matter what language you pick to build the smart contract part of your dapp, you should do security audit on your smart contracts. Vulnerabilities can only be eliminated via due diligence, no programming languages can help you on this part. With that said, we can now jump to the recommendation part.\n\nUnfortunately, all production level smart contracts on CKB now, are written in pure C. The reason for this, is not C is that suitable language for writing smart contract, but really that when we started out to build CKB, only C provides good enough quality for building the contracts we need. We don't recommend using C to build any smart contract when you have a better choice, but we do admit sometimes C has to be the last resort.\n\nIn the meantime, we are busy working on Rust support to prepare Rust for this list. While things are still a little rough today, Rust might be a decent choice for building production level smart contracts on CKB soon. And you can bet on that we will continue to maintain and support building Rust smart contracts on CKB. While personally, I know CKB VM can be leveraged in ways that Rust is having a hard time to keep up, the reality is Rust is a very popular and (in many cases) good enough choice for the blockchain world. We are hoping in the not-so-distant future, maybe in a few months, we can sincerely recommend using Rust to build production level smart contracts on CKB.\n\nWhile it certainly would not suit all cases, many people might be building smart contracts that:\n\n- Needs rapid changes or dynamic behaviors;\n- Are built by not so low-level focused engineers;\n- Might not be so easily affected by cycle consumptions;\n\nFor this group of people, JavaScript might also be a decent smart contract choice. We are now evaluating the possibilities if we can perform a round of security audit on duktape, or some other JavaScript engine that is suitable on CKB. While you still need to audit the JavaScript source written by yourself, we can help you ensure that the underlying JavaScript engine you use, will perform in a correct and secure behavior.\n\n# Experimental Languages\n\nWhen it comes to experimenting on CKB, you have more freedom to use different other languages. I will divide my recommendation here based on the second question above: the stuff you want to build on CKB.\n\n## Cryptographic Primitive Explorer\n\nOne unique aspect of CKB, is that it helps flourish cryptographic innovations. It's now different from the old days, when you have to wait for a hardfork so someone can include your brand new cryptographic algorithms in a blockchain. With CKB, you can build any cryptographic algorithm, and ship it on chain immediately. You might say: well this is great, but what programming language shall we use here?\n\nIf you have checked out [our code](https://github.com/nervosnetwork/ckb-system-scripts), you will noticed that we've taken the [secp256k1 C library](https://github.com/bitcoin-core/secp256k1) from the Bitcoin team(huge thanks guys!). So obvious, C is a choice here. But C is hardly the only choice: as mentioned above, we are busy working pushing the frontier here, and we are hoping soon Rust can provide a second choice here. There are already many cryptographic libraries built in Rust, we do want to embrace the whole blockchain community, rather than distancing from it. But there is actually more interesting story here besides C or Rust:\n\nIf you dig [deep](https://github.com/bitcoin-core/secp256k1/blob/4f27e344c69c33b4f3f448baa0196b9892287081/src/asm/field_10x26_arm.s) [enough](https://github.com/briansmith/ring/blob/00c21e253ba9cd3b66ab41155414b0d0e91b6c95/crypto/poly1305/asm/poly1305-x86_64.pl), most highly used cryptographic libraries uses hand-written assembly to further speed up the code. There is actually [good reason](https://cr.yp.to/qhasm/20050129-portable.txt) behind it. Since CKB builds on a real instruction set used by CPU, there's actually no stopping from us to use hand-written RISC-V assembly to further speed up the crypto algorithms. To make it even more existing, we've been paying close attentions to 2 new RISC-V instruction set extension:\n\n- [V: Vector Extension](https://www.youtube.com/watch?v=GzZ-8bHsD5s)\n- [B: Bit Manipulation Extension](https://github.com/riscv/riscv-bitmanip)\n\nWe believe those 2 extensions can bring up even closer to the full potential of modern days' CPU architecture. Once they are introduced to CKB, hand-written, assembly based crypto algorithms leveraging them can enjoy an even greater speedups, which is very hard to match via a language such as C or Rust.\n\n## Regular Dapp Builder\n\nFor experimenting regular dapp logic, you will have a much greater number of choices here: we mentioned JavaScript above, we also have [Ruby](https://github.com/nervosnetwork/ckb-mruby) support. Rust will also soon be a viable choice. There is one more language that I particularly want to mention: for some weird unknown reason, [AssemblyScript](https://assemblyscript.org/) gets widely used in the blockchain industry. Since we do have WASM integration support now, you can also use AssemblyScript to build smart contracts on CKB. We do want to ensure that your existing knowledge in building smart contracts on other blockchains won't go in vain. Innovation is critical of course, but so is preserving histories.\n\n# Beyond The Horizon\n\nThe advantage on CKB doesn't just stop here. It gets more exciting than this:\n\n1. There are tons of languages that have a pure C VM based implementation, such as Lua, MicroPython;\n2. There are also many languages that can be compiled down to C, we will show a real example later;\n3. LLVM now officially has RISC-V support, there are many languages that target LLVM, such as zig;\n4. We now do have WASM support, there are also languages that target WebAssembly, such as AssemblyScript;\n\nSo if you are the pioneer kind, you are very welcome to port new languages and make them work on CKB. And they don't have stop as experimental languages. Once they become more mature with people using it, there is nothing stopping us from treating them as production ready languages on CKB. Fundamentally, it all depends on if we know enough about the language to know where we can expect quirks. We are experimenting with new languages all day, and here I can show you my latest attempt:\n\n# ZetZ\n\nI've been very fascinated by [ZetZ](https://github.com/zetzit/zz) these days. It presents a unique feature set that suits CKB VM perfectly:\n\n- Compiled to C, so we can then use GCC to compile it to RISC-V binaries\n- Encourages stack usage without dynamic memory allocation\n- Leverages an [SMT solver](https://github.com/Z3Prover/z3) to verify code execution\n\nThis basically provides an immediate to use language that suits blockchain smart contract extremely well: on the lower level, a C compiler helps you generate code that is both small and efficient; on the higher level, a theorem prover helps you check code logic to make sure they make sense. In addition, this is not some sort of pure hobby project, it is developed together with a real [usage](https://github.com/devguardio/carrier) in an IoT system with a lot of cryptographic code involved, much like how we would use it in blockchains.\n\nHere our old carrot example in ZetZ:\n\n```\nusing <ckb_syscalls.h> as ckb\nusing <string.h>::{memcmp};\n\nfn load_data(u64 index, u8 mut * buffer) -> int\n   where len(buffer) >= 6 {\n  u64 mut l = 6;\n  int ret = as<int>ckb::ckb_load_cell_data(buffer, &l, 0, index, 2);\n  return ret;\n}\n\nexport fn main () -> int {\n  u64 index = 0;\n  while true {\n    u8 buffer[6];\n    int ret = load_data(index, buffer);\n    if ret == 1 {\n      break;\n    }\n    if memcmp(buffer, \"carrot\", 6) == 0 {\n      return -1;\n    }\n    index++;\n  }\n  return 0;\n}\n```\n\nYou don't have to be able to understand anything here. However, if you have a little experience with C, that `where len(buffer) >= 6` will immediately catch your attention: ZetZ uses theorem prover to ensure all calling to the `load_data` function shall provide a buffer that is at least 6 bytes long. If we change the buffer size in the main function to something less than 6, an error will immediately be generated when we build the source code:\n\n```\n$ zz build\n [ERROR] unproven callsite assert for infix expression\n  --> /home/ubuntu/code/ckb-zz-demo/src/main.zz:15:25\n   |\n15 |     int ret = load_data(index, buffer);␊\n   |                         ^------------^\n   |\n   = in this callsite\n\n --> /home/ubuntu/code/ckb-zz-demo/src/main.zz:5:22\n  |\n5 |    where len(buffer) >= 6 {␊\n  |                      ^^\n  |\n  = function call requires these conditions\n\n --> /home/ubuntu/code/ckb-zz-demo/src/main.zz:4:1\n  |\n4 | fn load_data(u64 index, u8 mut * buffer) -> int␊\n  | ...\n9 | }␊\n  | ^\n  |\n  = for this function\n\n --> /home/ubuntu/code/ckb-zz-demo/src/main.zz:5:22\n  |\n5 |    where len(buffer) >= 6 {␊\n  |                      ^^\n  |\n  = for infix expression |0| = false\n\n --> /home/ubuntu/code/ckb-zz-demo/src/main.zz:5:14\n  |\n5 |    where len(buffer) >= 6 {␊\n  |              ^-----^\n  |\n  = for literal 3 |0| = 0x3\n\n --> /home/ubuntu/code/ckb-zz-demo/src/main.zz:5:25\n  |\n5 |    where len(buffer) >= 6 {␊\n  |                         ^\n  |\n  = for literal 6 |0| = 0x6\n\n  --> /home/ubuntu/code/ckb-zz-demo/src/main.zz:15:25\n   |\n15 |     int ret = load_data(index, buffer);␊\n   |                         ^------------^\n   |\n   = last callsite\n```\n\nYou can see here that ZetZ knows that we are passing a buffer of 3 bytes to a function which requires a buffer of at least 6 bytes. The build phase results in an error.\n\nOn the other hand, the final generated code, when cleaned a bit, looks exactly like how we would write this by hand in C:\n\n```\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n\nstatic int ckb_zz_demo_main_load_data(uint64_t const index,\n                                      uint8_t* const buffer);\n\n#include <string.h>\n\nint __attribute__((visibility(\"default\"))) ckb_zz_demo_main_main();\n\n#include <ckb_syscalls.h>\n\nstatic int ckb_zz_demo_main_load_data(uint64_t const index,\n                                      uint8_t* const buffer);\n\nint main() {\n  uint64_t const index = 0;\n  while (true) {\n    uint8_t const buffer[6];\n    int const ret = ckb_zz_demo_main_load_data(index, buffer);\n    if ((ret == 1)) {\n      break;\n    }\n    if ((memcmp(buffer, \"carrot\", 6) == 0)) {\n      return -1;\n    }\n    (index++);\n  }\n  return 0;\n}\n\nstatic int ckb_zz_demo_main_load_data(uint64_t const index,\n                                      uint8_t* const buffer) {\n  uint64_t l = 6;\n  int const ret = (int)(ckb_load_cell_data(buffer, (&l), 0, index, 2));\n  return ret;\n}\n\n```\n\nNo prover checking code is included in the final C code here, it is just how a plain C implementation would look like. We are not paying any runtime cost here.\n\nThis example here only demostrates a small benefit of ZetZ, while the theorem prover in ZetZ can definitely do more sophisticated checking. The language is still in its infancy phase, I don't know how the future would look like, but this is definitely something I'd like to keep an eye on.\n\n# Recap\n\nI hope you won't treat me as a ZetZ zealot now. It really is just one example I'm playing with now. What I'm trying to say here, is that if you have any particular language you love, or discover anything that might be useful for your dapp. There really is nothing that prevents you from porting that to CKB. We really want to put the freedom, back to all the awesome developers out there. And if you have built something that proves to be useful, our [grant](https://www.nervos.org/grants/) program is awaiting for your submission."}],"blogListPaginated":[{"items":["intro-to-ckb-script-programming-1"],"metadata":{"permalink":"/blog","page":1,"postsPerPage":1,"totalPages":10,"totalCount":10,"nextPage":"/blog/page/2","blogDescription":"Blog Posts About Nervos Blockchain","blogTitle":"Nervos Blog"}},{"items":["intro-to-ckb-script-programming-2"],"metadata":{"permalink":"/blog/page/2","page":2,"postsPerPage":1,"totalPages":10,"totalCount":10,"previousPage":"/blog","nextPage":"/blog/page/3","blogDescription":"Blog Posts About Nervos Blockchain","blogTitle":"Nervos Blog"}},{"items":["intro-to-ckb-script-programming-3"],"metadata":{"permalink":"/blog/page/3","page":3,"postsPerPage":1,"totalPages":10,"totalCount":10,"previousPage":"/blog/page/2","nextPage":"/blog/page/4","blogDescription":"Blog Posts About Nervos Blockchain","blogTitle":"Nervos Blog"}},{"items":["intro-to-ckb-script-programming-4"],"metadata":{"permalink":"/blog/page/4","page":4,"postsPerPage":1,"totalPages":10,"totalCount":10,"previousPage":"/blog/page/3","nextPage":"/blog/page/5","blogDescription":"Blog Posts About Nervos Blockchain","blogTitle":"Nervos Blog"}},{"items":["intro-to-ckb-script-programming-5"],"metadata":{"permalink":"/blog/page/5","page":5,"postsPerPage":1,"totalPages":10,"totalCount":10,"previousPage":"/blog/page/4","nextPage":"/blog/page/6","blogDescription":"Blog Posts About Nervos Blockchain","blogTitle":"Nervos Blog"}},{"items":["intro-to-ckb-script-programming-6"],"metadata":{"permalink":"/blog/page/6","page":6,"postsPerPage":1,"totalPages":10,"totalCount":10,"previousPage":"/blog/page/5","nextPage":"/blog/page/7","blogDescription":"Blog Posts About Nervos Blockchain","blogTitle":"Nervos Blog"}},{"items":["intro-to-ckb-script-programming-7"],"metadata":{"permalink":"/blog/page/7","page":7,"postsPerPage":1,"totalPages":10,"totalCount":10,"previousPage":"/blog/page/6","nextPage":"/blog/page/8","blogDescription":"Blog Posts About Nervos Blockchain","blogTitle":"Nervos Blog"}},{"items":["intro-to-ckb-script-programming-8"],"metadata":{"permalink":"/blog/page/8","page":8,"postsPerPage":1,"totalPages":10,"totalCount":10,"previousPage":"/blog/page/7","nextPage":"/blog/page/9","blogDescription":"Blog Posts About Nervos Blockchain","blogTitle":"Nervos Blog"}},{"items":["intro-to-ckb-script-programming-9"],"metadata":{"permalink":"/blog/page/9","page":9,"postsPerPage":1,"totalPages":10,"totalCount":10,"previousPage":"/blog/page/8","nextPage":"/blog/page/10","blogDescription":"Blog Posts About Nervos Blockchain","blogTitle":"Nervos Blog"}},{"items":["intro-to-ckb-script-programming-10"],"metadata":{"permalink":"/blog/page/10","page":10,"postsPerPage":1,"totalPages":10,"totalCount":10,"previousPage":"/blog/page/9","blogDescription":"Blog Posts About Nervos Blockchain","blogTitle":"Nervos Blog"}}],"blogTags":{},"blogTagsListPath":"/blog/tags"}},"docusaurus-plugin-content-pages":{"default":[{"type":"jsx","permalink":"/homeContents","source":"@site/src/pages/homeContents.tsx"},{"type":"jsx","permalink":"/","source":"@site/src/pages/index.tsx"}]},"docusaurus-plugin-debug":{},"docusaurus-plugin-google-gtag":{},"docusaurus-theme-classic":{},"docusaurus-theme-search-algolia":{},"@cmfcmf/docusaurus-search-local":{},"docusaurus-plugin-client-redirects":{},"custom-webpack-plugin":{},"docusaurus-bootstrap-plugin":{},"docusaurus-mdx-fallback-plugin":{}}}